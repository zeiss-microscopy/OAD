# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/em/hardware/v1/acquisition_response_type.proto, zen_api/em/hardware/v1/acquisition_settings.proto, zen_api/em/hardware/v1/acquisition_status.proto, zen_api/em/hardware/v1/beam_state.proto, zen_api/em/hardware/v1/camera_acquisition_settings.proto, zen_api/em/hardware/v1/camera_acquisition_status.proto, zen_api/em/hardware/v1/camera_service.proto, zen_api/em/hardware/v1/ccd_mode.proto, zen_api/em/hardware/v1/command_id.proto, zen_api/em/hardware/v1/detector_service.proto, zen_api/em/hardware/v1/electron_column_service.proto, zen_api/em/hardware/v1/extended_acquisition_settings.proto, zen_api/em/hardware/v1/external_procedure_service.proto, zen_api/em/hardware/v1/illumination_service.proto, zen_api/em/hardware/v1/simple_acquisition_service.proto, zen_api/em/hardware/v1/vacuum_mode.proto, zen_api/em/hardware/v1/vacuum_service.proto, zen_api/em/hardware/v1/vacuum_state.proto, zen_api/em/hardware/v1/valve.proto, zen_api/em/hardware/v1/valve_state.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AcquisitionResponseType(betterproto.Enum):
    """
    Indicates the type of response returned by the camera live image acquisition stream.
    """

    UNSPECIFIED = 0
    """Unspecified type."""

    FRAME_START = 1
    """
    The response is the first data buffer of a new frame. The response will include the image meta-data.
    """

    FRAME_CONTINUATION = 2
    """
    The response is a continuation of the previous frame. The response will not include the image meta-data.
    """


class AcquisitionStatus(betterproto.Enum):
    """Acquisition states."""

    UNSPECIFIED = 0
    """Default enum value."""

    IDLE = 1
    """No acquisition task is running, available for next acquisition."""

    BUSY = 2
    """
    Acquisition hardware is occupied by another task.
     No acquisition possible at the moment.
    """

    LIVE_RUNNING = 3
    """Live acquisition is currently running."""

    ACQUISITION_RUNNING = 4
    """Acquisition task is currently running."""


class BeamState(betterproto.Enum):
    """Possible beam operating states."""

    UNSPECIFIED = 0
    """Default enum value."""

    UNKNOWN = 1
    """
    Unknown indicates that this variable hasn't been assigned yet.
     This value should never occur. If you read this value, it's a bug.
    """

    ERROR = 2
    """There is an error with the Gun or EHT and the beam cannot be used."""

    OFF = 3
    """
    EHT is off.
     On FE-SEMs, the gun may be on, gun interfaces must be checked to discover gun state.
     On C-SEMs the EHT and gun are off, and there is no current on the filament.
    """

    TURNING_ON = 4
    """The EHT (and gun for C-SEM) is turning on."""

    ON = 5
    """
    Gun is on.
     Filament (if it exists) has full current.
     EHT is on.
     The beam can be used.
    """

    GOING_TO_STANDBY = 6
    """The beam is going into the standby state."""

    STANDBY = 7
    """
    Not all devices support this mode.
     This represents an intermediate state.
     The EVO and the FIB have standby states.
    """

    TURNING_OFF = 8
    """
    The EHT is ramping down.
     On C-SEM, the gun and filament may also be shutting down.
    """


class CameraAcquisitionStatus(betterproto.Enum):
    """Acquisition states."""

    UNSPECIFIED = 0
    """Default enum value."""

    UNKNOWN = 1
    """Should not occur in an initialized system."""

    ERROR = 2
    """
    The image acquisition device is in an error state and cannot be used.
    """

    IDLE = 3
    """The image acquisition device is ready to perform a task."""

    BUSY = 4
    """
    The image acquisition device is busy with other tasks and cannot be used for image acquisition.
    """

    LIVE_ACQUISITION = 5
    """
    The system is performing a scan and will continue until explicitly asked to stop.
     We use the term "Live" instead of "Continuous" because in ZIS, "Continuous"
     means "a time series of snaps with no delay between and no scheduled end".
    """

    SINGLE_ACQUISITION = 6
    """
    The system is performing a scan that has a scheduled
     termination such as "at the end of the frame".
    """


class CcdMode(betterproto.Enum):
    """The CCD mode enumeration."""

    UNSPECIFIED = 0
    """Default enum value."""

    OFF = 1
    """Illumination is off."""

    AUTO = 2
    """Illumination mode is determined based on detector selection."""

    GREYSCALE = 3
    """Illumination is Infra-red, producing greyscale images."""

    COLOR = 4
    """Illumination is White light, producing color images."""


class CommandId(betterproto.Enum):
    UNSPECIFIED = 0
    """framework required, not used for communication."""

    EXECUTE = 1
    """The external procedure is currently executing."""

    STOP = 2
    """The external procedure is about to stop it's execution."""

    PAUSE = 3
    """The external procedure is paused from execution."""

    CONTINUE = 4
    """The external procedure is continued from pause."""

    CLOSE = 5
    """The external procedure is about to close ."""


class VacuumMode(betterproto.Enum):
    """Possible vacuum modes supported by our tools."""

    UNSPECIFIED = 0
    """Default enum value."""

    HIGH_VACUUM = 1
    """
    Standard vacuum mode is ZenApi.EM.Hardware.V1.VacuumMode.HighVacuum.
     Target chamber pressure can not be adjusted.
    """

    VARIABLE_PRESSURE = 2
    """
    The optional ZenApi.EM.Hardware.V1.VacuumMode.VariablePressure mode allows to specify a
     target chamber pressure.
    """


class VacuumState(betterproto.Enum):
    """
    Possible states of the vacuum system.
     TODO enum states must be reviewed by application, maybe Christian Hendrich
     what is really needed on customer side, keep it simple
    """

    UNSPECIFIED = 0
    """Default enum value."""

    READY = 1
    """Vacuum is ready."""

    NOT_READY = 2
    """
    Vacuum is not ready.
     Maybe vented, pumping, venting, ...
    """


class ValveState(betterproto.Enum):
    """
    Possible states of any valve.
     TODO enum states must be reviewed by application, maybe Christian Hendrich
     what is really needed on customer side, keep it simple
    """

    UNSPECIFIED = 0
    """Default enum value."""

    OPEN = 1
    """Valve is open."""

    CLOSED = 2
    """Valve is closed."""


class Valve(betterproto.Enum):
    """Enumeration of all possibles valves to control."""

    UNSPECIFIED = 0
    """The default enum value."""

    SEM_ISOLATION_VALVE = 1
    """SEM column chamber isolation valve."""

    FIB_ISOLATION_VALVE = 2
    """FIB column chamber isolation valve."""


@dataclass(eq=False, repr=False)
class AcquisitionSettings(betterproto.Message):
    """Request object to set the simple acquisition settings."""

    detector_name: str = betterproto.string_field(1)
    """
    The detector to use.
     Null will take the detector from the previous acquisition.
    """

    width: int = betterproto.int32_field(2)
    """The image width in pixels."""

    height: int = betterproto.int32_field(3)
    """The image height in pixels."""

    dwell_time: float = betterproto.double_field(4)
    """
    The dwell time in seconds.
     The closest dwell time to the selected one will be chosen.
    """

    frame_averages: int = betterproto.int32_field(5)
    """
    The number of frames to average.
     1 means no averaging.
    """

    line_averages: int = betterproto.int32_field(6)
    """
    The number of lines to average.
     1 means no averaging.
    """


@dataclass(eq=False, repr=False)
class CameraAcquisitionSettings(betterproto.Message):
    camera_name: str = betterproto.string_field(1)
    """The camera to use."""

    width: int = betterproto.int32_field(2)
    """The image width in pixels."""

    height: int = betterproto.int32_field(3)
    """The image height in pixels."""


@dataclass(eq=False, repr=False)
class CameraServiceGetAcquisitionStatusRequest(betterproto.Message):
    """The CameraServiceGetAcquisitionStatusRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceGetAcquisitionStatusResponse(betterproto.Message):
    """Response object for the get acquisition state."""

    status: "CameraAcquisitionStatus" = betterproto.enum_field(1)
    """The acquisition status."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceGetAvailableCamerasRequest(betterproto.Message):
    """The CameraServiceGetAvailableCamerasRequest class."""

    pass


@dataclass(eq=False, repr=False)
class CameraServiceGetAvailableCamerasResponse(betterproto.Message):
    """Response object representing a list of available cameras."""

    camera_names: List[str] = betterproto.string_field(1)
    """The available cameras on the system."""


@dataclass(eq=False, repr=False)
class CameraServiceGetBrightnessRequest(betterproto.Message):
    """The CameraServiceGetBrightnessRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceGetBrightnessResponse(betterproto.Message):
    """Response object for the get brightness."""

    brightness: float = betterproto.double_field(1)
    """The brightness."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceGetCcdModeRequest(betterproto.Message):
    """The CameraServiceGetCcdModeRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceGetCcdModeResponse(betterproto.Message):
    """Response object for the get CCD mode."""

    mode: "CcdMode" = betterproto.enum_field(1)
    """The CCD mode."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceGetContrastRequest(betterproto.Message):
    """The CameraServiceGetContrastRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceGetContrastResponse(betterproto.Message):
    """Response object for the get contrast."""

    contrast: float = betterproto.double_field(1)
    """The contrast."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnAcquisitionStatusChangedRequest(betterproto.Message):
    """The CameraServiceRegisterOnAcquisitionStatusChangedRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnAcquisitionStatusChangedResponse(betterproto.Message):
    """Response object for the get acquisition state."""

    status: "CameraAcquisitionStatus" = betterproto.enum_field(1)
    """The acquisition status."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnBrightnessChangedRequest(betterproto.Message):
    """The CameraServiceRegisterOnBrightnessChangedRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnBrightnessChangedResponse(betterproto.Message):
    """Response object for the get brightness."""

    brightness: float = betterproto.double_field(1)
    """The brightness."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnCcdModeChangedRequest(betterproto.Message):
    """The CameraServiceRegisterOnCcdModeChangedRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnCcdModeChangedResponse(betterproto.Message):
    """Response object for the get CCD mode."""

    mode: "CcdMode" = betterproto.enum_field(1)
    """The CCD mode."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnContrastChangedRequest(betterproto.Message):
    """The CameraServiceRegisterOnContrastChangedRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceRegisterOnContrastChangedResponse(betterproto.Message):
    """Response object for the get contrast."""

    contrast: float = betterproto.double_field(1)
    """The contrast."""

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceSetBrightnessRequest(betterproto.Message):
    """The CameraServiceSetBrightnessRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""

    brightness: float = betterproto.double_field(2)
    """The brightness to set[0..100]%."""


@dataclass(eq=False, repr=False)
class CameraServiceSetBrightnessResponse(betterproto.Message):
    """Response object for the set brightness."""

    brightness: float = betterproto.double_field(1)
    """The brightness."""

    success: bool = betterproto.bool_field(2)
    """A value indicating whether setting the brightness was successful."""

    message: str = betterproto.string_field(3)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceSetCcdModeRequest(betterproto.Message):
    """The CameraServiceSetCcdModeRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""

    mode: "CcdMode" = betterproto.enum_field(2)
    """The CCD mode to set."""


@dataclass(eq=False, repr=False)
class CameraServiceSetCcdModeResponse(betterproto.Message):
    """Response object for the set CCD mode."""

    mode: "CcdMode" = betterproto.enum_field(1)
    """The CCD mode."""

    success: bool = betterproto.bool_field(2)
    """A value indicating whether setting the CCD mode was successful."""

    message: str = betterproto.string_field(3)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceSetContrastRequest(betterproto.Message):
    """The CameraServiceSetContrastRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""

    contrast: float = betterproto.double_field(2)
    """The contrast to set[0..100]%."""


@dataclass(eq=False, repr=False)
class CameraServiceSetContrastResponse(betterproto.Message):
    """Response object for the set contrast."""

    contrast: float = betterproto.double_field(1)
    """The contrast."""

    success: bool = betterproto.bool_field(2)
    """A value indicating whether setting the contrast was successful."""

    message: str = betterproto.string_field(3)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class CameraServiceStartLiveAcquisitionRequest(betterproto.Message):
    """The CameraServiceStartLiveAcquisitionRequest class."""

    settings: "CameraAcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire multiple frames."""


@dataclass(eq=False, repr=False)
class CameraServiceStartLiveAcquisitionResponse(betterproto.Message):
    """Response object of the camera live image acquisition."""

    result_type: "AcquisitionResponseType" = betterproto.enum_field(1)
    """
    A value indicating the type of response returned by the camera live image acquisition stream.
    """

    width: int = betterproto.int32_field(2)
    """
    The overall width of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    height: int = betterproto.int32_field(3)
    """
    The overall height of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    bytes_per_pixel: int = betterproto.uint32_field(4)
    """
    The number of bytes per pixel. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    total_image_size: int = betterproto.int32_field(5)
    """
    The total size of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    image_data: bytes = betterproto.bytes_field(6)
    """
    The data buffer of this part of the image. This may be less than the total image size, in which case the client should expect more data to follow.
    """


@dataclass(eq=False, repr=False)
class CameraServiceStartSingleAcquisitionRequest(betterproto.Message):
    """The CameraServiceStartSingleAcquisitionRequest class."""

    settings: "CameraAcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire a frame."""


@dataclass(eq=False, repr=False)
class CameraServiceStartSingleAcquisitionResponse(betterproto.Message):
    """Response object of the camera single image acquisition."""

    result_type: "AcquisitionResponseType" = betterproto.enum_field(1)
    """
    A value indicating the type of response returned by the camera live image acquisition stream.
    """

    width: int = betterproto.int32_field(2)
    """
    The overall width of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    height: int = betterproto.int32_field(3)
    """
    The overall height of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    bytes_per_pixel: int = betterproto.uint32_field(4)
    """
    The number of bytes per pixel. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    total_image_size: int = betterproto.int32_field(5)
    """
    The total size of the image. This is only valid when the ResultType is FrameStart, otherwise it will be set to zero and not transmitted.
    """

    image_data: bytes = betterproto.bytes_field(6)
    """
    The data buffer of this part of the image. This may be less than the total image size, in which case the client should expect more data to follow.
    """


@dataclass(eq=False, repr=False)
class CameraServiceStopLiveAcquisitionRequest(betterproto.Message):
    """The CameraServiceStopLiveAcquisitionRequest class."""

    camera_id: str = betterproto.string_field(1)
    """The camera ID."""


@dataclass(eq=False, repr=False)
class CameraServiceStopLiveAcquisitionResponse(betterproto.Message):
    """Response object of the camera stop acquisition."""

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to acquire an image succeeded or not.
    """

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class DetectorServiceGetAvailableDetectorsRequest(betterproto.Message):
    """The DetectorServiceGetAvailableDetectorsRequest class."""

    pass


@dataclass(eq=False, repr=False)
class DetectorServiceGetAvailableDetectorsResponse(betterproto.Message):
    """Response object representing a list of available detectors."""

    detector_names: List[str] = betterproto.string_field(1)
    """The available detectors on the system."""


@dataclass(eq=False, repr=False)
class DetectorServiceGetBrightnessRequest(betterproto.Message):
    """The DetectorServiceGetBrightnessRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """


@dataclass(eq=False, repr=False)
class DetectorServiceGetBrightnessResponse(betterproto.Message):
    """Response object representing a detector brightness value."""

    brightness: float = betterproto.double_field(1)
    """The brightness in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class DetectorServiceGetContrastRequest(betterproto.Message):
    """The DetectorServiceGetContrastRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """


@dataclass(eq=False, repr=False)
class DetectorServiceGetContrastResponse(betterproto.Message):
    """Response object representing a detector contrast value."""

    contrast: float = betterproto.double_field(1)
    """The contrast in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class DetectorServiceRegisterOnBrightnessChangedRequest(betterproto.Message):
    """The DetectorServiceRegisterOnBrightnessChangedRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """


@dataclass(eq=False, repr=False)
class DetectorServiceRegisterOnBrightnessChangedResponse(betterproto.Message):
    """Response object representing a detector brightness value."""

    brightness: float = betterproto.double_field(1)
    """The brightness in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class DetectorServiceRegisterOnContrastChangedRequest(betterproto.Message):
    """The DetectorServiceRegisterOnContrastChangedRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """


@dataclass(eq=False, repr=False)
class DetectorServiceRegisterOnContrastChangedResponse(betterproto.Message):
    """Response object representing a detector contrast value."""

    contrast: float = betterproto.double_field(1)
    """The contrast in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class DetectorServiceSetBrightnessRequest(betterproto.Message):
    """The DetectorServiceSetBrightnessRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """

    brightness: float = betterproto.double_field(2)
    """The brightness value to apply in percentage [0, 1]."""


@dataclass(eq=False, repr=False)
class DetectorServiceSetBrightnessResponse(betterproto.Message):
    """Response object representing a detector brightness value."""

    brightness: float = betterproto.double_field(1)
    """The brightness in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class DetectorServiceSetContrastRequest(betterproto.Message):
    """The DetectorServiceSetContrastRequest class."""

    detector_name: str = betterproto.string_field(1)
    """
    The unique name of the detector to control as string. Must be part of ZenApi.EM.Hardware.V1.IDetectorApi.GetAvailableDetectors.
    """

    contrast: float = betterproto.double_field(2)
    """The contrast value to apply in percentage [0, 1]."""


@dataclass(eq=False, repr=False)
class DetectorServiceSetContrastResponse(betterproto.Message):
    """Response object representing a detector contrast value."""

    contrast: float = betterproto.double_field(1)
    """The contrast in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetActualVoltageRequest(betterproto.Message):
    """The ElectronColumnServiceGetActualVoltageRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetActualVoltageResponse(betterproto.Message):
    """Response object representing the eht/voltage."""

    voltage: float = betterproto.double_field(1)
    """The eht/voltage in volts."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetBeamShiftRequest(betterproto.Message):
    """The ElectronColumnServiceGetBeamShiftRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetBeamShiftResponse(betterproto.Message):
    """Response object describing the beam shift values."""

    shift_x: float = betterproto.double_field(1)
    """The x beam shift in meters."""

    shift_y: float = betterproto.double_field(2)
    """The y beam shift in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetBeamStateRequest(betterproto.Message):
    """The ElectronColumnServiceGetBeamStateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetBeamStateResponse(betterproto.Message):
    """BeamState enum wrapper."""

    state: "BeamState" = betterproto.enum_field(1)
    """The beam state."""

    task_success: bool = betterproto.bool_field(2)
    """
    A value indicating whether the task to change beam state succeeded or not.
    """


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFocusLimitsRequest(betterproto.Message):
    """The ElectronColumnServiceGetFocusLimitsRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFocusLimitsResponse(betterproto.Message):
    """Response object representing the column focus."""

    focus_min: float = betterproto.double_field(1)
    """The minimum focus in meters."""

    focus_max: float = betterproto.double_field(2)
    """The maximum focus in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFocusRequest(betterproto.Message):
    """The ElectronColumnServiceGetFocusRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFocusResponse(betterproto.Message):
    """Response object representing the column focus."""

    focus: float = betterproto.double_field(1)
    """The focus in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFovRequest(betterproto.Message):
    """The ElectronColumnServiceGetFovRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFovResponse(betterproto.Message):
    """Response object representing the field of view expansion."""

    fov: float = betterproto.double_field(1)
    """The fov expansion in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFovRotationRequest(betterproto.Message):
    """The ElectronColumnServiceGetFovRotationRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetFovRotationResponse(betterproto.Message):
    """Response object representing the field of view rotation."""

    rotation: float = betterproto.double_field(1)
    """The field of view rotation in radians."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetProbeCurrentRequest(betterproto.Message):
    """The ElectronColumnServiceGetProbeCurrentRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetProbeCurrentResponse(betterproto.Message):
    """Response object representing the probe current."""

    probe_current: float = betterproto.double_field(1)
    """The probe current value in Amps."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetSemiAngleRequest(betterproto.Message):
    """The ElectronColumnServiceGetSemiAngleRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetSemiAngleResponse(betterproto.Message):
    """Response object describing the semi angle value."""

    angle: float = betterproto.double_field(1)
    """The semi angle in radians."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetSpotSizeRequest(betterproto.Message):
    """The ElectronColumnServiceGetSpotSizeRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetSpotSizeResponse(betterproto.Message):
    """Response object representing the spot size."""

    spot_size: float = betterproto.double_field(1)
    """The spot size in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetStigmatorRequest(betterproto.Message):
    """The ElectronColumnServiceGetStigmatorRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetStigmatorResponse(betterproto.Message):
    """
    Response object representing the stigmator value of the electron column.
    """

    stigmator_x: float = betterproto.double_field(1)
    """The stigmator x in percent [0,1]."""

    stigmator_y: float = betterproto.double_field(2)
    """The stigmator y in percent [0,1]."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetTargetVoltageRequest(betterproto.Message):
    """The ElectronColumnServiceGetTargetVoltageRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGetTargetVoltageResponse(betterproto.Message):
    """Response object representing the eht/voltage."""

    voltage: float = betterproto.double_field(1)
    """The eht/voltage in volts."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGoToStandbyRequest(betterproto.Message):
    """The ElectronColumnServiceGoToStandbyRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceGoToStandbyResponse(betterproto.Message):
    """BeamState enum wrapper."""

    state: "BeamState" = betterproto.enum_field(1)
    """The beam state."""

    task_success: bool = betterproto.bool_field(2)
    """
    A value indicating whether the task to change beam state succeeded or not.
    """


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnBeamShiftChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnBeamShiftChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnBeamShiftChangedResponse(betterproto.Message):
    """Response object describing the beam shift values."""

    shift_x: float = betterproto.double_field(1)
    """The x beam shift in meters."""

    shift_y: float = betterproto.double_field(2)
    """The y beam shift in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnBeamStateChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnBeamStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnBeamStateChangedResponse(betterproto.Message):
    """BeamState enum wrapper."""

    state: "BeamState" = betterproto.enum_field(1)
    """The beam state."""

    task_success: bool = betterproto.bool_field(2)
    """
    A value indicating whether the task to change beam state succeeded or not.
    """


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFocusChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnFocusChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFocusChangedResponse(betterproto.Message):
    """Response object representing the column focus."""

    focus: float = betterproto.double_field(1)
    """The focus in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFovChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnFovChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFovChangedResponse(betterproto.Message):
    """Response object representing the field of view expansion."""

    fov: float = betterproto.double_field(1)
    """The fov expansion in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFovRotationChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnFovRotationChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnFovRotationChangedResponse(betterproto.Message):
    """Response object representing the field of view rotation."""

    rotation: float = betterproto.double_field(1)
    """The field of view rotation in radians."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnProbeCurrentChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnProbeCurrentChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnProbeCurrentChangedResponse(betterproto.Message):
    """Response object representing the probe current."""

    probe_current: float = betterproto.double_field(1)
    """The probe current value in Amps."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnSemiAngleChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnSemiAngleChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnSemiAngleChangedResponse(betterproto.Message):
    """Response object describing the semi angle values."""

    angle: float = betterproto.double_field(1)
    """The semi angle in radians."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnSpotSizeChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnSpotSizeChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnSpotSizeChangedResponse(betterproto.Message):
    """Response object representing the spot size."""

    spot_size: float = betterproto.double_field(1)
    """The spot size in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnStigmatorChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnStigmatorChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnStigmatorChangedResponse(betterproto.Message):
    """
    Response object representing stigmator changes of the electron column.
    """

    stigmator_x: float = betterproto.double_field(1)
    """The stigmator x in percent [0,1]."""

    stigmator_y: float = betterproto.double_field(2)
    """The stigmator y in percent [0,1]."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnVoltageChangedRequest(betterproto.Message):
    """The ElectronColumnServiceRegisterOnVoltageChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceRegisterOnVoltageChangedResponse(betterproto.Message):
    """Response object representing the eht/voltage."""

    voltage: float = betterproto.double_field(1)
    """The eht/voltage in volts."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetBeamShiftRequest(betterproto.Message):
    """The ElectronColumnServiceSetBeamShiftRequest class."""

    xshift: Optional[float] = betterproto.message_field(
        1, wraps=betterproto.TYPE_DOUBLE
    )
    """The new beam shift x in meters. null if it should not be changed."""

    yshift: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """The new beam shift y in meters. null if it should not be changed."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetBeamShiftResponse(betterproto.Message):
    """Response object describing the beam shift values."""

    shift_x: float = betterproto.double_field(1)
    """The x beam shift in meters."""

    shift_y: float = betterproto.double_field(2)
    """The y beam shift in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFocusRequest(betterproto.Message):
    """The ElectronColumnServiceSetFocusRequest class."""

    focus: float = betterproto.double_field(1)
    """The new focus in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFocusResponse(betterproto.Message):
    """Response object representing the column focus."""

    focus: float = betterproto.double_field(1)
    """The focus in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFovRequest(betterproto.Message):
    """The ElectronColumnServiceSetFovRequest class."""

    fov: float = betterproto.double_field(1)
    """The size of the new FOV in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFovResponse(betterproto.Message):
    """Response object representing the field of view expansion."""

    fov: float = betterproto.double_field(1)
    """The fov expansion in meters."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFovRotationRequest(betterproto.Message):
    """The ElectronColumnServiceSetFovRotationRequest class."""

    fov_rotation: float = betterproto.double_field(1)
    """The rotation in radians, clockwise."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetFovRotationResponse(betterproto.Message):
    """Response object representing the field of view rotation."""

    rotation: float = betterproto.double_field(1)
    """The field of view rotation in radians."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetStigmatorRequest(betterproto.Message):
    """The ElectronColumnServiceSetStigmatorRequest class."""

    stigmator_x: Optional[float] = betterproto.message_field(
        1, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The stigmator x value in percent [0, 1] or null if is not supposed to change.
    """

    stigmator_y: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The stigmator y value in percent [0, 1] or null if is not supposed to change.
    """


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetStigmatorResponse(betterproto.Message):
    """Response object representing the stigmator set value."""

    stigmator_x: float = betterproto.double_field(1)
    """The stigmator x in percent [0,1]."""

    stigmator_y: float = betterproto.double_field(2)
    """The stigmator y in percent [0,1]."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetVoltageRequest(betterproto.Message):
    """The ElectronColumnServiceSetVoltageRequest class."""

    voltage: float = betterproto.double_field(1)
    """The new eht/voltage in volts."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceSetVoltageResponse(betterproto.Message):
    """Response object representing the eht/voltage."""

    voltage: float = betterproto.double_field(1)
    """The eht/voltage in volts."""


@dataclass(eq=False, repr=False)
class ElectronColumnServiceTurnOffRequest(betterproto.Message):
    """The ElectronColumnServiceTurnOffRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceTurnOffResponse(betterproto.Message):
    """BeamState enum wrapper."""

    state: "BeamState" = betterproto.enum_field(1)
    """The beam state."""

    task_success: bool = betterproto.bool_field(2)
    """
    A value indicating whether the task to change beam state succeeded or not.
    """


@dataclass(eq=False, repr=False)
class ElectronColumnServiceTurnOnRequest(betterproto.Message):
    """The ElectronColumnServiceTurnOnRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ElectronColumnServiceTurnOnResponse(betterproto.Message):
    """BeamState enum wrapper."""

    state: "BeamState" = betterproto.enum_field(1)
    """The beam state."""

    task_success: bool = betterproto.bool_field(2)
    """
    A value indicating whether the task to change beam state succeeded or not.
    """


@dataclass(eq=False, repr=False)
class ExtendedAcquisitionSettings(betterproto.Message):
    """Request object to set the simple acquisition settings."""

    detector_name: str = betterproto.string_field(1)
    """
    The detector to use.
     Null will take the detector from the previous acquisition.
    """

    width: int = betterproto.int32_field(2)
    """The image width in pixels."""

    height: int = betterproto.int32_field(3)
    """The image height in pixels."""

    dwell_time: float = betterproto.double_field(4)
    """
    The dwell time in seconds.
     The closest dwell time to the selected one will be chosen.
    """

    frame_averages: int = betterproto.int32_field(5)
    """
    The number of frames to average.
     1 means no averaging.
    """

    line_averages: int = betterproto.int32_field(6)
    """
    The number of lines to average.
     1 means no averaging.
    """

    scan_size_x: float = betterproto.double_field(7)
    """
    The relative size of the scan field in x direction
     proportional to the full field of view, where the FOV equals 1.
     Range (0, 1].
    """

    scan_size_y: float = betterproto.double_field(8)
    """
    The relative size of the scan field in y direction
     proportional to the full field of view, where the FOV equals 1.
     Range (0, 1].
    """

    scan_center_x: float = betterproto.double_field(9)
    """
    The relative position of the scan field in x direction
     proportional to the full field of view, where the optical axis is at (0,0)
     and the FOV ranges from -0.5 to 0.5.
     Range (-0.5, 0.5).
    """

    scan_center_y: float = betterproto.double_field(10)
    """
    The relative position of the scan field in y direction
     proportional to the full field of view, where the optical axis is at (0,0)
     and the FOV ranges from -0.5 to 0.5.
     Range (-0.5, 0.5).
    """


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceRegisterExternalProcedureRequest(betterproto.Message):
    """The ExternalProcedureServiceRegisterExternalProcedureRequest class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceRegisterExternalProcedureResponse(betterproto.Message):
    """
    transfer object definition used to send commands to external procedures
    """

    parameters: List[str] = betterproto.string_field(1)
    """An array of string parameters, may be empty"""

    id: str = betterproto.string_field(2)
    """
    The System.Guid of the external procedure the command is for, needs to be filtered by external procedures, as all procedures use the same channel to listen for commands
    """

    command_id: "CommandId" = betterproto.enum_field(3)
    """
    The ZenApi.EM.Hardware.V1.ExternalProcedureServiceRegisterExternalProcedureResponse.CommandId telling the external procedure what to do
    """


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportCommandFailureRequest(betterproto.Message):
    """The ExternalProcedureServiceReportCommandFailureRequest class."""

    id: str = betterproto.string_field(1)
    """
    the System.Guid of a given running script a command has been send to.
    """

    command_id: "CommandId" = betterproto.enum_field(2)
    """the ZenApi.EM.Hardware.V1.CommandId of a given command."""


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportCommandFailureResponse(betterproto.Message):
    """The ExternalProcedureServiceReportCommandFailureResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportCommandSuccessRequest(betterproto.Message):
    """The ExternalProcedureServiceReportCommandSuccessRequest class."""

    id: str = betterproto.string_field(1)
    """
    the System.Guid of a given running script a command has been send to.
    """

    command_id: "CommandId" = betterproto.enum_field(2)
    """the ZenApi.EM.Hardware.V1.CommandId of a given command."""


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportCommandSuccessResponse(betterproto.Message):
    """The ExternalProcedureServiceReportCommandSuccessResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportInitializationErrorRequest(betterproto.Message):
    """The ExternalProcedureServiceReportInitializationErrorRequest class."""

    id: str = betterproto.string_field(1)
    """the id as System.Guid of the external procedure."""

    error_message: str = betterproto.string_field(2)
    """a System.String error message."""


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportInitializationErrorResponse(betterproto.Message):
    """The ExternalProcedureServiceReportInitializationErrorResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportProgressRequest(betterproto.Message):
    """The ExternalProcedureServiceReportProgressRequest class."""

    id: str = betterproto.string_field(1)
    """the id as System.Guid of the external procedure."""

    progress: float = betterproto.double_field(2)
    """
    The progress to be reported i the range [0, 1]. Alternatively, -1 for undetermined progress.
    """


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportProgressResponse(betterproto.Message):
    """The ExternalProcedureServiceReportProgressResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportReadyRequest(betterproto.Message):
    """The ExternalProcedureServiceReportReadyRequest class."""

    id: str = betterproto.string_field(1)
    """the id as System.Guid of the external procedure."""

    error_message: str = betterproto.string_field(2)
    """
    a nullable System.String to report an error during the execution of the last run.
    """


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportReadyResponse(betterproto.Message):
    """The ExternalProcedureServiceReportReadyResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportStatusRequest(betterproto.Message):
    """The ExternalProcedureServiceReportStatusRequest class."""

    id: str = betterproto.string_field(1)
    """the id as System.Guid of the external procedure."""

    message: str = betterproto.string_field(2)
    """the System.String to be reported."""


@dataclass(eq=False, repr=False)
class ExternalProcedureServiceReportStatusResponse(betterproto.Message):
    """The ExternalProcedureServiceReportStatusResponse class."""

    pass


@dataclass(eq=False, repr=False)
class IlluminationServiceGetIlluminationIrRequest(betterproto.Message):
    """The IlluminationServiceGetIlluminationIRRequest class."""

    pass


@dataclass(eq=False, repr=False)
class IlluminationServiceGetIlluminationIrResponse(betterproto.Message):
    """Response object for the illuminator get illumination IR."""

    illumination_ir: float = betterproto.double_field(1)
    """The illumination IR."""


@dataclass(eq=False, repr=False)
class IlluminationServiceGetIlluminationWhiteRequest(betterproto.Message):
    """The IlluminationServiceGetIlluminationWhiteRequest class."""

    pass


@dataclass(eq=False, repr=False)
class IlluminationServiceGetIlluminationWhiteResponse(betterproto.Message):
    """Response object for the illuminator get illumination white."""

    illumination_white: float = betterproto.double_field(1)
    """The illumination white."""


@dataclass(eq=False, repr=False)
class IlluminationServiceRegisterOnIlluminationIrChangedRequest(betterproto.Message):
    """The IlluminationServiceRegisterOnIlluminationIRChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class IlluminationServiceRegisterOnIlluminationIrChangedResponse(betterproto.Message):
    """Response object for register on illumination IR changed."""

    illumination_ir: float = betterproto.double_field(1)
    """The illumination IR."""


@dataclass(eq=False, repr=False)
class IlluminationServiceRegisterOnIlluminationWhiteChangedRequest(betterproto.Message):
    """
    The IlluminationServiceRegisterOnIlluminationWhiteChangedRequest class.
    """

    pass


@dataclass(eq=False, repr=False)
class IlluminationServiceRegisterOnIlluminationWhiteChangedResponse(
    betterproto.Message
):
    """Response object for register on illumination white changed."""

    illumination_white: float = betterproto.double_field(1)
    """The illumination white."""


@dataclass(eq=False, repr=False)
class IlluminationServiceSetIlluminationIrRequest(betterproto.Message):
    """The IlluminationServiceSetIlluminationIRRequest class."""

    illumination_ir: float = betterproto.double_field(1)
    """The illumination IR value to set [0..100]%."""


@dataclass(eq=False, repr=False)
class IlluminationServiceSetIlluminationIrResponse(betterproto.Message):
    """Response object for the illuminator set illumination IR."""

    illumination_ir: float = betterproto.double_field(1)
    """The illumination IR."""

    success: bool = betterproto.bool_field(2)
    """A value indicating whether setting the brightness was successful."""

    message: str = betterproto.string_field(3)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class IlluminationServiceSetIlluminationWhiteRequest(betterproto.Message):
    """The IlluminationServiceSetIlluminationWhiteRequest class."""

    illumination_white: float = betterproto.double_field(1)
    """The illumination white value to set [0..100]%."""


@dataclass(eq=False, repr=False)
class IlluminationServiceSetIlluminationWhiteResponse(betterproto.Message):
    """Response object for the illuminator set illumination white."""

    illumination_white: float = betterproto.double_field(1)
    """The illumination white."""

    success: bool = betterproto.bool_field(2)
    """A value indicating whether setting the brightness was successful."""

    message: str = betterproto.string_field(3)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest(betterproto.Message):
    """The SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest class."""

    settings: "ExtendedAcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire a frame."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse(betterproto.Message):
    """
    Response object of the AcquireExtendedSingleFrame method of the ZenApi.EM.Hardware.V1.ISimpleAcquisitionApi.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to initialize the stage succeeded or not.
    """

    width: int = betterproto.int32_field(2)
    """The width in pixels of the image."""

    height: int = betterproto.int32_field(3)
    """The height in pixels of the image."""

    image_data: bytes = betterproto.bytes_field(4)
    """
    The image raw data, 1 frame.
     Frame data as 16 bit per pixel, #pixels = ZenApi.EM.Hardware.V1.SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse.Width * ZenApi.EM.Hardware.V1.SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse.Height.
     Total length in byte = #pixels * 2.
    """

    message: str = betterproto.string_field(5)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceAcquireSingleFrameRequest(betterproto.Message):
    """The SimpleAcquisitionServiceAcquireSingleFrameRequest class."""

    settings: "AcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire a frame."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceAcquireSingleFrameResponse(betterproto.Message):
    """
    Response object of the AcquireSingleFrame method of the ZenApi.EM.Hardware.V1.ISimpleAcquisitionApi.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to initialize the stage succeeded or not.
    """

    width: int = betterproto.int32_field(2)
    """The width in pixels of the image."""

    height: int = betterproto.int32_field(3)
    """The height in pixels of the image."""

    image_data: bytes = betterproto.bytes_field(4)
    """
    The image raw data, 1 frame.
     Frame data as 16 bit per pixel, #pixels = ZenApi.EM.Hardware.V1.SimpleAcquisitionServiceAcquireSingleFrameResponse.Width * ZenApi.EM.Hardware.V1.SimpleAcquisitionServiceAcquireSingleFrameResponse.Height.
     Total length in byte = #pixels * 2.
    """

    message: str = betterproto.string_field(5)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetAcquisitionStatusRequest(betterproto.Message):
    """The SimpleAcquisitionServiceGetAcquisitionStatusRequest class."""

    pass


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetAcquisitionStatusResponse(betterproto.Message):
    """Response object representing the current acquisition status."""

    status: "AcquisitionStatus" = betterproto.enum_field(1)
    """
    A value indicating whether the task to initialize the stage succeeded or not.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetBrightnessRequest(betterproto.Message):
    """The SimpleAcquisitionServiceGetBrightnessRequest class."""

    pass


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetBrightnessResponse(betterproto.Message):
    """Response object representing a detector brightness value."""

    brightness: float = betterproto.double_field(1)
    """The brightness in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetContrastRequest(betterproto.Message):
    """The SimpleAcquisitionServiceGetContrastRequest class."""

    pass


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceGetContrastResponse(betterproto.Message):
    """Response object representing a detector contrast value."""

    contrast: float = betterproto.double_field(1)
    """The contrast in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest(
    betterproto.Message
):
    """
    The SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest class.
    """

    pass


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse(
    betterproto.Message
):
    """Response object representing the current acquisition status."""

    status: "AcquisitionStatus" = betterproto.enum_field(1)
    """
    A value indicating whether the task to initialize the stage succeeded or not.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceSetBrightnessRequest(betterproto.Message):
    """The SimpleAcquisitionServiceSetBrightnessRequest class."""

    brightness: float = betterproto.double_field(1)
    """The brightness value to apply in percentage [0, 1]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceSetBrightnessResponse(betterproto.Message):
    """Response object representing a detector brightness value."""

    brightness: float = betterproto.double_field(1)
    """The brightness in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceSetContrastRequest(betterproto.Message):
    """The SimpleAcquisitionServiceSetContrastRequest class."""

    contrast: float = betterproto.double_field(1)
    """The contrast value to apply in percentage [0, 1]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceSetContrastResponse(betterproto.Message):
    """Response object representing a detector contrast value."""

    contrast: float = betterproto.double_field(1)
    """The contrast in percentage [0, 100]."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest(betterproto.Message):
    """
    The SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest class.
    """

    settings: "ExtendedAcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire multiple frames."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse(betterproto.Message):
    """
    Response object of the StartExtendedLiveAcquisition method of the ZenApi.EM.Hardware.V1.ISimpleAcquisitionApi.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to acquire an image succeeded or not.
    """

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStartLiveAcquisitionRequest(betterproto.Message):
    """The SimpleAcquisitionServiceStartLiveAcquisitionRequest class."""

    settings: "AcquisitionSettings" = betterproto.message_field(1)
    """The imaging settings used to acquire multiple frames."""


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStartLiveAcquisitionResponse(betterproto.Message):
    """
    Response object of the StartLiveAcquisition method of the ZenApi.EM.Hardware.V1.ISimpleAcquisitionApi.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to acquire an image succeeded or not.
    """

    message: str = betterproto.string_field(2)
    """
    A string message for display to the customer in failure case. This is only for display purpose and the message may change.
     Empty string on success.
    """


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStopLiveAcquisitionRequest(betterproto.Message):
    """The SimpleAcquisitionServiceStopLiveAcquisitionRequest class."""

    pass


@dataclass(eq=False, repr=False)
class SimpleAcquisitionServiceStopLiveAcquisitionResponse(betterproto.Message):
    """The SimpleAcquisitionServiceStopLiveAcquisitionResponse class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceCloseValveRequest(betterproto.Message):
    """The VacuumServiceCloseValveRequest class."""

    valve: "Valve" = betterproto.enum_field(1)
    """The valve identifier of the valve to close."""


@dataclass(eq=False, repr=False)
class VacuumServiceCloseValveResponse(betterproto.Message):
    """
    Response object of ZenApi.EM.Hardware.V1.IVacuumApi.CloseValve(ZenApi.EM.Hardware.V1.Valve,System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to close a valve succeeded or not.
    """


@dataclass(eq=False, repr=False)
class VacuumServiceGetAvailableVacuumModesRequest(betterproto.Message):
    """The VacuumServiceGetAvailableVacuumModesRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetAvailableVacuumModesResponse(betterproto.Message):
    """AvailableVacuumModes enum collection response."""

    available_modes: List["VacuumMode"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class VacuumServiceGetAvailableValvesRequest(betterproto.Message):
    """The VacuumServiceGetAvailableValvesRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetAvailableValvesResponse(betterproto.Message):
    """AvailableValves enum collection response."""

    available_valves: List["Valve"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class VacuumServiceGetChamberPressureRequest(betterproto.Message):
    """The VacuumServiceGetChamberPressureRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetChamberPressureResponse(betterproto.Message):
    """Response to represent the chamber pressure."""

    pressure: float = betterproto.double_field(1)
    """The chamber pressure in [pascal]."""


@dataclass(eq=False, repr=False)
class VacuumServiceGetTargetChamberPressureRequest(betterproto.Message):
    """The VacuumServiceGetTargetChamberPressureRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetTargetChamberPressureResponse(betterproto.Message):
    """Response to represent the chamber pressure."""

    pressure: float = betterproto.double_field(1)
    """The chamber pressure in [pascal]."""


@dataclass(eq=False, repr=False)
class VacuumServiceGetVacuumModeRequest(betterproto.Message):
    """The VacuumServiceGetVacuumModeRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetVacuumModeResponse(betterproto.Message):
    """VacuumMode enum response."""

    mode: "VacuumMode" = betterproto.enum_field(1)
    """The vacuum mode."""


@dataclass(eq=False, repr=False)
class VacuumServiceGetVacuumStateRequest(betterproto.Message):
    """The VacuumServiceGetVacuumStateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceGetVacuumStateResponse(betterproto.Message):
    """VacuumState enum response."""

    state: "VacuumState" = betterproto.enum_field(1)
    """The vacuum state."""


@dataclass(eq=False, repr=False)
class VacuumServiceGetValveStateRequest(betterproto.Message):
    """The VacuumServiceGetValveStateRequest class."""

    valve: "Valve" = betterproto.enum_field(1)
    """The valve to get the status of."""


@dataclass(eq=False, repr=False)
class VacuumServiceGetValveStateResponse(betterproto.Message):
    """ValveState enum response."""

    valve: "Valve" = betterproto.enum_field(1)
    """The valve identifier."""

    state: "ValveState" = betterproto.enum_field(2)
    """The valves state."""


@dataclass(eq=False, repr=False)
class VacuumServiceOpenValveRequest(betterproto.Message):
    """The VacuumServiceOpenValveRequest class."""

    valve: "Valve" = betterproto.enum_field(1)
    """The valve identifier of the valve to open."""


@dataclass(eq=False, repr=False)
class VacuumServiceOpenValveResponse(betterproto.Message):
    """
    Response object of ZenApi.EM.Hardware.V1.IVacuumApi.OpenValve(ZenApi.EM.Hardware.V1.Valve,System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to open a valve succeeded or not.
    """


@dataclass(eq=False, repr=False)
class VacuumServicePumpRequest(betterproto.Message):
    """The VacuumServicePumpRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServicePumpResponse(betterproto.Message):
    """
    Response object of the ZenApi.EM.Hardware.V1.IVacuumApi.Pump(System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to pump the chamber succeeded or not.
    """


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnChamberPressureChangedRequest(betterproto.Message):
    """The VacuumServiceRegisterOnChamberPressureChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnChamberPressureChangedResponse(betterproto.Message):
    """Response to represent the chamber pressure."""

    pressure: float = betterproto.double_field(1)
    """The chamber pressure in [pascal]."""


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnTargetChamberPressureChangedRequest(betterproto.Message):
    """
    The VacuumServiceRegisterOnTargetChamberPressureChangedRequest class.
    """

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnTargetChamberPressureChangedResponse(betterproto.Message):
    """Response to represent the chamber pressure."""

    pressure: float = betterproto.double_field(1)
    """The chamber pressure in [pascal]."""


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnVacuumModeChangedRequest(betterproto.Message):
    """The VacuumServiceRegisterOnVacuumModeChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnVacuumModeChangedResponse(betterproto.Message):
    """VacuumMode enum response."""

    mode: "VacuumMode" = betterproto.enum_field(1)
    """The vacuum mode."""


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnVacuumStateChangedRequest(betterproto.Message):
    """The VacuumServiceRegisterOnVacuumStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnVacuumStateChangedResponse(betterproto.Message):
    """VacuumState enum response."""

    state: "VacuumState" = betterproto.enum_field(1)
    """The vacuum state."""


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnValveStateChangedRequest(betterproto.Message):
    """The VacuumServiceRegisterOnValveStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceRegisterOnValveStateChangedResponse(betterproto.Message):
    """ValveState enum response."""

    valve: "Valve" = betterproto.enum_field(1)
    """The valve identifier."""

    state: "ValveState" = betterproto.enum_field(2)
    """The valves state."""


@dataclass(eq=False, repr=False)
class VacuumServiceSetTargetChamberPressureRequest(betterproto.Message):
    """The VacuumServiceSetTargetChamberPressureRequest class."""

    target_pressure: float = betterproto.double_field(1)
    """
    The target chamber pressure if in ZenApi.EM.Hardware.V1.VacuumMode.VariablePressure mode in [pascal].
    """


@dataclass(eq=False, repr=False)
class VacuumServiceSetTargetChamberPressureResponse(betterproto.Message):
    """
    Response object of the ZenApi.EM.Hardware.V1.IVacuumApi.SetTargetChamberPressure(System.Double,System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to set the chamber pressure succeeded or not.
    """


@dataclass(eq=False, repr=False)
class VacuumServiceSetVacuumModeRequest(betterproto.Message):
    """The VacuumServiceSetVacuumModeRequest class."""

    mode: "VacuumMode" = betterproto.enum_field(1)
    """The ZenApi.EM.Hardware.V1.VacuumMode to apply."""


@dataclass(eq=False, repr=False)
class VacuumServiceSetVacuumModeResponse(betterproto.Message):
    """
    Response object of the ZenApi.EM.Hardware.V1.IVacuumApi.SetVacuumMode(ZenApi.EM.Hardware.V1.VacuumMode,System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to set the vacuum mode succeeded or not.
    """


@dataclass(eq=False, repr=False)
class VacuumServiceVentRequest(betterproto.Message):
    """The VacuumServiceVentRequest class."""

    pass


@dataclass(eq=False, repr=False)
class VacuumServiceVentResponse(betterproto.Message):
    """
    Response object of ZenApi.EM.Hardware.V1.IVacuumApi.Vent(System.Threading.CancellationToken) method.
    """

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to vent the chamber succeeded or not.
    """


class CameraServiceStub(betterproto.ServiceStub):
    async def get_acquisition_status(
        self,
        camera_service_get_acquisition_status_request: "CameraServiceGetAcquisitionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceGetAcquisitionStatusResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/GetAcquisitionStatus",
            camera_service_get_acquisition_status_request,
            CameraServiceGetAcquisitionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_cameras(
        self,
        camera_service_get_available_cameras_request: "CameraServiceGetAvailableCamerasRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceGetAvailableCamerasResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/GetAvailableCameras",
            camera_service_get_available_cameras_request,
            CameraServiceGetAvailableCamerasResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_brightness(
        self,
        camera_service_get_brightness_request: "CameraServiceGetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceGetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/GetBrightness",
            camera_service_get_brightness_request,
            CameraServiceGetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_ccd_mode(
        self,
        camera_service_get_ccd_mode_request: "CameraServiceGetCcdModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceGetCcdModeResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/GetCcdMode",
            camera_service_get_ccd_mode_request,
            CameraServiceGetCcdModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_contrast(
        self,
        camera_service_get_contrast_request: "CameraServiceGetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceGetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/GetContrast",
            camera_service_get_contrast_request,
            CameraServiceGetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_acquisition_status_changed(
        self,
        camera_service_register_on_acquisition_status_changed_request: "CameraServiceRegisterOnAcquisitionStatusChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceRegisterOnAcquisitionStatusChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/RegisterOnAcquisitionStatusChanged",
            camera_service_register_on_acquisition_status_changed_request,
            CameraServiceRegisterOnAcquisitionStatusChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_brightness_changed(
        self,
        camera_service_register_on_brightness_changed_request: "CameraServiceRegisterOnBrightnessChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceRegisterOnBrightnessChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/RegisterOnBrightnessChanged",
            camera_service_register_on_brightness_changed_request,
            CameraServiceRegisterOnBrightnessChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_ccd_mode_changed(
        self,
        camera_service_register_on_ccd_mode_changed_request: "CameraServiceRegisterOnCcdModeChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceRegisterOnCcdModeChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/RegisterOnCcdModeChanged",
            camera_service_register_on_ccd_mode_changed_request,
            CameraServiceRegisterOnCcdModeChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_contrast_changed(
        self,
        camera_service_register_on_contrast_changed_request: "CameraServiceRegisterOnContrastChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceRegisterOnContrastChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/RegisterOnContrastChanged",
            camera_service_register_on_contrast_changed_request,
            CameraServiceRegisterOnContrastChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_brightness(
        self,
        camera_service_set_brightness_request: "CameraServiceSetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceSetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/SetBrightness",
            camera_service_set_brightness_request,
            CameraServiceSetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_ccd_mode(
        self,
        camera_service_set_ccd_mode_request: "CameraServiceSetCcdModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceSetCcdModeResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/SetCcdMode",
            camera_service_set_ccd_mode_request,
            CameraServiceSetCcdModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_contrast(
        self,
        camera_service_set_contrast_request: "CameraServiceSetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceSetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/SetContrast",
            camera_service_set_contrast_request,
            CameraServiceSetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_live_acquisition(
        self,
        camera_service_start_live_acquisition_request: "CameraServiceStartLiveAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceStartLiveAcquisitionResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/StartLiveAcquisition",
            camera_service_start_live_acquisition_request,
            CameraServiceStartLiveAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def start_single_acquisition(
        self,
        camera_service_start_single_acquisition_request: "CameraServiceStartSingleAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[CameraServiceStartSingleAcquisitionResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.CameraService/StartSingleAcquisition",
            camera_service_start_single_acquisition_request,
            CameraServiceStartSingleAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def stop_live_acquisition(
        self,
        camera_service_stop_live_acquisition_request: "CameraServiceStopLiveAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CameraServiceStopLiveAcquisitionResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.CameraService/StopLiveAcquisition",
            camera_service_stop_live_acquisition_request,
            CameraServiceStopLiveAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DetectorServiceStub(betterproto.ServiceStub):
    async def get_available_detectors(
        self,
        detector_service_get_available_detectors_request: "DetectorServiceGetAvailableDetectorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetectorServiceGetAvailableDetectorsResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.DetectorService/GetAvailableDetectors",
            detector_service_get_available_detectors_request,
            DetectorServiceGetAvailableDetectorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_brightness(
        self,
        detector_service_get_brightness_request: "DetectorServiceGetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetectorServiceGetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.DetectorService/GetBrightness",
            detector_service_get_brightness_request,
            DetectorServiceGetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_contrast(
        self,
        detector_service_get_contrast_request: "DetectorServiceGetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetectorServiceGetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.DetectorService/GetContrast",
            detector_service_get_contrast_request,
            DetectorServiceGetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_brightness_changed(
        self,
        detector_service_register_on_brightness_changed_request: "DetectorServiceRegisterOnBrightnessChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[DetectorServiceRegisterOnBrightnessChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.DetectorService/RegisterOnBrightnessChanged",
            detector_service_register_on_brightness_changed_request,
            DetectorServiceRegisterOnBrightnessChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_contrast_changed(
        self,
        detector_service_register_on_contrast_changed_request: "DetectorServiceRegisterOnContrastChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[DetectorServiceRegisterOnContrastChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.DetectorService/RegisterOnContrastChanged",
            detector_service_register_on_contrast_changed_request,
            DetectorServiceRegisterOnContrastChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_brightness(
        self,
        detector_service_set_brightness_request: "DetectorServiceSetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetectorServiceSetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.DetectorService/SetBrightness",
            detector_service_set_brightness_request,
            DetectorServiceSetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_contrast(
        self,
        detector_service_set_contrast_request: "DetectorServiceSetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DetectorServiceSetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.DetectorService/SetContrast",
            detector_service_set_contrast_request,
            DetectorServiceSetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ElectronColumnServiceStub(betterproto.ServiceStub):
    async def get_actual_voltage(
        self,
        electron_column_service_get_actual_voltage_request: "ElectronColumnServiceGetActualVoltageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetActualVoltageResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetActualVoltage",
            electron_column_service_get_actual_voltage_request,
            ElectronColumnServiceGetActualVoltageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_beam_shift(
        self,
        electron_column_service_get_beam_shift_request: "ElectronColumnServiceGetBeamShiftRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetBeamShiftResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetBeamShift",
            electron_column_service_get_beam_shift_request,
            ElectronColumnServiceGetBeamShiftResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_beam_state(
        self,
        electron_column_service_get_beam_state_request: "ElectronColumnServiceGetBeamStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetBeamStateResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetBeamState",
            electron_column_service_get_beam_state_request,
            ElectronColumnServiceGetBeamStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_focus(
        self,
        electron_column_service_get_focus_request: "ElectronColumnServiceGetFocusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetFocusResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFocus",
            electron_column_service_get_focus_request,
            ElectronColumnServiceGetFocusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_focus_limits(
        self,
        electron_column_service_get_focus_limits_request: "ElectronColumnServiceGetFocusLimitsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetFocusLimitsResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFocusLimits",
            electron_column_service_get_focus_limits_request,
            ElectronColumnServiceGetFocusLimitsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_fov(
        self,
        electron_column_service_get_fov_request: "ElectronColumnServiceGetFovRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetFovResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFov",
            electron_column_service_get_fov_request,
            ElectronColumnServiceGetFovResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_fov_rotation(
        self,
        electron_column_service_get_fov_rotation_request: "ElectronColumnServiceGetFovRotationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetFovRotationResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFovRotation",
            electron_column_service_get_fov_rotation_request,
            ElectronColumnServiceGetFovRotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_probe_current(
        self,
        electron_column_service_get_probe_current_request: "ElectronColumnServiceGetProbeCurrentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetProbeCurrentResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetProbeCurrent",
            electron_column_service_get_probe_current_request,
            ElectronColumnServiceGetProbeCurrentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_semi_angle(
        self,
        electron_column_service_get_semi_angle_request: "ElectronColumnServiceGetSemiAngleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetSemiAngleResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetSemiAngle",
            electron_column_service_get_semi_angle_request,
            ElectronColumnServiceGetSemiAngleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_spot_size(
        self,
        electron_column_service_get_spot_size_request: "ElectronColumnServiceGetSpotSizeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetSpotSizeResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetSpotSize",
            electron_column_service_get_spot_size_request,
            ElectronColumnServiceGetSpotSizeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stigmator(
        self,
        electron_column_service_get_stigmator_request: "ElectronColumnServiceGetStigmatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetStigmatorResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetStigmator",
            electron_column_service_get_stigmator_request,
            ElectronColumnServiceGetStigmatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_target_voltage(
        self,
        electron_column_service_get_target_voltage_request: "ElectronColumnServiceGetTargetVoltageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGetTargetVoltageResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GetTargetVoltage",
            electron_column_service_get_target_voltage_request,
            ElectronColumnServiceGetTargetVoltageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def go_to_standby(
        self,
        electron_column_service_go_to_standby_request: "ElectronColumnServiceGoToStandbyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceGoToStandbyResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/GoToStandby",
            electron_column_service_go_to_standby_request,
            ElectronColumnServiceGoToStandbyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_beam_shift_changed(
        self,
        electron_column_service_register_on_beam_shift_changed_request: "ElectronColumnServiceRegisterOnBeamShiftChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnBeamShiftChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnBeamShiftChanged",
            electron_column_service_register_on_beam_shift_changed_request,
            ElectronColumnServiceRegisterOnBeamShiftChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_beam_state_changed(
        self,
        electron_column_service_register_on_beam_state_changed_request: "ElectronColumnServiceRegisterOnBeamStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnBeamStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnBeamStateChanged",
            electron_column_service_register_on_beam_state_changed_request,
            ElectronColumnServiceRegisterOnBeamStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_focus_changed(
        self,
        electron_column_service_register_on_focus_changed_request: "ElectronColumnServiceRegisterOnFocusChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFocusChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFocusChanged",
            electron_column_service_register_on_focus_changed_request,
            ElectronColumnServiceRegisterOnFocusChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_fov_changed(
        self,
        electron_column_service_register_on_fov_changed_request: "ElectronColumnServiceRegisterOnFovChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFovChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFovChanged",
            electron_column_service_register_on_fov_changed_request,
            ElectronColumnServiceRegisterOnFovChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_fov_rotation_changed(
        self,
        electron_column_service_register_on_fov_rotation_changed_request: "ElectronColumnServiceRegisterOnFovRotationChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFovRotationChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFovRotationChanged",
            electron_column_service_register_on_fov_rotation_changed_request,
            ElectronColumnServiceRegisterOnFovRotationChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_probe_current_changed(
        self,
        electron_column_service_register_on_probe_current_changed_request: "ElectronColumnServiceRegisterOnProbeCurrentChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnProbeCurrentChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnProbeCurrentChanged",
            electron_column_service_register_on_probe_current_changed_request,
            ElectronColumnServiceRegisterOnProbeCurrentChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_semi_angle_changed(
        self,
        electron_column_service_register_on_semi_angle_changed_request: "ElectronColumnServiceRegisterOnSemiAngleChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnSemiAngleChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnSemiAngleChanged",
            electron_column_service_register_on_semi_angle_changed_request,
            ElectronColumnServiceRegisterOnSemiAngleChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_spot_size_changed(
        self,
        electron_column_service_register_on_spot_size_changed_request: "ElectronColumnServiceRegisterOnSpotSizeChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnSpotSizeChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnSpotSizeChanged",
            electron_column_service_register_on_spot_size_changed_request,
            ElectronColumnServiceRegisterOnSpotSizeChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_stigmator_changed(
        self,
        electron_column_service_register_on_stigmator_changed_request: "ElectronColumnServiceRegisterOnStigmatorChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnStigmatorChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnStigmatorChanged",
            electron_column_service_register_on_stigmator_changed_request,
            ElectronColumnServiceRegisterOnStigmatorChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_voltage_changed(
        self,
        electron_column_service_register_on_voltage_changed_request: "ElectronColumnServiceRegisterOnVoltageChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnVoltageChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnVoltageChanged",
            electron_column_service_register_on_voltage_changed_request,
            ElectronColumnServiceRegisterOnVoltageChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_beam_shift(
        self,
        electron_column_service_set_beam_shift_request: "ElectronColumnServiceSetBeamShiftRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetBeamShiftResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetBeamShift",
            electron_column_service_set_beam_shift_request,
            ElectronColumnServiceSetBeamShiftResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_focus(
        self,
        electron_column_service_set_focus_request: "ElectronColumnServiceSetFocusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetFocusResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFocus",
            electron_column_service_set_focus_request,
            ElectronColumnServiceSetFocusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_fov(
        self,
        electron_column_service_set_fov_request: "ElectronColumnServiceSetFovRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetFovResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFov",
            electron_column_service_set_fov_request,
            ElectronColumnServiceSetFovResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_fov_rotation(
        self,
        electron_column_service_set_fov_rotation_request: "ElectronColumnServiceSetFovRotationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetFovRotationResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFovRotation",
            electron_column_service_set_fov_rotation_request,
            ElectronColumnServiceSetFovRotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_stigmator(
        self,
        electron_column_service_set_stigmator_request: "ElectronColumnServiceSetStigmatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetStigmatorResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetStigmator",
            electron_column_service_set_stigmator_request,
            ElectronColumnServiceSetStigmatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_voltage(
        self,
        electron_column_service_set_voltage_request: "ElectronColumnServiceSetVoltageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceSetVoltageResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/SetVoltage",
            electron_column_service_set_voltage_request,
            ElectronColumnServiceSetVoltageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def turn_off(
        self,
        electron_column_service_turn_off_request: "ElectronColumnServiceTurnOffRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceTurnOffResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/TurnOff",
            electron_column_service_turn_off_request,
            ElectronColumnServiceTurnOffResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def turn_on(
        self,
        electron_column_service_turn_on_request: "ElectronColumnServiceTurnOnRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ElectronColumnServiceTurnOnResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ElectronColumnService/TurnOn",
            electron_column_service_turn_on_request,
            ElectronColumnServiceTurnOnResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ExternalProcedureServiceStub(betterproto.ServiceStub):
    async def register_external_procedure(
        self,
        external_procedure_service_register_external_procedure_request: "ExternalProcedureServiceRegisterExternalProcedureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[ExternalProcedureServiceRegisterExternalProcedureResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.ExternalProcedureService/RegisterExternalProcedure",
            external_procedure_service_register_external_procedure_request,
            ExternalProcedureServiceRegisterExternalProcedureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def report_command_failure(
        self,
        external_procedure_service_report_command_failure_request: "ExternalProcedureServiceReportCommandFailureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportCommandFailureResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportCommandFailure",
            external_procedure_service_report_command_failure_request,
            ExternalProcedureServiceReportCommandFailureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def report_command_success(
        self,
        external_procedure_service_report_command_success_request: "ExternalProcedureServiceReportCommandSuccessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportCommandSuccessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportCommandSuccess",
            external_procedure_service_report_command_success_request,
            ExternalProcedureServiceReportCommandSuccessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def report_initialization_error(
        self,
        external_procedure_service_report_initialization_error_request: "ExternalProcedureServiceReportInitializationErrorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportInitializationErrorResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportInitializationError",
            external_procedure_service_report_initialization_error_request,
            ExternalProcedureServiceReportInitializationErrorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def report_progress(
        self,
        external_procedure_service_report_progress_request: "ExternalProcedureServiceReportProgressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportProgressResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportProgress",
            external_procedure_service_report_progress_request,
            ExternalProcedureServiceReportProgressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def report_ready(
        self,
        external_procedure_service_report_ready_request: "ExternalProcedureServiceReportReadyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportReadyResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportReady",
            external_procedure_service_report_ready_request,
            ExternalProcedureServiceReportReadyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def report_status(
        self,
        external_procedure_service_report_status_request: "ExternalProcedureServiceReportStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExternalProcedureServiceReportStatusResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportStatus",
            external_procedure_service_report_status_request,
            ExternalProcedureServiceReportStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class IlluminationServiceStub(betterproto.ServiceStub):
    async def get_illumination_ir(
        self,
        illumination_service_get_illumination_ir_request: "IlluminationServiceGetIlluminationIrRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IlluminationServiceGetIlluminationIrResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.IlluminationService/GetIlluminationIR",
            illumination_service_get_illumination_ir_request,
            IlluminationServiceGetIlluminationIrResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_illumination_white(
        self,
        illumination_service_get_illumination_white_request: "IlluminationServiceGetIlluminationWhiteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IlluminationServiceGetIlluminationWhiteResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.IlluminationService/GetIlluminationWhite",
            illumination_service_get_illumination_white_request,
            IlluminationServiceGetIlluminationWhiteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_illumination_ir_changed(
        self,
        illumination_service_register_on_illumination_ir_changed_request: "IlluminationServiceRegisterOnIlluminationIrChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[IlluminationServiceRegisterOnIlluminationIrChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.IlluminationService/RegisterOnIlluminationIRChanged",
            illumination_service_register_on_illumination_ir_changed_request,
            IlluminationServiceRegisterOnIlluminationIrChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_illumination_white_changed(
        self,
        illumination_service_register_on_illumination_white_changed_request: "IlluminationServiceRegisterOnIlluminationWhiteChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[IlluminationServiceRegisterOnIlluminationWhiteChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.IlluminationService/RegisterOnIlluminationWhiteChanged",
            illumination_service_register_on_illumination_white_changed_request,
            IlluminationServiceRegisterOnIlluminationWhiteChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_illumination_ir(
        self,
        illumination_service_set_illumination_ir_request: "IlluminationServiceSetIlluminationIrRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IlluminationServiceSetIlluminationIrResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.IlluminationService/SetIlluminationIR",
            illumination_service_set_illumination_ir_request,
            IlluminationServiceSetIlluminationIrResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_illumination_white(
        self,
        illumination_service_set_illumination_white_request: "IlluminationServiceSetIlluminationWhiteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IlluminationServiceSetIlluminationWhiteResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.IlluminationService/SetIlluminationWhite",
            illumination_service_set_illumination_white_request,
            IlluminationServiceSetIlluminationWhiteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SimpleAcquisitionServiceStub(betterproto.ServiceStub):
    async def acquire_extended_single_frame(
        self,
        simple_acquisition_service_acquire_extended_single_frame_request: "SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/AcquireExtendedSingleFrame",
            simple_acquisition_service_acquire_extended_single_frame_request,
            SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def acquire_single_frame(
        self,
        simple_acquisition_service_acquire_single_frame_request: "SimpleAcquisitionServiceAcquireSingleFrameRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceAcquireSingleFrameResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/AcquireSingleFrame",
            simple_acquisition_service_acquire_single_frame_request,
            SimpleAcquisitionServiceAcquireSingleFrameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_acquisition_status(
        self,
        simple_acquisition_service_get_acquisition_status_request: "SimpleAcquisitionServiceGetAcquisitionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceGetAcquisitionStatusResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetAcquisitionStatus",
            simple_acquisition_service_get_acquisition_status_request,
            SimpleAcquisitionServiceGetAcquisitionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_brightness(
        self,
        simple_acquisition_service_get_brightness_request: "SimpleAcquisitionServiceGetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceGetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetBrightness",
            simple_acquisition_service_get_brightness_request,
            SimpleAcquisitionServiceGetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_contrast(
        self,
        simple_acquisition_service_get_contrast_request: "SimpleAcquisitionServiceGetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceGetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetContrast",
            simple_acquisition_service_get_contrast_request,
            SimpleAcquisitionServiceGetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_acquisition_status_changed(
        self,
        simple_acquisition_service_register_on_acquisition_status_changed_request: "SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[
        SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse
    ]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/RegisterOnAcquisitionStatusChanged",
            simple_acquisition_service_register_on_acquisition_status_changed_request,
            SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_brightness(
        self,
        simple_acquisition_service_set_brightness_request: "SimpleAcquisitionServiceSetBrightnessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceSetBrightnessResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/SetBrightness",
            simple_acquisition_service_set_brightness_request,
            SimpleAcquisitionServiceSetBrightnessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_contrast(
        self,
        simple_acquisition_service_set_contrast_request: "SimpleAcquisitionServiceSetContrastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceSetContrastResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/SetContrast",
            simple_acquisition_service_set_contrast_request,
            SimpleAcquisitionServiceSetContrastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_extended_live_acquisition(
        self,
        simple_acquisition_service_start_extended_live_acquisition_request: "SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StartExtendedLiveAcquisition",
            simple_acquisition_service_start_extended_live_acquisition_request,
            SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_live_acquisition(
        self,
        simple_acquisition_service_start_live_acquisition_request: "SimpleAcquisitionServiceStartLiveAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceStartLiveAcquisitionResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StartLiveAcquisition",
            simple_acquisition_service_start_live_acquisition_request,
            SimpleAcquisitionServiceStartLiveAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_live_acquisition(
        self,
        simple_acquisition_service_stop_live_acquisition_request: "SimpleAcquisitionServiceStopLiveAcquisitionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SimpleAcquisitionServiceStopLiveAcquisitionResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StopLiveAcquisition",
            simple_acquisition_service_stop_live_acquisition_request,
            SimpleAcquisitionServiceStopLiveAcquisitionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VacuumServiceStub(betterproto.ServiceStub):
    async def close_valve(
        self,
        vacuum_service_close_valve_request: "VacuumServiceCloseValveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceCloseValveResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/CloseValve",
            vacuum_service_close_valve_request,
            VacuumServiceCloseValveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_vacuum_modes(
        self,
        vacuum_service_get_available_vacuum_modes_request: "VacuumServiceGetAvailableVacuumModesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetAvailableVacuumModesResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetAvailableVacuumModes",
            vacuum_service_get_available_vacuum_modes_request,
            VacuumServiceGetAvailableVacuumModesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_valves(
        self,
        vacuum_service_get_available_valves_request: "VacuumServiceGetAvailableValvesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetAvailableValvesResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetAvailableValves",
            vacuum_service_get_available_valves_request,
            VacuumServiceGetAvailableValvesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_chamber_pressure(
        self,
        vacuum_service_get_chamber_pressure_request: "VacuumServiceGetChamberPressureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetChamberPressureResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetChamberPressure",
            vacuum_service_get_chamber_pressure_request,
            VacuumServiceGetChamberPressureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_target_chamber_pressure(
        self,
        vacuum_service_get_target_chamber_pressure_request: "VacuumServiceGetTargetChamberPressureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetTargetChamberPressureResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetTargetChamberPressure",
            vacuum_service_get_target_chamber_pressure_request,
            VacuumServiceGetTargetChamberPressureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_vacuum_mode(
        self,
        vacuum_service_get_vacuum_mode_request: "VacuumServiceGetVacuumModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetVacuumModeResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetVacuumMode",
            vacuum_service_get_vacuum_mode_request,
            VacuumServiceGetVacuumModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_vacuum_state(
        self,
        vacuum_service_get_vacuum_state_request: "VacuumServiceGetVacuumStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetVacuumStateResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetVacuumState",
            vacuum_service_get_vacuum_state_request,
            VacuumServiceGetVacuumStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_valve_state(
        self,
        vacuum_service_get_valve_state_request: "VacuumServiceGetValveStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceGetValveStateResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/GetValveState",
            vacuum_service_get_valve_state_request,
            VacuumServiceGetValveStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_valve(
        self,
        vacuum_service_open_valve_request: "VacuumServiceOpenValveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceOpenValveResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/OpenValve",
            vacuum_service_open_valve_request,
            VacuumServiceOpenValveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pump(
        self,
        vacuum_service_pump_request: "VacuumServicePumpRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServicePumpResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/Pump",
            vacuum_service_pump_request,
            VacuumServicePumpResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_chamber_pressure_changed(
        self,
        vacuum_service_register_on_chamber_pressure_changed_request: "VacuumServiceRegisterOnChamberPressureChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[VacuumServiceRegisterOnChamberPressureChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnChamberPressureChanged",
            vacuum_service_register_on_chamber_pressure_changed_request,
            VacuumServiceRegisterOnChamberPressureChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_target_chamber_pressure_changed(
        self,
        vacuum_service_register_on_target_chamber_pressure_changed_request: "VacuumServiceRegisterOnTargetChamberPressureChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[VacuumServiceRegisterOnTargetChamberPressureChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnTargetChamberPressureChanged",
            vacuum_service_register_on_target_chamber_pressure_changed_request,
            VacuumServiceRegisterOnTargetChamberPressureChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_vacuum_mode_changed(
        self,
        vacuum_service_register_on_vacuum_mode_changed_request: "VacuumServiceRegisterOnVacuumModeChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[VacuumServiceRegisterOnVacuumModeChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnVacuumModeChanged",
            vacuum_service_register_on_vacuum_mode_changed_request,
            VacuumServiceRegisterOnVacuumModeChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_vacuum_state_changed(
        self,
        vacuum_service_register_on_vacuum_state_changed_request: "VacuumServiceRegisterOnVacuumStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[VacuumServiceRegisterOnVacuumStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnVacuumStateChanged",
            vacuum_service_register_on_vacuum_state_changed_request,
            VacuumServiceRegisterOnVacuumStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_valve_state_changed(
        self,
        vacuum_service_register_on_valve_state_changed_request: "VacuumServiceRegisterOnValveStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[VacuumServiceRegisterOnValveStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnValveStateChanged",
            vacuum_service_register_on_valve_state_changed_request,
            VacuumServiceRegisterOnValveStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set_target_chamber_pressure(
        self,
        vacuum_service_set_target_chamber_pressure_request: "VacuumServiceSetTargetChamberPressureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceSetTargetChamberPressureResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/SetTargetChamberPressure",
            vacuum_service_set_target_chamber_pressure_request,
            VacuumServiceSetTargetChamberPressureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_vacuum_mode(
        self,
        vacuum_service_set_vacuum_mode_request: "VacuumServiceSetVacuumModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceSetVacuumModeResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/SetVacuumMode",
            vacuum_service_set_vacuum_mode_request,
            VacuumServiceSetVacuumModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vent(
        self,
        vacuum_service_vent_request: "VacuumServiceVentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VacuumServiceVentResponse":
        return await self._unary_unary(
            "/zen_api.em.hardware.v1.VacuumService/Vent",
            vacuum_service_vent_request,
            VacuumServiceVentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CameraServiceBase(ServiceBase):

    async def get_acquisition_status(
        self,
        camera_service_get_acquisition_status_request: "CameraServiceGetAcquisitionStatusRequest",
    ) -> "CameraServiceGetAcquisitionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_cameras(
        self,
        camera_service_get_available_cameras_request: "CameraServiceGetAvailableCamerasRequest",
    ) -> "CameraServiceGetAvailableCamerasResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_brightness(
        self, camera_service_get_brightness_request: "CameraServiceGetBrightnessRequest"
    ) -> "CameraServiceGetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_ccd_mode(
        self, camera_service_get_ccd_mode_request: "CameraServiceGetCcdModeRequest"
    ) -> "CameraServiceGetCcdModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_contrast(
        self, camera_service_get_contrast_request: "CameraServiceGetContrastRequest"
    ) -> "CameraServiceGetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_acquisition_status_changed(
        self,
        camera_service_register_on_acquisition_status_changed_request: "CameraServiceRegisterOnAcquisitionStatusChangedRequest",
    ) -> AsyncIterator[CameraServiceRegisterOnAcquisitionStatusChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceRegisterOnAcquisitionStatusChangedResponse()

    async def register_on_brightness_changed(
        self,
        camera_service_register_on_brightness_changed_request: "CameraServiceRegisterOnBrightnessChangedRequest",
    ) -> AsyncIterator[CameraServiceRegisterOnBrightnessChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceRegisterOnBrightnessChangedResponse()

    async def register_on_ccd_mode_changed(
        self,
        camera_service_register_on_ccd_mode_changed_request: "CameraServiceRegisterOnCcdModeChangedRequest",
    ) -> AsyncIterator[CameraServiceRegisterOnCcdModeChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceRegisterOnCcdModeChangedResponse()

    async def register_on_contrast_changed(
        self,
        camera_service_register_on_contrast_changed_request: "CameraServiceRegisterOnContrastChangedRequest",
    ) -> AsyncIterator[CameraServiceRegisterOnContrastChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceRegisterOnContrastChangedResponse()

    async def set_brightness(
        self, camera_service_set_brightness_request: "CameraServiceSetBrightnessRequest"
    ) -> "CameraServiceSetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_ccd_mode(
        self, camera_service_set_ccd_mode_request: "CameraServiceSetCcdModeRequest"
    ) -> "CameraServiceSetCcdModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_contrast(
        self, camera_service_set_contrast_request: "CameraServiceSetContrastRequest"
    ) -> "CameraServiceSetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_live_acquisition(
        self,
        camera_service_start_live_acquisition_request: "CameraServiceStartLiveAcquisitionRequest",
    ) -> AsyncIterator[CameraServiceStartLiveAcquisitionResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceStartLiveAcquisitionResponse()

    async def start_single_acquisition(
        self,
        camera_service_start_single_acquisition_request: "CameraServiceStartSingleAcquisitionRequest",
    ) -> AsyncIterator[CameraServiceStartSingleAcquisitionResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CameraServiceStartSingleAcquisitionResponse()

    async def stop_live_acquisition(
        self,
        camera_service_stop_live_acquisition_request: "CameraServiceStopLiveAcquisitionRequest",
    ) -> "CameraServiceStopLiveAcquisitionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_acquisition_status(
        self,
        stream: "grpclib.server.Stream[CameraServiceGetAcquisitionStatusRequest, CameraServiceGetAcquisitionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_acquisition_status(request)
        await stream.send_message(response)

    async def __rpc_get_available_cameras(
        self,
        stream: "grpclib.server.Stream[CameraServiceGetAvailableCamerasRequest, CameraServiceGetAvailableCamerasResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_cameras(request)
        await stream.send_message(response)

    async def __rpc_get_brightness(
        self,
        stream: "grpclib.server.Stream[CameraServiceGetBrightnessRequest, CameraServiceGetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_brightness(request)
        await stream.send_message(response)

    async def __rpc_get_ccd_mode(
        self,
        stream: "grpclib.server.Stream[CameraServiceGetCcdModeRequest, CameraServiceGetCcdModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ccd_mode(request)
        await stream.send_message(response)

    async def __rpc_get_contrast(
        self,
        stream: "grpclib.server.Stream[CameraServiceGetContrastRequest, CameraServiceGetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_contrast(request)
        await stream.send_message(response)

    async def __rpc_register_on_acquisition_status_changed(
        self,
        stream: "grpclib.server.Stream[CameraServiceRegisterOnAcquisitionStatusChangedRequest, CameraServiceRegisterOnAcquisitionStatusChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_acquisition_status_changed,
            stream,
            request,
        )

    async def __rpc_register_on_brightness_changed(
        self,
        stream: "grpclib.server.Stream[CameraServiceRegisterOnBrightnessChangedRequest, CameraServiceRegisterOnBrightnessChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_brightness_changed,
            stream,
            request,
        )

    async def __rpc_register_on_ccd_mode_changed(
        self,
        stream: "grpclib.server.Stream[CameraServiceRegisterOnCcdModeChangedRequest, CameraServiceRegisterOnCcdModeChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_ccd_mode_changed,
            stream,
            request,
        )

    async def __rpc_register_on_contrast_changed(
        self,
        stream: "grpclib.server.Stream[CameraServiceRegisterOnContrastChangedRequest, CameraServiceRegisterOnContrastChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_contrast_changed,
            stream,
            request,
        )

    async def __rpc_set_brightness(
        self,
        stream: "grpclib.server.Stream[CameraServiceSetBrightnessRequest, CameraServiceSetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_brightness(request)
        await stream.send_message(response)

    async def __rpc_set_ccd_mode(
        self,
        stream: "grpclib.server.Stream[CameraServiceSetCcdModeRequest, CameraServiceSetCcdModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_ccd_mode(request)
        await stream.send_message(response)

    async def __rpc_set_contrast(
        self,
        stream: "grpclib.server.Stream[CameraServiceSetContrastRequest, CameraServiceSetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_contrast(request)
        await stream.send_message(response)

    async def __rpc_start_live_acquisition(
        self,
        stream: "grpclib.server.Stream[CameraServiceStartLiveAcquisitionRequest, CameraServiceStartLiveAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.start_live_acquisition,
            stream,
            request,
        )

    async def __rpc_start_single_acquisition(
        self,
        stream: "grpclib.server.Stream[CameraServiceStartSingleAcquisitionRequest, CameraServiceStartSingleAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.start_single_acquisition,
            stream,
            request,
        )

    async def __rpc_stop_live_acquisition(
        self,
        stream: "grpclib.server.Stream[CameraServiceStopLiveAcquisitionRequest, CameraServiceStopLiveAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_live_acquisition(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.CameraService/GetAcquisitionStatus": grpclib.const.Handler(
                self.__rpc_get_acquisition_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceGetAcquisitionStatusRequest,
                CameraServiceGetAcquisitionStatusResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/GetAvailableCameras": grpclib.const.Handler(
                self.__rpc_get_available_cameras,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceGetAvailableCamerasRequest,
                CameraServiceGetAvailableCamerasResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/GetBrightness": grpclib.const.Handler(
                self.__rpc_get_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceGetBrightnessRequest,
                CameraServiceGetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/GetCcdMode": grpclib.const.Handler(
                self.__rpc_get_ccd_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceGetCcdModeRequest,
                CameraServiceGetCcdModeResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/GetContrast": grpclib.const.Handler(
                self.__rpc_get_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceGetContrastRequest,
                CameraServiceGetContrastResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/RegisterOnAcquisitionStatusChanged": grpclib.const.Handler(
                self.__rpc_register_on_acquisition_status_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceRegisterOnAcquisitionStatusChangedRequest,
                CameraServiceRegisterOnAcquisitionStatusChangedResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/RegisterOnBrightnessChanged": grpclib.const.Handler(
                self.__rpc_register_on_brightness_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceRegisterOnBrightnessChangedRequest,
                CameraServiceRegisterOnBrightnessChangedResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/RegisterOnCcdModeChanged": grpclib.const.Handler(
                self.__rpc_register_on_ccd_mode_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceRegisterOnCcdModeChangedRequest,
                CameraServiceRegisterOnCcdModeChangedResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/RegisterOnContrastChanged": grpclib.const.Handler(
                self.__rpc_register_on_contrast_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceRegisterOnContrastChangedRequest,
                CameraServiceRegisterOnContrastChangedResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/SetBrightness": grpclib.const.Handler(
                self.__rpc_set_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceSetBrightnessRequest,
                CameraServiceSetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/SetCcdMode": grpclib.const.Handler(
                self.__rpc_set_ccd_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceSetCcdModeRequest,
                CameraServiceSetCcdModeResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/SetContrast": grpclib.const.Handler(
                self.__rpc_set_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceSetContrastRequest,
                CameraServiceSetContrastResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/StartLiveAcquisition": grpclib.const.Handler(
                self.__rpc_start_live_acquisition,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceStartLiveAcquisitionRequest,
                CameraServiceStartLiveAcquisitionResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/StartSingleAcquisition": grpclib.const.Handler(
                self.__rpc_start_single_acquisition,
                grpclib.const.Cardinality.UNARY_STREAM,
                CameraServiceStartSingleAcquisitionRequest,
                CameraServiceStartSingleAcquisitionResponse,
            ),
            "/zen_api.em.hardware.v1.CameraService/StopLiveAcquisition": grpclib.const.Handler(
                self.__rpc_stop_live_acquisition,
                grpclib.const.Cardinality.UNARY_UNARY,
                CameraServiceStopLiveAcquisitionRequest,
                CameraServiceStopLiveAcquisitionResponse,
            ),
        }


class DetectorServiceBase(ServiceBase):

    async def get_available_detectors(
        self,
        detector_service_get_available_detectors_request: "DetectorServiceGetAvailableDetectorsRequest",
    ) -> "DetectorServiceGetAvailableDetectorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_brightness(
        self,
        detector_service_get_brightness_request: "DetectorServiceGetBrightnessRequest",
    ) -> "DetectorServiceGetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_contrast(
        self, detector_service_get_contrast_request: "DetectorServiceGetContrastRequest"
    ) -> "DetectorServiceGetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_brightness_changed(
        self,
        detector_service_register_on_brightness_changed_request: "DetectorServiceRegisterOnBrightnessChangedRequest",
    ) -> AsyncIterator[DetectorServiceRegisterOnBrightnessChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DetectorServiceRegisterOnBrightnessChangedResponse()

    async def register_on_contrast_changed(
        self,
        detector_service_register_on_contrast_changed_request: "DetectorServiceRegisterOnContrastChangedRequest",
    ) -> AsyncIterator[DetectorServiceRegisterOnContrastChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DetectorServiceRegisterOnContrastChangedResponse()

    async def set_brightness(
        self,
        detector_service_set_brightness_request: "DetectorServiceSetBrightnessRequest",
    ) -> "DetectorServiceSetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_contrast(
        self, detector_service_set_contrast_request: "DetectorServiceSetContrastRequest"
    ) -> "DetectorServiceSetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_available_detectors(
        self,
        stream: "grpclib.server.Stream[DetectorServiceGetAvailableDetectorsRequest, DetectorServiceGetAvailableDetectorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_detectors(request)
        await stream.send_message(response)

    async def __rpc_get_brightness(
        self,
        stream: "grpclib.server.Stream[DetectorServiceGetBrightnessRequest, DetectorServiceGetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_brightness(request)
        await stream.send_message(response)

    async def __rpc_get_contrast(
        self,
        stream: "grpclib.server.Stream[DetectorServiceGetContrastRequest, DetectorServiceGetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_contrast(request)
        await stream.send_message(response)

    async def __rpc_register_on_brightness_changed(
        self,
        stream: "grpclib.server.Stream[DetectorServiceRegisterOnBrightnessChangedRequest, DetectorServiceRegisterOnBrightnessChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_brightness_changed,
            stream,
            request,
        )

    async def __rpc_register_on_contrast_changed(
        self,
        stream: "grpclib.server.Stream[DetectorServiceRegisterOnContrastChangedRequest, DetectorServiceRegisterOnContrastChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_contrast_changed,
            stream,
            request,
        )

    async def __rpc_set_brightness(
        self,
        stream: "grpclib.server.Stream[DetectorServiceSetBrightnessRequest, DetectorServiceSetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_brightness(request)
        await stream.send_message(response)

    async def __rpc_set_contrast(
        self,
        stream: "grpclib.server.Stream[DetectorServiceSetContrastRequest, DetectorServiceSetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_contrast(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.DetectorService/GetAvailableDetectors": grpclib.const.Handler(
                self.__rpc_get_available_detectors,
                grpclib.const.Cardinality.UNARY_UNARY,
                DetectorServiceGetAvailableDetectorsRequest,
                DetectorServiceGetAvailableDetectorsResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/GetBrightness": grpclib.const.Handler(
                self.__rpc_get_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                DetectorServiceGetBrightnessRequest,
                DetectorServiceGetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/GetContrast": grpclib.const.Handler(
                self.__rpc_get_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                DetectorServiceGetContrastRequest,
                DetectorServiceGetContrastResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/RegisterOnBrightnessChanged": grpclib.const.Handler(
                self.__rpc_register_on_brightness_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                DetectorServiceRegisterOnBrightnessChangedRequest,
                DetectorServiceRegisterOnBrightnessChangedResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/RegisterOnContrastChanged": grpclib.const.Handler(
                self.__rpc_register_on_contrast_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                DetectorServiceRegisterOnContrastChangedRequest,
                DetectorServiceRegisterOnContrastChangedResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/SetBrightness": grpclib.const.Handler(
                self.__rpc_set_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                DetectorServiceSetBrightnessRequest,
                DetectorServiceSetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.DetectorService/SetContrast": grpclib.const.Handler(
                self.__rpc_set_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                DetectorServiceSetContrastRequest,
                DetectorServiceSetContrastResponse,
            ),
        }


class ElectronColumnServiceBase(ServiceBase):

    async def get_actual_voltage(
        self,
        electron_column_service_get_actual_voltage_request: "ElectronColumnServiceGetActualVoltageRequest",
    ) -> "ElectronColumnServiceGetActualVoltageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_beam_shift(
        self,
        electron_column_service_get_beam_shift_request: "ElectronColumnServiceGetBeamShiftRequest",
    ) -> "ElectronColumnServiceGetBeamShiftResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_beam_state(
        self,
        electron_column_service_get_beam_state_request: "ElectronColumnServiceGetBeamStateRequest",
    ) -> "ElectronColumnServiceGetBeamStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_focus(
        self,
        electron_column_service_get_focus_request: "ElectronColumnServiceGetFocusRequest",
    ) -> "ElectronColumnServiceGetFocusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_focus_limits(
        self,
        electron_column_service_get_focus_limits_request: "ElectronColumnServiceGetFocusLimitsRequest",
    ) -> "ElectronColumnServiceGetFocusLimitsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_fov(
        self,
        electron_column_service_get_fov_request: "ElectronColumnServiceGetFovRequest",
    ) -> "ElectronColumnServiceGetFovResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_fov_rotation(
        self,
        electron_column_service_get_fov_rotation_request: "ElectronColumnServiceGetFovRotationRequest",
    ) -> "ElectronColumnServiceGetFovRotationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_probe_current(
        self,
        electron_column_service_get_probe_current_request: "ElectronColumnServiceGetProbeCurrentRequest",
    ) -> "ElectronColumnServiceGetProbeCurrentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_semi_angle(
        self,
        electron_column_service_get_semi_angle_request: "ElectronColumnServiceGetSemiAngleRequest",
    ) -> "ElectronColumnServiceGetSemiAngleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_spot_size(
        self,
        electron_column_service_get_spot_size_request: "ElectronColumnServiceGetSpotSizeRequest",
    ) -> "ElectronColumnServiceGetSpotSizeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stigmator(
        self,
        electron_column_service_get_stigmator_request: "ElectronColumnServiceGetStigmatorRequest",
    ) -> "ElectronColumnServiceGetStigmatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_target_voltage(
        self,
        electron_column_service_get_target_voltage_request: "ElectronColumnServiceGetTargetVoltageRequest",
    ) -> "ElectronColumnServiceGetTargetVoltageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def go_to_standby(
        self,
        electron_column_service_go_to_standby_request: "ElectronColumnServiceGoToStandbyRequest",
    ) -> "ElectronColumnServiceGoToStandbyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_beam_shift_changed(
        self,
        electron_column_service_register_on_beam_shift_changed_request: "ElectronColumnServiceRegisterOnBeamShiftChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnBeamShiftChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnBeamShiftChangedResponse()

    async def register_on_beam_state_changed(
        self,
        electron_column_service_register_on_beam_state_changed_request: "ElectronColumnServiceRegisterOnBeamStateChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnBeamStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnBeamStateChangedResponse()

    async def register_on_focus_changed(
        self,
        electron_column_service_register_on_focus_changed_request: "ElectronColumnServiceRegisterOnFocusChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFocusChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnFocusChangedResponse()

    async def register_on_fov_changed(
        self,
        electron_column_service_register_on_fov_changed_request: "ElectronColumnServiceRegisterOnFovChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFovChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnFovChangedResponse()

    async def register_on_fov_rotation_changed(
        self,
        electron_column_service_register_on_fov_rotation_changed_request: "ElectronColumnServiceRegisterOnFovRotationChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnFovRotationChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnFovRotationChangedResponse()

    async def register_on_probe_current_changed(
        self,
        electron_column_service_register_on_probe_current_changed_request: "ElectronColumnServiceRegisterOnProbeCurrentChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnProbeCurrentChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnProbeCurrentChangedResponse()

    async def register_on_semi_angle_changed(
        self,
        electron_column_service_register_on_semi_angle_changed_request: "ElectronColumnServiceRegisterOnSemiAngleChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnSemiAngleChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnSemiAngleChangedResponse()

    async def register_on_spot_size_changed(
        self,
        electron_column_service_register_on_spot_size_changed_request: "ElectronColumnServiceRegisterOnSpotSizeChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnSpotSizeChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnSpotSizeChangedResponse()

    async def register_on_stigmator_changed(
        self,
        electron_column_service_register_on_stigmator_changed_request: "ElectronColumnServiceRegisterOnStigmatorChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnStigmatorChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnStigmatorChangedResponse()

    async def register_on_voltage_changed(
        self,
        electron_column_service_register_on_voltage_changed_request: "ElectronColumnServiceRegisterOnVoltageChangedRequest",
    ) -> AsyncIterator[ElectronColumnServiceRegisterOnVoltageChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ElectronColumnServiceRegisterOnVoltageChangedResponse()

    async def set_beam_shift(
        self,
        electron_column_service_set_beam_shift_request: "ElectronColumnServiceSetBeamShiftRequest",
    ) -> "ElectronColumnServiceSetBeamShiftResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_focus(
        self,
        electron_column_service_set_focus_request: "ElectronColumnServiceSetFocusRequest",
    ) -> "ElectronColumnServiceSetFocusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_fov(
        self,
        electron_column_service_set_fov_request: "ElectronColumnServiceSetFovRequest",
    ) -> "ElectronColumnServiceSetFovResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_fov_rotation(
        self,
        electron_column_service_set_fov_rotation_request: "ElectronColumnServiceSetFovRotationRequest",
    ) -> "ElectronColumnServiceSetFovRotationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_stigmator(
        self,
        electron_column_service_set_stigmator_request: "ElectronColumnServiceSetStigmatorRequest",
    ) -> "ElectronColumnServiceSetStigmatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_voltage(
        self,
        electron_column_service_set_voltage_request: "ElectronColumnServiceSetVoltageRequest",
    ) -> "ElectronColumnServiceSetVoltageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def turn_off(
        self,
        electron_column_service_turn_off_request: "ElectronColumnServiceTurnOffRequest",
    ) -> "ElectronColumnServiceTurnOffResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def turn_on(
        self,
        electron_column_service_turn_on_request: "ElectronColumnServiceTurnOnRequest",
    ) -> "ElectronColumnServiceTurnOnResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_actual_voltage(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetActualVoltageRequest, ElectronColumnServiceGetActualVoltageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_actual_voltage(request)
        await stream.send_message(response)

    async def __rpc_get_beam_shift(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetBeamShiftRequest, ElectronColumnServiceGetBeamShiftResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_beam_shift(request)
        await stream.send_message(response)

    async def __rpc_get_beam_state(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetBeamStateRequest, ElectronColumnServiceGetBeamStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_beam_state(request)
        await stream.send_message(response)

    async def __rpc_get_focus(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetFocusRequest, ElectronColumnServiceGetFocusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_focus(request)
        await stream.send_message(response)

    async def __rpc_get_focus_limits(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetFocusLimitsRequest, ElectronColumnServiceGetFocusLimitsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_focus_limits(request)
        await stream.send_message(response)

    async def __rpc_get_fov(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetFovRequest, ElectronColumnServiceGetFovResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_fov(request)
        await stream.send_message(response)

    async def __rpc_get_fov_rotation(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetFovRotationRequest, ElectronColumnServiceGetFovRotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_fov_rotation(request)
        await stream.send_message(response)

    async def __rpc_get_probe_current(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetProbeCurrentRequest, ElectronColumnServiceGetProbeCurrentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_probe_current(request)
        await stream.send_message(response)

    async def __rpc_get_semi_angle(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetSemiAngleRequest, ElectronColumnServiceGetSemiAngleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_semi_angle(request)
        await stream.send_message(response)

    async def __rpc_get_spot_size(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetSpotSizeRequest, ElectronColumnServiceGetSpotSizeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_spot_size(request)
        await stream.send_message(response)

    async def __rpc_get_stigmator(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetStigmatorRequest, ElectronColumnServiceGetStigmatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stigmator(request)
        await stream.send_message(response)

    async def __rpc_get_target_voltage(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGetTargetVoltageRequest, ElectronColumnServiceGetTargetVoltageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_target_voltage(request)
        await stream.send_message(response)

    async def __rpc_go_to_standby(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceGoToStandbyRequest, ElectronColumnServiceGoToStandbyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.go_to_standby(request)
        await stream.send_message(response)

    async def __rpc_register_on_beam_shift_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnBeamShiftChangedRequest, ElectronColumnServiceRegisterOnBeamShiftChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_beam_shift_changed,
            stream,
            request,
        )

    async def __rpc_register_on_beam_state_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnBeamStateChangedRequest, ElectronColumnServiceRegisterOnBeamStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_beam_state_changed,
            stream,
            request,
        )

    async def __rpc_register_on_focus_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnFocusChangedRequest, ElectronColumnServiceRegisterOnFocusChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_focus_changed,
            stream,
            request,
        )

    async def __rpc_register_on_fov_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnFovChangedRequest, ElectronColumnServiceRegisterOnFovChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_fov_changed,
            stream,
            request,
        )

    async def __rpc_register_on_fov_rotation_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnFovRotationChangedRequest, ElectronColumnServiceRegisterOnFovRotationChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_fov_rotation_changed,
            stream,
            request,
        )

    async def __rpc_register_on_probe_current_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnProbeCurrentChangedRequest, ElectronColumnServiceRegisterOnProbeCurrentChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_probe_current_changed,
            stream,
            request,
        )

    async def __rpc_register_on_semi_angle_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnSemiAngleChangedRequest, ElectronColumnServiceRegisterOnSemiAngleChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_semi_angle_changed,
            stream,
            request,
        )

    async def __rpc_register_on_spot_size_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnSpotSizeChangedRequest, ElectronColumnServiceRegisterOnSpotSizeChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_spot_size_changed,
            stream,
            request,
        )

    async def __rpc_register_on_stigmator_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnStigmatorChangedRequest, ElectronColumnServiceRegisterOnStigmatorChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_stigmator_changed,
            stream,
            request,
        )

    async def __rpc_register_on_voltage_changed(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceRegisterOnVoltageChangedRequest, ElectronColumnServiceRegisterOnVoltageChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_voltage_changed,
            stream,
            request,
        )

    async def __rpc_set_beam_shift(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetBeamShiftRequest, ElectronColumnServiceSetBeamShiftResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_beam_shift(request)
        await stream.send_message(response)

    async def __rpc_set_focus(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetFocusRequest, ElectronColumnServiceSetFocusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_focus(request)
        await stream.send_message(response)

    async def __rpc_set_fov(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetFovRequest, ElectronColumnServiceSetFovResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_fov(request)
        await stream.send_message(response)

    async def __rpc_set_fov_rotation(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetFovRotationRequest, ElectronColumnServiceSetFovRotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_fov_rotation(request)
        await stream.send_message(response)

    async def __rpc_set_stigmator(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetStigmatorRequest, ElectronColumnServiceSetStigmatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_stigmator(request)
        await stream.send_message(response)

    async def __rpc_set_voltage(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceSetVoltageRequest, ElectronColumnServiceSetVoltageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_voltage(request)
        await stream.send_message(response)

    async def __rpc_turn_off(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceTurnOffRequest, ElectronColumnServiceTurnOffResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.turn_off(request)
        await stream.send_message(response)

    async def __rpc_turn_on(
        self,
        stream: "grpclib.server.Stream[ElectronColumnServiceTurnOnRequest, ElectronColumnServiceTurnOnResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.turn_on(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.ElectronColumnService/GetActualVoltage": grpclib.const.Handler(
                self.__rpc_get_actual_voltage,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetActualVoltageRequest,
                ElectronColumnServiceGetActualVoltageResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetBeamShift": grpclib.const.Handler(
                self.__rpc_get_beam_shift,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetBeamShiftRequest,
                ElectronColumnServiceGetBeamShiftResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetBeamState": grpclib.const.Handler(
                self.__rpc_get_beam_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetBeamStateRequest,
                ElectronColumnServiceGetBeamStateResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFocus": grpclib.const.Handler(
                self.__rpc_get_focus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetFocusRequest,
                ElectronColumnServiceGetFocusResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFocusLimits": grpclib.const.Handler(
                self.__rpc_get_focus_limits,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetFocusLimitsRequest,
                ElectronColumnServiceGetFocusLimitsResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFov": grpclib.const.Handler(
                self.__rpc_get_fov,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetFovRequest,
                ElectronColumnServiceGetFovResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetFovRotation": grpclib.const.Handler(
                self.__rpc_get_fov_rotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetFovRotationRequest,
                ElectronColumnServiceGetFovRotationResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetProbeCurrent": grpclib.const.Handler(
                self.__rpc_get_probe_current,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetProbeCurrentRequest,
                ElectronColumnServiceGetProbeCurrentResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetSemiAngle": grpclib.const.Handler(
                self.__rpc_get_semi_angle,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetSemiAngleRequest,
                ElectronColumnServiceGetSemiAngleResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetSpotSize": grpclib.const.Handler(
                self.__rpc_get_spot_size,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetSpotSizeRequest,
                ElectronColumnServiceGetSpotSizeResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetStigmator": grpclib.const.Handler(
                self.__rpc_get_stigmator,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetStigmatorRequest,
                ElectronColumnServiceGetStigmatorResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GetTargetVoltage": grpclib.const.Handler(
                self.__rpc_get_target_voltage,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGetTargetVoltageRequest,
                ElectronColumnServiceGetTargetVoltageResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/GoToStandby": grpclib.const.Handler(
                self.__rpc_go_to_standby,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceGoToStandbyRequest,
                ElectronColumnServiceGoToStandbyResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnBeamShiftChanged": grpclib.const.Handler(
                self.__rpc_register_on_beam_shift_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnBeamShiftChangedRequest,
                ElectronColumnServiceRegisterOnBeamShiftChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnBeamStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_beam_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnBeamStateChangedRequest,
                ElectronColumnServiceRegisterOnBeamStateChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFocusChanged": grpclib.const.Handler(
                self.__rpc_register_on_focus_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnFocusChangedRequest,
                ElectronColumnServiceRegisterOnFocusChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFovChanged": grpclib.const.Handler(
                self.__rpc_register_on_fov_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnFovChangedRequest,
                ElectronColumnServiceRegisterOnFovChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnFovRotationChanged": grpclib.const.Handler(
                self.__rpc_register_on_fov_rotation_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnFovRotationChangedRequest,
                ElectronColumnServiceRegisterOnFovRotationChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnProbeCurrentChanged": grpclib.const.Handler(
                self.__rpc_register_on_probe_current_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnProbeCurrentChangedRequest,
                ElectronColumnServiceRegisterOnProbeCurrentChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnSemiAngleChanged": grpclib.const.Handler(
                self.__rpc_register_on_semi_angle_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnSemiAngleChangedRequest,
                ElectronColumnServiceRegisterOnSemiAngleChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnSpotSizeChanged": grpclib.const.Handler(
                self.__rpc_register_on_spot_size_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnSpotSizeChangedRequest,
                ElectronColumnServiceRegisterOnSpotSizeChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnStigmatorChanged": grpclib.const.Handler(
                self.__rpc_register_on_stigmator_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnStigmatorChangedRequest,
                ElectronColumnServiceRegisterOnStigmatorChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/RegisterOnVoltageChanged": grpclib.const.Handler(
                self.__rpc_register_on_voltage_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                ElectronColumnServiceRegisterOnVoltageChangedRequest,
                ElectronColumnServiceRegisterOnVoltageChangedResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetBeamShift": grpclib.const.Handler(
                self.__rpc_set_beam_shift,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetBeamShiftRequest,
                ElectronColumnServiceSetBeamShiftResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFocus": grpclib.const.Handler(
                self.__rpc_set_focus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetFocusRequest,
                ElectronColumnServiceSetFocusResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFov": grpclib.const.Handler(
                self.__rpc_set_fov,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetFovRequest,
                ElectronColumnServiceSetFovResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetFovRotation": grpclib.const.Handler(
                self.__rpc_set_fov_rotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetFovRotationRequest,
                ElectronColumnServiceSetFovRotationResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetStigmator": grpclib.const.Handler(
                self.__rpc_set_stigmator,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetStigmatorRequest,
                ElectronColumnServiceSetStigmatorResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/SetVoltage": grpclib.const.Handler(
                self.__rpc_set_voltage,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceSetVoltageRequest,
                ElectronColumnServiceSetVoltageResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/TurnOff": grpclib.const.Handler(
                self.__rpc_turn_off,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceTurnOffRequest,
                ElectronColumnServiceTurnOffResponse,
            ),
            "/zen_api.em.hardware.v1.ElectronColumnService/TurnOn": grpclib.const.Handler(
                self.__rpc_turn_on,
                grpclib.const.Cardinality.UNARY_UNARY,
                ElectronColumnServiceTurnOnRequest,
                ElectronColumnServiceTurnOnResponse,
            ),
        }


class ExternalProcedureServiceBase(ServiceBase):

    async def register_external_procedure(
        self,
        external_procedure_service_register_external_procedure_request: "ExternalProcedureServiceRegisterExternalProcedureRequest",
    ) -> AsyncIterator[ExternalProcedureServiceRegisterExternalProcedureResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ExternalProcedureServiceRegisterExternalProcedureResponse()

    async def report_command_failure(
        self,
        external_procedure_service_report_command_failure_request: "ExternalProcedureServiceReportCommandFailureRequest",
    ) -> "ExternalProcedureServiceReportCommandFailureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def report_command_success(
        self,
        external_procedure_service_report_command_success_request: "ExternalProcedureServiceReportCommandSuccessRequest",
    ) -> "ExternalProcedureServiceReportCommandSuccessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def report_initialization_error(
        self,
        external_procedure_service_report_initialization_error_request: "ExternalProcedureServiceReportInitializationErrorRequest",
    ) -> "ExternalProcedureServiceReportInitializationErrorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def report_progress(
        self,
        external_procedure_service_report_progress_request: "ExternalProcedureServiceReportProgressRequest",
    ) -> "ExternalProcedureServiceReportProgressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def report_ready(
        self,
        external_procedure_service_report_ready_request: "ExternalProcedureServiceReportReadyRequest",
    ) -> "ExternalProcedureServiceReportReadyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def report_status(
        self,
        external_procedure_service_report_status_request: "ExternalProcedureServiceReportStatusRequest",
    ) -> "ExternalProcedureServiceReportStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_register_external_procedure(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceRegisterExternalProcedureRequest, ExternalProcedureServiceRegisterExternalProcedureResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_external_procedure,
            stream,
            request,
        )

    async def __rpc_report_command_failure(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportCommandFailureRequest, ExternalProcedureServiceReportCommandFailureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_command_failure(request)
        await stream.send_message(response)

    async def __rpc_report_command_success(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportCommandSuccessRequest, ExternalProcedureServiceReportCommandSuccessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_command_success(request)
        await stream.send_message(response)

    async def __rpc_report_initialization_error(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportInitializationErrorRequest, ExternalProcedureServiceReportInitializationErrorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_initialization_error(request)
        await stream.send_message(response)

    async def __rpc_report_progress(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportProgressRequest, ExternalProcedureServiceReportProgressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_progress(request)
        await stream.send_message(response)

    async def __rpc_report_ready(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportReadyRequest, ExternalProcedureServiceReportReadyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_ready(request)
        await stream.send_message(response)

    async def __rpc_report_status(
        self,
        stream: "grpclib.server.Stream[ExternalProcedureServiceReportStatusRequest, ExternalProcedureServiceReportStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.ExternalProcedureService/RegisterExternalProcedure": grpclib.const.Handler(
                self.__rpc_register_external_procedure,
                grpclib.const.Cardinality.UNARY_STREAM,
                ExternalProcedureServiceRegisterExternalProcedureRequest,
                ExternalProcedureServiceRegisterExternalProcedureResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportCommandFailure": grpclib.const.Handler(
                self.__rpc_report_command_failure,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportCommandFailureRequest,
                ExternalProcedureServiceReportCommandFailureResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportCommandSuccess": grpclib.const.Handler(
                self.__rpc_report_command_success,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportCommandSuccessRequest,
                ExternalProcedureServiceReportCommandSuccessResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportInitializationError": grpclib.const.Handler(
                self.__rpc_report_initialization_error,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportInitializationErrorRequest,
                ExternalProcedureServiceReportInitializationErrorResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportProgress": grpclib.const.Handler(
                self.__rpc_report_progress,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportProgressRequest,
                ExternalProcedureServiceReportProgressResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportReady": grpclib.const.Handler(
                self.__rpc_report_ready,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportReadyRequest,
                ExternalProcedureServiceReportReadyResponse,
            ),
            "/zen_api.em.hardware.v1.ExternalProcedureService/ReportStatus": grpclib.const.Handler(
                self.__rpc_report_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExternalProcedureServiceReportStatusRequest,
                ExternalProcedureServiceReportStatusResponse,
            ),
        }


class IlluminationServiceBase(ServiceBase):

    async def get_illumination_ir(
        self,
        illumination_service_get_illumination_ir_request: "IlluminationServiceGetIlluminationIrRequest",
    ) -> "IlluminationServiceGetIlluminationIrResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_illumination_white(
        self,
        illumination_service_get_illumination_white_request: "IlluminationServiceGetIlluminationWhiteRequest",
    ) -> "IlluminationServiceGetIlluminationWhiteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_illumination_ir_changed(
        self,
        illumination_service_register_on_illumination_ir_changed_request: "IlluminationServiceRegisterOnIlluminationIrChangedRequest",
    ) -> AsyncIterator[IlluminationServiceRegisterOnIlluminationIrChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield IlluminationServiceRegisterOnIlluminationIrChangedResponse()

    async def register_on_illumination_white_changed(
        self,
        illumination_service_register_on_illumination_white_changed_request: "IlluminationServiceRegisterOnIlluminationWhiteChangedRequest",
    ) -> AsyncIterator[IlluminationServiceRegisterOnIlluminationWhiteChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield IlluminationServiceRegisterOnIlluminationWhiteChangedResponse()

    async def set_illumination_ir(
        self,
        illumination_service_set_illumination_ir_request: "IlluminationServiceSetIlluminationIrRequest",
    ) -> "IlluminationServiceSetIlluminationIrResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_illumination_white(
        self,
        illumination_service_set_illumination_white_request: "IlluminationServiceSetIlluminationWhiteRequest",
    ) -> "IlluminationServiceSetIlluminationWhiteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_illumination_ir(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceGetIlluminationIrRequest, IlluminationServiceGetIlluminationIrResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_illumination_ir(request)
        await stream.send_message(response)

    async def __rpc_get_illumination_white(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceGetIlluminationWhiteRequest, IlluminationServiceGetIlluminationWhiteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_illumination_white(request)
        await stream.send_message(response)

    async def __rpc_register_on_illumination_ir_changed(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceRegisterOnIlluminationIrChangedRequest, IlluminationServiceRegisterOnIlluminationIrChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_illumination_ir_changed,
            stream,
            request,
        )

    async def __rpc_register_on_illumination_white_changed(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceRegisterOnIlluminationWhiteChangedRequest, IlluminationServiceRegisterOnIlluminationWhiteChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_illumination_white_changed,
            stream,
            request,
        )

    async def __rpc_set_illumination_ir(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceSetIlluminationIrRequest, IlluminationServiceSetIlluminationIrResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_illumination_ir(request)
        await stream.send_message(response)

    async def __rpc_set_illumination_white(
        self,
        stream: "grpclib.server.Stream[IlluminationServiceSetIlluminationWhiteRequest, IlluminationServiceSetIlluminationWhiteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_illumination_white(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.IlluminationService/GetIlluminationIR": grpclib.const.Handler(
                self.__rpc_get_illumination_ir,
                grpclib.const.Cardinality.UNARY_UNARY,
                IlluminationServiceGetIlluminationIrRequest,
                IlluminationServiceGetIlluminationIrResponse,
            ),
            "/zen_api.em.hardware.v1.IlluminationService/GetIlluminationWhite": grpclib.const.Handler(
                self.__rpc_get_illumination_white,
                grpclib.const.Cardinality.UNARY_UNARY,
                IlluminationServiceGetIlluminationWhiteRequest,
                IlluminationServiceGetIlluminationWhiteResponse,
            ),
            "/zen_api.em.hardware.v1.IlluminationService/RegisterOnIlluminationIRChanged": grpclib.const.Handler(
                self.__rpc_register_on_illumination_ir_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                IlluminationServiceRegisterOnIlluminationIrChangedRequest,
                IlluminationServiceRegisterOnIlluminationIrChangedResponse,
            ),
            "/zen_api.em.hardware.v1.IlluminationService/RegisterOnIlluminationWhiteChanged": grpclib.const.Handler(
                self.__rpc_register_on_illumination_white_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                IlluminationServiceRegisterOnIlluminationWhiteChangedRequest,
                IlluminationServiceRegisterOnIlluminationWhiteChangedResponse,
            ),
            "/zen_api.em.hardware.v1.IlluminationService/SetIlluminationIR": grpclib.const.Handler(
                self.__rpc_set_illumination_ir,
                grpclib.const.Cardinality.UNARY_UNARY,
                IlluminationServiceSetIlluminationIrRequest,
                IlluminationServiceSetIlluminationIrResponse,
            ),
            "/zen_api.em.hardware.v1.IlluminationService/SetIlluminationWhite": grpclib.const.Handler(
                self.__rpc_set_illumination_white,
                grpclib.const.Cardinality.UNARY_UNARY,
                IlluminationServiceSetIlluminationWhiteRequest,
                IlluminationServiceSetIlluminationWhiteResponse,
            ),
        }


class SimpleAcquisitionServiceBase(ServiceBase):

    async def acquire_extended_single_frame(
        self,
        simple_acquisition_service_acquire_extended_single_frame_request: "SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest",
    ) -> "SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def acquire_single_frame(
        self,
        simple_acquisition_service_acquire_single_frame_request: "SimpleAcquisitionServiceAcquireSingleFrameRequest",
    ) -> "SimpleAcquisitionServiceAcquireSingleFrameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_acquisition_status(
        self,
        simple_acquisition_service_get_acquisition_status_request: "SimpleAcquisitionServiceGetAcquisitionStatusRequest",
    ) -> "SimpleAcquisitionServiceGetAcquisitionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_brightness(
        self,
        simple_acquisition_service_get_brightness_request: "SimpleAcquisitionServiceGetBrightnessRequest",
    ) -> "SimpleAcquisitionServiceGetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_contrast(
        self,
        simple_acquisition_service_get_contrast_request: "SimpleAcquisitionServiceGetContrastRequest",
    ) -> "SimpleAcquisitionServiceGetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_acquisition_status_changed(
        self,
        simple_acquisition_service_register_on_acquisition_status_changed_request: "SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest",
    ) -> AsyncIterator[
        SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse
    ]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse()

    async def set_brightness(
        self,
        simple_acquisition_service_set_brightness_request: "SimpleAcquisitionServiceSetBrightnessRequest",
    ) -> "SimpleAcquisitionServiceSetBrightnessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_contrast(
        self,
        simple_acquisition_service_set_contrast_request: "SimpleAcquisitionServiceSetContrastRequest",
    ) -> "SimpleAcquisitionServiceSetContrastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_extended_live_acquisition(
        self,
        simple_acquisition_service_start_extended_live_acquisition_request: "SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest",
    ) -> "SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_live_acquisition(
        self,
        simple_acquisition_service_start_live_acquisition_request: "SimpleAcquisitionServiceStartLiveAcquisitionRequest",
    ) -> "SimpleAcquisitionServiceStartLiveAcquisitionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_live_acquisition(
        self,
        simple_acquisition_service_stop_live_acquisition_request: "SimpleAcquisitionServiceStopLiveAcquisitionRequest",
    ) -> "SimpleAcquisitionServiceStopLiveAcquisitionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_acquire_extended_single_frame(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest, SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.acquire_extended_single_frame(request)
        await stream.send_message(response)

    async def __rpc_acquire_single_frame(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceAcquireSingleFrameRequest, SimpleAcquisitionServiceAcquireSingleFrameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.acquire_single_frame(request)
        await stream.send_message(response)

    async def __rpc_get_acquisition_status(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceGetAcquisitionStatusRequest, SimpleAcquisitionServiceGetAcquisitionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_acquisition_status(request)
        await stream.send_message(response)

    async def __rpc_get_brightness(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceGetBrightnessRequest, SimpleAcquisitionServiceGetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_brightness(request)
        await stream.send_message(response)

    async def __rpc_get_contrast(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceGetContrastRequest, SimpleAcquisitionServiceGetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_contrast(request)
        await stream.send_message(response)

    async def __rpc_register_on_acquisition_status_changed(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest, SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_acquisition_status_changed,
            stream,
            request,
        )

    async def __rpc_set_brightness(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceSetBrightnessRequest, SimpleAcquisitionServiceSetBrightnessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_brightness(request)
        await stream.send_message(response)

    async def __rpc_set_contrast(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceSetContrastRequest, SimpleAcquisitionServiceSetContrastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_contrast(request)
        await stream.send_message(response)

    async def __rpc_start_extended_live_acquisition(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest, SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_extended_live_acquisition(request)
        await stream.send_message(response)

    async def __rpc_start_live_acquisition(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceStartLiveAcquisitionRequest, SimpleAcquisitionServiceStartLiveAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_live_acquisition(request)
        await stream.send_message(response)

    async def __rpc_stop_live_acquisition(
        self,
        stream: "grpclib.server.Stream[SimpleAcquisitionServiceStopLiveAcquisitionRequest, SimpleAcquisitionServiceStopLiveAcquisitionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_live_acquisition(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/AcquireExtendedSingleFrame": grpclib.const.Handler(
                self.__rpc_acquire_extended_single_frame,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceAcquireExtendedSingleFrameRequest,
                SimpleAcquisitionServiceAcquireExtendedSingleFrameResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/AcquireSingleFrame": grpclib.const.Handler(
                self.__rpc_acquire_single_frame,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceAcquireSingleFrameRequest,
                SimpleAcquisitionServiceAcquireSingleFrameResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetAcquisitionStatus": grpclib.const.Handler(
                self.__rpc_get_acquisition_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceGetAcquisitionStatusRequest,
                SimpleAcquisitionServiceGetAcquisitionStatusResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetBrightness": grpclib.const.Handler(
                self.__rpc_get_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceGetBrightnessRequest,
                SimpleAcquisitionServiceGetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/GetContrast": grpclib.const.Handler(
                self.__rpc_get_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceGetContrastRequest,
                SimpleAcquisitionServiceGetContrastResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/RegisterOnAcquisitionStatusChanged": grpclib.const.Handler(
                self.__rpc_register_on_acquisition_status_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedRequest,
                SimpleAcquisitionServiceRegisterOnAcquisitionStatusChangedResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/SetBrightness": grpclib.const.Handler(
                self.__rpc_set_brightness,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceSetBrightnessRequest,
                SimpleAcquisitionServiceSetBrightnessResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/SetContrast": grpclib.const.Handler(
                self.__rpc_set_contrast,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceSetContrastRequest,
                SimpleAcquisitionServiceSetContrastResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StartExtendedLiveAcquisition": grpclib.const.Handler(
                self.__rpc_start_extended_live_acquisition,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceStartExtendedLiveAcquisitionRequest,
                SimpleAcquisitionServiceStartExtendedLiveAcquisitionResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StartLiveAcquisition": grpclib.const.Handler(
                self.__rpc_start_live_acquisition,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceStartLiveAcquisitionRequest,
                SimpleAcquisitionServiceStartLiveAcquisitionResponse,
            ),
            "/zen_api.em.hardware.v1.SimpleAcquisitionService/StopLiveAcquisition": grpclib.const.Handler(
                self.__rpc_stop_live_acquisition,
                grpclib.const.Cardinality.UNARY_UNARY,
                SimpleAcquisitionServiceStopLiveAcquisitionRequest,
                SimpleAcquisitionServiceStopLiveAcquisitionResponse,
            ),
        }


class VacuumServiceBase(ServiceBase):

    async def close_valve(
        self, vacuum_service_close_valve_request: "VacuumServiceCloseValveRequest"
    ) -> "VacuumServiceCloseValveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_vacuum_modes(
        self,
        vacuum_service_get_available_vacuum_modes_request: "VacuumServiceGetAvailableVacuumModesRequest",
    ) -> "VacuumServiceGetAvailableVacuumModesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_valves(
        self,
        vacuum_service_get_available_valves_request: "VacuumServiceGetAvailableValvesRequest",
    ) -> "VacuumServiceGetAvailableValvesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_chamber_pressure(
        self,
        vacuum_service_get_chamber_pressure_request: "VacuumServiceGetChamberPressureRequest",
    ) -> "VacuumServiceGetChamberPressureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_target_chamber_pressure(
        self,
        vacuum_service_get_target_chamber_pressure_request: "VacuumServiceGetTargetChamberPressureRequest",
    ) -> "VacuumServiceGetTargetChamberPressureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_vacuum_mode(
        self,
        vacuum_service_get_vacuum_mode_request: "VacuumServiceGetVacuumModeRequest",
    ) -> "VacuumServiceGetVacuumModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_vacuum_state(
        self,
        vacuum_service_get_vacuum_state_request: "VacuumServiceGetVacuumStateRequest",
    ) -> "VacuumServiceGetVacuumStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_valve_state(
        self,
        vacuum_service_get_valve_state_request: "VacuumServiceGetValveStateRequest",
    ) -> "VacuumServiceGetValveStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_valve(
        self, vacuum_service_open_valve_request: "VacuumServiceOpenValveRequest"
    ) -> "VacuumServiceOpenValveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pump(
        self, vacuum_service_pump_request: "VacuumServicePumpRequest"
    ) -> "VacuumServicePumpResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_chamber_pressure_changed(
        self,
        vacuum_service_register_on_chamber_pressure_changed_request: "VacuumServiceRegisterOnChamberPressureChangedRequest",
    ) -> AsyncIterator[VacuumServiceRegisterOnChamberPressureChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield VacuumServiceRegisterOnChamberPressureChangedResponse()

    async def register_on_target_chamber_pressure_changed(
        self,
        vacuum_service_register_on_target_chamber_pressure_changed_request: "VacuumServiceRegisterOnTargetChamberPressureChangedRequest",
    ) -> AsyncIterator[VacuumServiceRegisterOnTargetChamberPressureChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield VacuumServiceRegisterOnTargetChamberPressureChangedResponse()

    async def register_on_vacuum_mode_changed(
        self,
        vacuum_service_register_on_vacuum_mode_changed_request: "VacuumServiceRegisterOnVacuumModeChangedRequest",
    ) -> AsyncIterator[VacuumServiceRegisterOnVacuumModeChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield VacuumServiceRegisterOnVacuumModeChangedResponse()

    async def register_on_vacuum_state_changed(
        self,
        vacuum_service_register_on_vacuum_state_changed_request: "VacuumServiceRegisterOnVacuumStateChangedRequest",
    ) -> AsyncIterator[VacuumServiceRegisterOnVacuumStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield VacuumServiceRegisterOnVacuumStateChangedResponse()

    async def register_on_valve_state_changed(
        self,
        vacuum_service_register_on_valve_state_changed_request: "VacuumServiceRegisterOnValveStateChangedRequest",
    ) -> AsyncIterator[VacuumServiceRegisterOnValveStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield VacuumServiceRegisterOnValveStateChangedResponse()

    async def set_target_chamber_pressure(
        self,
        vacuum_service_set_target_chamber_pressure_request: "VacuumServiceSetTargetChamberPressureRequest",
    ) -> "VacuumServiceSetTargetChamberPressureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_vacuum_mode(
        self,
        vacuum_service_set_vacuum_mode_request: "VacuumServiceSetVacuumModeRequest",
    ) -> "VacuumServiceSetVacuumModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vent(
        self, vacuum_service_vent_request: "VacuumServiceVentRequest"
    ) -> "VacuumServiceVentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_close_valve(
        self,
        stream: "grpclib.server.Stream[VacuumServiceCloseValveRequest, VacuumServiceCloseValveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.close_valve(request)
        await stream.send_message(response)

    async def __rpc_get_available_vacuum_modes(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetAvailableVacuumModesRequest, VacuumServiceGetAvailableVacuumModesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_vacuum_modes(request)
        await stream.send_message(response)

    async def __rpc_get_available_valves(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetAvailableValvesRequest, VacuumServiceGetAvailableValvesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_valves(request)
        await stream.send_message(response)

    async def __rpc_get_chamber_pressure(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetChamberPressureRequest, VacuumServiceGetChamberPressureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_chamber_pressure(request)
        await stream.send_message(response)

    async def __rpc_get_target_chamber_pressure(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetTargetChamberPressureRequest, VacuumServiceGetTargetChamberPressureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_target_chamber_pressure(request)
        await stream.send_message(response)

    async def __rpc_get_vacuum_mode(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetVacuumModeRequest, VacuumServiceGetVacuumModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_vacuum_mode(request)
        await stream.send_message(response)

    async def __rpc_get_vacuum_state(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetVacuumStateRequest, VacuumServiceGetVacuumStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_vacuum_state(request)
        await stream.send_message(response)

    async def __rpc_get_valve_state(
        self,
        stream: "grpclib.server.Stream[VacuumServiceGetValveStateRequest, VacuumServiceGetValveStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_valve_state(request)
        await stream.send_message(response)

    async def __rpc_open_valve(
        self,
        stream: "grpclib.server.Stream[VacuumServiceOpenValveRequest, VacuumServiceOpenValveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_valve(request)
        await stream.send_message(response)

    async def __rpc_pump(
        self,
        stream: "grpclib.server.Stream[VacuumServicePumpRequest, VacuumServicePumpResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pump(request)
        await stream.send_message(response)

    async def __rpc_register_on_chamber_pressure_changed(
        self,
        stream: "grpclib.server.Stream[VacuumServiceRegisterOnChamberPressureChangedRequest, VacuumServiceRegisterOnChamberPressureChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_chamber_pressure_changed,
            stream,
            request,
        )

    async def __rpc_register_on_target_chamber_pressure_changed(
        self,
        stream: "grpclib.server.Stream[VacuumServiceRegisterOnTargetChamberPressureChangedRequest, VacuumServiceRegisterOnTargetChamberPressureChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_target_chamber_pressure_changed,
            stream,
            request,
        )

    async def __rpc_register_on_vacuum_mode_changed(
        self,
        stream: "grpclib.server.Stream[VacuumServiceRegisterOnVacuumModeChangedRequest, VacuumServiceRegisterOnVacuumModeChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_vacuum_mode_changed,
            stream,
            request,
        )

    async def __rpc_register_on_vacuum_state_changed(
        self,
        stream: "grpclib.server.Stream[VacuumServiceRegisterOnVacuumStateChangedRequest, VacuumServiceRegisterOnVacuumStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_vacuum_state_changed,
            stream,
            request,
        )

    async def __rpc_register_on_valve_state_changed(
        self,
        stream: "grpclib.server.Stream[VacuumServiceRegisterOnValveStateChangedRequest, VacuumServiceRegisterOnValveStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_valve_state_changed,
            stream,
            request,
        )

    async def __rpc_set_target_chamber_pressure(
        self,
        stream: "grpclib.server.Stream[VacuumServiceSetTargetChamberPressureRequest, VacuumServiceSetTargetChamberPressureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_target_chamber_pressure(request)
        await stream.send_message(response)

    async def __rpc_set_vacuum_mode(
        self,
        stream: "grpclib.server.Stream[VacuumServiceSetVacuumModeRequest, VacuumServiceSetVacuumModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_vacuum_mode(request)
        await stream.send_message(response)

    async def __rpc_vent(
        self,
        stream: "grpclib.server.Stream[VacuumServiceVentRequest, VacuumServiceVentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vent(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.hardware.v1.VacuumService/CloseValve": grpclib.const.Handler(
                self.__rpc_close_valve,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceCloseValveRequest,
                VacuumServiceCloseValveResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetAvailableVacuumModes": grpclib.const.Handler(
                self.__rpc_get_available_vacuum_modes,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetAvailableVacuumModesRequest,
                VacuumServiceGetAvailableVacuumModesResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetAvailableValves": grpclib.const.Handler(
                self.__rpc_get_available_valves,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetAvailableValvesRequest,
                VacuumServiceGetAvailableValvesResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetChamberPressure": grpclib.const.Handler(
                self.__rpc_get_chamber_pressure,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetChamberPressureRequest,
                VacuumServiceGetChamberPressureResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetTargetChamberPressure": grpclib.const.Handler(
                self.__rpc_get_target_chamber_pressure,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetTargetChamberPressureRequest,
                VacuumServiceGetTargetChamberPressureResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetVacuumMode": grpclib.const.Handler(
                self.__rpc_get_vacuum_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetVacuumModeRequest,
                VacuumServiceGetVacuumModeResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetVacuumState": grpclib.const.Handler(
                self.__rpc_get_vacuum_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetVacuumStateRequest,
                VacuumServiceGetVacuumStateResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/GetValveState": grpclib.const.Handler(
                self.__rpc_get_valve_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceGetValveStateRequest,
                VacuumServiceGetValveStateResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/OpenValve": grpclib.const.Handler(
                self.__rpc_open_valve,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceOpenValveRequest,
                VacuumServiceOpenValveResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/Pump": grpclib.const.Handler(
                self.__rpc_pump,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServicePumpRequest,
                VacuumServicePumpResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnChamberPressureChanged": grpclib.const.Handler(
                self.__rpc_register_on_chamber_pressure_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                VacuumServiceRegisterOnChamberPressureChangedRequest,
                VacuumServiceRegisterOnChamberPressureChangedResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnTargetChamberPressureChanged": grpclib.const.Handler(
                self.__rpc_register_on_target_chamber_pressure_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                VacuumServiceRegisterOnTargetChamberPressureChangedRequest,
                VacuumServiceRegisterOnTargetChamberPressureChangedResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnVacuumModeChanged": grpclib.const.Handler(
                self.__rpc_register_on_vacuum_mode_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                VacuumServiceRegisterOnVacuumModeChangedRequest,
                VacuumServiceRegisterOnVacuumModeChangedResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnVacuumStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_vacuum_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                VacuumServiceRegisterOnVacuumStateChangedRequest,
                VacuumServiceRegisterOnVacuumStateChangedResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/RegisterOnValveStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_valve_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                VacuumServiceRegisterOnValveStateChangedRequest,
                VacuumServiceRegisterOnValveStateChangedResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/SetTargetChamberPressure": grpclib.const.Handler(
                self.__rpc_set_target_chamber_pressure,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceSetTargetChamberPressureRequest,
                VacuumServiceSetTargetChamberPressureResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/SetVacuumMode": grpclib.const.Handler(
                self.__rpc_set_vacuum_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceSetVacuumModeRequest,
                VacuumServiceSetVacuumModeResponse,
            ),
            "/zen_api.em.hardware.v1.VacuumService/Vent": grpclib.const.Handler(
                self.__rpc_vent,
                grpclib.const.Cardinality.UNARY_UNARY,
                VacuumServiceVentRequest,
                VacuumServiceVentResponse,
            ),
        }
