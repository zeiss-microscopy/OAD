# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/em/workflow/v1/create_workflow_service.proto, zen_api/em/workflow/v1/eds_acquisition_mode.proto, zen_api/em/workflow/v1/eds_spectrum_acquisition_settings.proto, zen_api/em/workflow/v1/em_region_of_interest.proto, zen_api/em/workflow/v1/run_workflow_service.proto, zen_api/em/workflow/v1/vacuum_parameter.proto, zen_api/em/workflow/v1/workflow_admin_service.proto, zen_api/em/workflow/v1/workflow_state.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....hardware import v1 as ___hardware_v1__
from ...hardware import v1 as __hardware_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class EdsAcquisitionMode(betterproto.Enum):
    """Enum indicating the acquisition mode."""

    UNSPECIFIED = 0
    """Default enum value."""

    AUTO = 1
    """
    Auto selection of acquisition mode which is Counts.
     Acquisition continues until enough counts are collected in the spectrum.
    """

    LIVE_TIME = 2
    """
    Acquire EDS data for a period of live time. This is the time for which the system is processing counts into the spectrum.
    """

    COUNTS = 3
    """
    Acquisition continues until enough counts are collected in the spectrum.
    """


class VacuumParameter(betterproto.Enum):
    """List of parameters that can be called on the Vacuum."""

    UNSPECIFIED = 0
    """Default enum value."""

    VARIABLE_PRESSURE_TARGET = 1
    """Variable pressure."""


class WorkflowState(betterproto.Enum):
    """WorkflowState."""

    UNSPECIFIED = 0
    """Default value."""

    RUN_ACTIVE = 1
    """Execution running."""

    RUN_PAUSED = 2
    """Execution paused."""

    RUN_COMPLETED = 3
    """Execution completed."""

    RUN_FAILED = 4
    """Execution failed."""

    RUN_UNKNOWN = 5
    """Unknown status, e.g. no run so far."""


@dataclass(eq=False, repr=False)
class EdsSpectrumAcquisitionSettings(betterproto.Message):
    """EDS spectrum acquisition setting."""

    acquisition_counts: int = betterproto.int32_field(1)
    """The acquisition counts."""

    acquisition_time: float = betterproto.double_field(2)
    """The acquisition time in seconds."""

    acquisition_mode: "EdsAcquisitionMode" = betterproto.enum_field(3)
    """
    A value indicating whether the acquisition mode (live time or counts).
    """


@dataclass(eq=False, repr=False)
class EmRegionOfInterest(betterproto.Message):
    """The EM region of interest settings."""

    position_x: float = betterproto.double_field(1)
    """The X-coordinate of the region's position."""

    position_y: float = betterproto.double_field(2)
    """The Y-coordinate of the region's position."""

    width: float = betterproto.double_field(3)
    """The width of the region."""

    height: float = betterproto.double_field(4)
    """The height of the region."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAbsoluteTiltingActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddAbsoluteTiltingActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    tilt_angle: float = betterproto.double_field(2)
    """
    The angle in degrees to which the tilting should occur. Defaults to 0 if not specified.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAbsoluteTiltingActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAcquireNavCamImageActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddAcquireNavCamImageActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    em_region_of_interest: "EmRegionOfInterest" = betterproto.message_field(2)
    """
    An ZenApi.EM.Workflow.V1.EmRegionOfInterest object specifying the region of interest for the NavCam image acquisition.
    """

    file_name: str = betterproto.string_field(3)
    """The name of the file where the acquired NavCam image will be saved."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAcquireNavCamImageActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAcquireStoreImageActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddAcquireStoreImageActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    em_region_of_interest: "EmRegionOfInterest" = betterproto.message_field(2)
    """
    An ZenApi.EM.Workflow.V1.EmRegionOfInterest object specifying the region of interest for the image acquisition.
    """

    image_key: str = betterproto.string_field(3)
    """A unique key identifier for the image to be stored."""

    position_name: str = betterproto.string_field(4)
    """
    An optional name for the position associated with the image acquisition. Default is an empty string.
    """

    xoffset: float = betterproto.double_field(5)
    """
    An optional X-coordinate offset for the image acquisition. Default is System.Double.NaN.
    """

    yoffset: float = betterproto.double_field(6)
    """
    An optional Y-coordinate offset for the image acquisition. Default is System.Double.NaN.
    """

    file_name: str = betterproto.string_field(7)
    """
    An optional file name for storing the acquired image. Default is an empty string.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddAcquireStoreImageActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeBeamStateActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddChangeBeamStateActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    desired_state: "__hardware_v1__.BeamState" = betterproto.enum_field(2)
    """
    The desired state of the beam, specified as a ZenApi.EM.Hardware.V1.BeamState enumeration.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeBeamStateActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeCurrentActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddChangeCurrentActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    target_current: float = betterproto.double_field(2)
    """The target current level to which the current should be adjusted."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeCurrentActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeEhtActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddChangeEhtActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    target_voltage: float = betterproto.double_field(2)
    """The target voltage level to which the EHT should be changed."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddChangeEhtActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest(
    betterproto.Message
):
    """
    The CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest class.
    """

    workflow_id: str = betterproto.string_field(1)
    """
    The unique identifier of the workflow to which the EDS acquisition settings action will be appended.
    """

    acquisition_settings: "EdsSpectrumAcquisitionSettings" = betterproto.message_field(
        2
    )
    """
    The EDS acquisition settings to be applied, provided as an ZenApi.EM.Workflow.V1.EdsSpectrumAcquisitionSettings interface.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse(
    betterproto.Message
):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddFocusAndFovActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddFocusAndFovActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    focus: float = betterproto.double_field(2)
    """The focus value to be set."""

    fov: float = betterproto.double_field(3)
    """The field of view value to be set."""

    is_sem: bool = betterproto.bool_field(4)
    """
    A boolean indicating whether the setting is for a SEM (true) or not (false).
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddFocusAndFovActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddGoToStoredPositionActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddGoToStoredPositionActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    id: int = betterproto.int32_field(2)
    """Id of the stage position stored."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddGoToStoredPositionActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddInitializeActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddInitializeActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddInitializeActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddMoveStageRelativeActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddMoveStageRelativeActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    axis_to_move: List["___hardware_v1__.StageAxis"] = betterproto.message_field(2)
    """
    The stage axis that should move.
     The position is in meters.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddMoveStageRelativeActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddPositionControlledTiltActionRequest(betterproto.Message):
    """
    The CreateWorkflowServiceAddPositionControlledTiltActionRequest class.
    """

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    start_angle: float = betterproto.double_field(2)
    """The starting angle in degrees for the tilt action."""

    target_angle: float = betterproto.double_field(3)
    """The target angle in degrees the tilt action aims to reach."""

    large_step: float = betterproto.double_field(4)
    """The size of the large step in degrees for tilting."""

    small_step: float = betterproto.double_field(5)
    """The size of the small step in degrees for finer tilting adjustments."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddPositionControlledTiltActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddRestoreFibProbeActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddRestoreFibProbeActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    fib_probe_storage_name: str = betterproto.string_field(2)
    """
    The name of the storage location from which the FIB probe state will be restored.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddRestoreFibProbeActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetFibProbeActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddSetFibProbeActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    probe_name: str = betterproto.string_field(2)
    """The name of the FIB probe to be set."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetFibProbeActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetFibWithValuesActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddSetFibWithValuesActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    voltage: str = betterproto.string_field(2)
    """The voltage value to set for the FIB."""

    current: str = betterproto.string_field(3)
    """The current value to set for the FIB."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetFibWithValuesActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetVacuumParameterActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddSetVacuumParameterActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    vacuum_parameter: "VacuumParameter" = betterproto.enum_field(2)
    """
    The vacuum parameter to be set, specified as a ZenApi.EM.Workflow.V1.VacuumParameter enumeration.
    """

    value: float = betterproto.double_field(3)
    """The value to which the specified vacuum parameter should be set."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSetVacuumParameterActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSpotParameterActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddSpotParameterActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    spot_id: str = betterproto.string_field(2)
    """The identifier of the spot to be configured."""

    position_x: float = betterproto.double_field(3)
    """The X-coordinate of the beam position for the spot."""

    position_y: float = betterproto.double_field(4)
    """The Y-coordinate of the beam position for the spot."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddSpotParameterActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddStoreFibProbeActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddStoreFibProbeActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    fib_probe_storage_name: str = betterproto.string_field(2)
    """The name for the storage location of the FIB probe state."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddStoreFibProbeActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    disable_alarm: bool = betterproto.bool_field(2)
    """
    A boolean indicating whether to disable (true) or enable (false) the touch alarm.
    """


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddVacuumCommandActionRequest(betterproto.Message):
    """The CreateWorkflowServiceAddVacuumCommandActionRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow to which action should be added."""

    command: str = betterproto.string_field(2)
    """The vacuum command to be sent."""


@dataclass(eq=False, repr=False)
class CreateWorkflowServiceAddVacuumCommandActionResponse(betterproto.Message):
    """ActionResponse response."""

    action_id: str = betterproto.string_field(1)
    """The action id which was created."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceBreakRequest(betterproto.Message):
    """The RunWorkflowServiceBreakRequest class."""

    break_elements: str = betterproto.string_field(1)
    """List of elements, that shall be skipped."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceBreakResponse(betterproto.Message):
    """The RunWorkflowServiceBreakResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceDefineAndRunCompleteWorkflowRequest(betterproto.Message):
    """The RunWorkflowServiceDefineAndRunCompleteWorkflowRequest class."""

    workflow_definition: str = betterproto.string_field(1)
    """
    Complete and consistent definition of the workflow which should be executed.
    """


@dataclass(eq=False, repr=False)
class RunWorkflowServiceDefineAndRunCompleteWorkflowResponse(betterproto.Message):
    """Response object of the RunWorkflow method."""

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to run workflow succeeded or not.
    """


@dataclass(eq=False, repr=False)
class RunWorkflowServiceGetWorkflowByIdRequest(betterproto.Message):
    """The RunWorkflowServiceGetWorkflowByIdRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow which should be returned."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceGetWorkflowByIdResponse(betterproto.Message):
    """Response object of the GetWorkflow method."""

    workflow: str = betterproto.string_field(1)
    """A value with workflow xml."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceGetWorkflowStateRequest(betterproto.Message):
    """The RunWorkflowServiceGetWorkflowStateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceGetWorkflowStateResponse(betterproto.Message):
    """Response object of the RunWorkflowApi."""

    workflow_state: "WorkflowState" = betterproto.enum_field(1)
    """A Workflow state value."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceNextRequest(betterproto.Message):
    """The RunWorkflowServiceNextRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceNextResponse(betterproto.Message):
    """The RunWorkflowServiceNextResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServicePauseRequest(betterproto.Message):
    """The RunWorkflowServicePauseRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServicePauseResponse(betterproto.Message):
    """The RunWorkflowServicePauseResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest(betterproto.Message):
    """
    The RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest class.
    """

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse(betterproto.Message):
    """ActionExecutionId response."""

    action_id: str = betterproto.string_field(1)
    """The action id which is curently executed."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRegisterOnWorkflowStateChangedRequest(betterproto.Message):
    """The RunWorkflowServiceRegisterOnWorkflowStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRegisterOnWorkflowStateChangedResponse(betterproto.Message):
    """Response object of the RunWorkflowApi."""

    workflow_state: "WorkflowState" = betterproto.enum_field(1)
    """A Workflow state value."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceResumeRequest(betterproto.Message):
    """The RunWorkflowServiceResumeRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceResumeResponse(betterproto.Message):
    """The RunWorkflowServiceResumeResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRunWorkflowRequest(betterproto.Message):
    """The RunWorkflowServiceRunWorkflowRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow which should be executed."""


@dataclass(eq=False, repr=False)
class RunWorkflowServiceRunWorkflowResponse(betterproto.Message):
    """Response object of the RunWorkflow method."""

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to run workflow succeeded or not.
    """


@dataclass(eq=False, repr=False)
class RunWorkflowServiceSetNormalModeRequest(betterproto.Message):
    """The RunWorkflowServiceSetNormalModeRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceSetNormalModeResponse(betterproto.Message):
    """The RunWorkflowServiceSetNormalModeResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceSetStepModeRequest(betterproto.Message):
    """The RunWorkflowServiceSetStepModeRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceSetStepModeResponse(betterproto.Message):
    """The RunWorkflowServiceSetStepModeResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStartRequest(betterproto.Message):
    """The RunWorkflowServiceStartRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStartResponse(betterproto.Message):
    """The RunWorkflowServiceStartResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStepRequest(betterproto.Message):
    """The RunWorkflowServiceStepRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStepResponse(betterproto.Message):
    """The RunWorkflowServiceStepResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStopEmergencyRequest(betterproto.Message):
    """The RunWorkflowServiceStopEmergencyRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStopEmergencyResponse(betterproto.Message):
    """The RunWorkflowServiceStopEmergencyResponse class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStopRequest(betterproto.Message):
    """The RunWorkflowServiceStopRequest class."""

    pass


@dataclass(eq=False, repr=False)
class RunWorkflowServiceStopResponse(betterproto.Message):
    """The RunWorkflowServiceStopResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowAdminServiceDeleteWorkflowByIdRequest(betterproto.Message):
    """The WorkflowAdminServiceDeleteWorkflowByIdRequest class."""

    workflow_id: str = betterproto.string_field(1)
    """Identifier of the workflow which should be deleted."""


@dataclass(eq=False, repr=False)
class WorkflowAdminServiceDeleteWorkflowByIdResponse(betterproto.Message):
    """The WorkflowAdminServiceDeleteWorkflowByIdResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowAdminServiceGetAvailableWorkflowIdsRequest(betterproto.Message):
    """The WorkflowAdminServiceGetAvailableWorkflowIdsRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowAdminServiceGetAvailableWorkflowIdsResponse(betterproto.Message):
    """Response object of the GetAvailableWorkflowsIds method."""

    workflow_ids: List[str] = betterproto.string_field(1)
    """A value with workflow xml."""


class CreateWorkflowServiceStub(betterproto.ServiceStub):
    async def add_absolute_tilting_action(
        self,
        create_workflow_service_add_absolute_tilting_action_request: "CreateWorkflowServiceAddAbsoluteTiltingActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddAbsoluteTiltingActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAbsoluteTiltingAction",
            create_workflow_service_add_absolute_tilting_action_request,
            CreateWorkflowServiceAddAbsoluteTiltingActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_acquire_nav_cam_image_action(
        self,
        create_workflow_service_add_acquire_nav_cam_image_action_request: "CreateWorkflowServiceAddAcquireNavCamImageActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddAcquireNavCamImageActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAcquireNavCamImageAction",
            create_workflow_service_add_acquire_nav_cam_image_action_request,
            CreateWorkflowServiceAddAcquireNavCamImageActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_acquire_store_image_action(
        self,
        create_workflow_service_add_acquire_store_image_action_request: "CreateWorkflowServiceAddAcquireStoreImageActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddAcquireStoreImageActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAcquireStoreImageAction",
            create_workflow_service_add_acquire_store_image_action_request,
            CreateWorkflowServiceAddAcquireStoreImageActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_change_beam_state_action(
        self,
        create_workflow_service_add_change_beam_state_action_request: "CreateWorkflowServiceAddChangeBeamStateActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddChangeBeamStateActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeBeamStateAction",
            create_workflow_service_add_change_beam_state_action_request,
            CreateWorkflowServiceAddChangeBeamStateActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_change_current_action(
        self,
        create_workflow_service_add_change_current_action_request: "CreateWorkflowServiceAddChangeCurrentActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddChangeCurrentActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeCurrentAction",
            create_workflow_service_add_change_current_action_request,
            CreateWorkflowServiceAddChangeCurrentActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_change_eht_action(
        self,
        create_workflow_service_add_change_eht_action_request: "CreateWorkflowServiceAddChangeEhtActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddChangeEhtActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeEhtAction",
            create_workflow_service_add_change_eht_action_request,
            CreateWorkflowServiceAddChangeEhtActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_eds_acquisition_settings_parameter_action(
        self,
        create_workflow_service_add_eds_acquisition_settings_parameter_action_request: "CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddEdsAcquisitionSettingsParameterAction",
            create_workflow_service_add_eds_acquisition_settings_parameter_action_request,
            CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_focus_and_fov_action(
        self,
        create_workflow_service_add_focus_and_fov_action_request: "CreateWorkflowServiceAddFocusAndFovActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddFocusAndFovActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddFocusAndFovAction",
            create_workflow_service_add_focus_and_fov_action_request,
            CreateWorkflowServiceAddFocusAndFovActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_go_to_stored_position_action(
        self,
        create_workflow_service_add_go_to_stored_position_action_request: "CreateWorkflowServiceAddGoToStoredPositionActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddGoToStoredPositionActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddGoToStoredPositionAction",
            create_workflow_service_add_go_to_stored_position_action_request,
            CreateWorkflowServiceAddGoToStoredPositionActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_initialize_action(
        self,
        create_workflow_service_add_initialize_action_request: "CreateWorkflowServiceAddInitializeActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddInitializeActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddInitializeAction",
            create_workflow_service_add_initialize_action_request,
            CreateWorkflowServiceAddInitializeActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_move_stage_relative_action(
        self,
        create_workflow_service_add_move_stage_relative_action_request: "CreateWorkflowServiceAddMoveStageRelativeActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddMoveStageRelativeActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddMoveStageRelativeAction",
            create_workflow_service_add_move_stage_relative_action_request,
            CreateWorkflowServiceAddMoveStageRelativeActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_position_controlled_tilt_action(
        self,
        create_workflow_service_add_position_controlled_tilt_action_request: "CreateWorkflowServiceAddPositionControlledTiltActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddPositionControlledTiltActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddPositionControlledTiltAction",
            create_workflow_service_add_position_controlled_tilt_action_request,
            CreateWorkflowServiceAddPositionControlledTiltActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_restore_fib_probe_action(
        self,
        create_workflow_service_add_restore_fib_probe_action_request: "CreateWorkflowServiceAddRestoreFibProbeActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddRestoreFibProbeActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddRestoreFibProbeAction",
            create_workflow_service_add_restore_fib_probe_action_request,
            CreateWorkflowServiceAddRestoreFibProbeActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_set_fib_probe_action(
        self,
        create_workflow_service_add_set_fib_probe_action_request: "CreateWorkflowServiceAddSetFibProbeActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddSetFibProbeActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetFibProbeAction",
            create_workflow_service_add_set_fib_probe_action_request,
            CreateWorkflowServiceAddSetFibProbeActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_set_fib_with_values_action(
        self,
        create_workflow_service_add_set_fib_with_values_action_request: "CreateWorkflowServiceAddSetFibWithValuesActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddSetFibWithValuesActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetFibWithValuesAction",
            create_workflow_service_add_set_fib_with_values_action_request,
            CreateWorkflowServiceAddSetFibWithValuesActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_set_vacuum_parameter_action(
        self,
        create_workflow_service_add_set_vacuum_parameter_action_request: "CreateWorkflowServiceAddSetVacuumParameterActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddSetVacuumParameterActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetVacuumParameterAction",
            create_workflow_service_add_set_vacuum_parameter_action_request,
            CreateWorkflowServiceAddSetVacuumParameterActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_spot_parameter_action(
        self,
        create_workflow_service_add_spot_parameter_action_request: "CreateWorkflowServiceAddSpotParameterActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddSpotParameterActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSpotParameterAction",
            create_workflow_service_add_spot_parameter_action_request,
            CreateWorkflowServiceAddSpotParameterActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_store_fib_probe_action(
        self,
        create_workflow_service_add_store_fib_probe_action_request: "CreateWorkflowServiceAddStoreFibProbeActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddStoreFibProbeActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddStoreFibProbeAction",
            create_workflow_service_add_store_fib_probe_action_request,
            CreateWorkflowServiceAddStoreFibProbeActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_touch_alarm_generator_action(
        self,
        create_workflow_service_add_touch_alarm_generator_action_request: "CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddTouchAlarmGeneratorAction",
            create_workflow_service_add_touch_alarm_generator_action_request,
            CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_vacuum_command_action(
        self,
        create_workflow_service_add_vacuum_command_action_request: "CreateWorkflowServiceAddVacuumCommandActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateWorkflowServiceAddVacuumCommandActionResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddVacuumCommandAction",
            create_workflow_service_add_vacuum_command_action_request,
            CreateWorkflowServiceAddVacuumCommandActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class RunWorkflowServiceStub(betterproto.ServiceStub):
    async def break_(
        self,
        run_workflow_service_break_request: "RunWorkflowServiceBreakRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceBreakResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Break",
            run_workflow_service_break_request,
            RunWorkflowServiceBreakResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def define_and_run_complete_workflow(
        self,
        run_workflow_service_define_and_run_complete_workflow_request: "RunWorkflowServiceDefineAndRunCompleteWorkflowRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceDefineAndRunCompleteWorkflowResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/DefineAndRunCompleteWorkflow",
            run_workflow_service_define_and_run_complete_workflow_request,
            RunWorkflowServiceDefineAndRunCompleteWorkflowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_workflow_by_id(
        self,
        run_workflow_service_get_workflow_by_id_request: "RunWorkflowServiceGetWorkflowByIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceGetWorkflowByIdResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/GetWorkflowById",
            run_workflow_service_get_workflow_by_id_request,
            RunWorkflowServiceGetWorkflowByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_workflow_state(
        self,
        run_workflow_service_get_workflow_state_request: "RunWorkflowServiceGetWorkflowStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceGetWorkflowStateResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/GetWorkflowState",
            run_workflow_service_get_workflow_state_request,
            RunWorkflowServiceGetWorkflowStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def next(
        self,
        run_workflow_service_next_request: "RunWorkflowServiceNextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceNextResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Next",
            run_workflow_service_next_request,
            RunWorkflowServiceNextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pause(
        self,
        run_workflow_service_pause_request: "RunWorkflowServicePauseRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServicePauseResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Pause",
            run_workflow_service_pause_request,
            RunWorkflowServicePauseResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_action_execution_id_changed(
        self,
        run_workflow_service_register_on_action_execution_id_changed_request: "RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.workflow.v1.RunWorkflowService/RegisterOnActionExecutionIdChanged",
            run_workflow_service_register_on_action_execution_id_changed_request,
            RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_workflow_state_changed(
        self,
        run_workflow_service_register_on_workflow_state_changed_request: "RunWorkflowServiceRegisterOnWorkflowStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[RunWorkflowServiceRegisterOnWorkflowStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.em.workflow.v1.RunWorkflowService/RegisterOnWorkflowStateChanged",
            run_workflow_service_register_on_workflow_state_changed_request,
            RunWorkflowServiceRegisterOnWorkflowStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def resume(
        self,
        run_workflow_service_resume_request: "RunWorkflowServiceResumeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceResumeResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Resume",
            run_workflow_service_resume_request,
            RunWorkflowServiceResumeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def run_workflow(
        self,
        run_workflow_service_run_workflow_request: "RunWorkflowServiceRunWorkflowRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceRunWorkflowResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/RunWorkflow",
            run_workflow_service_run_workflow_request,
            RunWorkflowServiceRunWorkflowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_normal_mode(
        self,
        run_workflow_service_set_normal_mode_request: "RunWorkflowServiceSetNormalModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceSetNormalModeResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/SetNormalMode",
            run_workflow_service_set_normal_mode_request,
            RunWorkflowServiceSetNormalModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_step_mode(
        self,
        run_workflow_service_set_step_mode_request: "RunWorkflowServiceSetStepModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceSetStepModeResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/SetStepMode",
            run_workflow_service_set_step_mode_request,
            RunWorkflowServiceSetStepModeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start(
        self,
        run_workflow_service_start_request: "RunWorkflowServiceStartRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceStartResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Start",
            run_workflow_service_start_request,
            RunWorkflowServiceStartResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def step(
        self,
        run_workflow_service_step_request: "RunWorkflowServiceStepRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceStepResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Step",
            run_workflow_service_step_request,
            RunWorkflowServiceStepResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop(
        self,
        run_workflow_service_stop_request: "RunWorkflowServiceStopRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceStopResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/Stop",
            run_workflow_service_stop_request,
            RunWorkflowServiceStopResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_emergency(
        self,
        run_workflow_service_stop_emergency_request: "RunWorkflowServiceStopEmergencyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RunWorkflowServiceStopEmergencyResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.RunWorkflowService/StopEmergency",
            run_workflow_service_stop_emergency_request,
            RunWorkflowServiceStopEmergencyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WorkflowAdminServiceStub(betterproto.ServiceStub):
    async def delete_workflow_by_id(
        self,
        workflow_admin_service_delete_workflow_by_id_request: "WorkflowAdminServiceDeleteWorkflowByIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowAdminServiceDeleteWorkflowByIdResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.WorkflowAdminService/DeleteWorkflowById",
            workflow_admin_service_delete_workflow_by_id_request,
            WorkflowAdminServiceDeleteWorkflowByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_workflow_ids(
        self,
        workflow_admin_service_get_available_workflow_ids_request: "WorkflowAdminServiceGetAvailableWorkflowIdsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowAdminServiceGetAvailableWorkflowIdsResponse":
        return await self._unary_unary(
            "/zen_api.em.workflow.v1.WorkflowAdminService/GetAvailableWorkflowIds",
            workflow_admin_service_get_available_workflow_ids_request,
            WorkflowAdminServiceGetAvailableWorkflowIdsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CreateWorkflowServiceBase(ServiceBase):

    async def add_absolute_tilting_action(
        self,
        create_workflow_service_add_absolute_tilting_action_request: "CreateWorkflowServiceAddAbsoluteTiltingActionRequest",
    ) -> "CreateWorkflowServiceAddAbsoluteTiltingActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_acquire_nav_cam_image_action(
        self,
        create_workflow_service_add_acquire_nav_cam_image_action_request: "CreateWorkflowServiceAddAcquireNavCamImageActionRequest",
    ) -> "CreateWorkflowServiceAddAcquireNavCamImageActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_acquire_store_image_action(
        self,
        create_workflow_service_add_acquire_store_image_action_request: "CreateWorkflowServiceAddAcquireStoreImageActionRequest",
    ) -> "CreateWorkflowServiceAddAcquireStoreImageActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_change_beam_state_action(
        self,
        create_workflow_service_add_change_beam_state_action_request: "CreateWorkflowServiceAddChangeBeamStateActionRequest",
    ) -> "CreateWorkflowServiceAddChangeBeamStateActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_change_current_action(
        self,
        create_workflow_service_add_change_current_action_request: "CreateWorkflowServiceAddChangeCurrentActionRequest",
    ) -> "CreateWorkflowServiceAddChangeCurrentActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_change_eht_action(
        self,
        create_workflow_service_add_change_eht_action_request: "CreateWorkflowServiceAddChangeEhtActionRequest",
    ) -> "CreateWorkflowServiceAddChangeEhtActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_eds_acquisition_settings_parameter_action(
        self,
        create_workflow_service_add_eds_acquisition_settings_parameter_action_request: "CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest",
    ) -> "CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_focus_and_fov_action(
        self,
        create_workflow_service_add_focus_and_fov_action_request: "CreateWorkflowServiceAddFocusAndFovActionRequest",
    ) -> "CreateWorkflowServiceAddFocusAndFovActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_go_to_stored_position_action(
        self,
        create_workflow_service_add_go_to_stored_position_action_request: "CreateWorkflowServiceAddGoToStoredPositionActionRequest",
    ) -> "CreateWorkflowServiceAddGoToStoredPositionActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_initialize_action(
        self,
        create_workflow_service_add_initialize_action_request: "CreateWorkflowServiceAddInitializeActionRequest",
    ) -> "CreateWorkflowServiceAddInitializeActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_move_stage_relative_action(
        self,
        create_workflow_service_add_move_stage_relative_action_request: "CreateWorkflowServiceAddMoveStageRelativeActionRequest",
    ) -> "CreateWorkflowServiceAddMoveStageRelativeActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_position_controlled_tilt_action(
        self,
        create_workflow_service_add_position_controlled_tilt_action_request: "CreateWorkflowServiceAddPositionControlledTiltActionRequest",
    ) -> "CreateWorkflowServiceAddPositionControlledTiltActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_restore_fib_probe_action(
        self,
        create_workflow_service_add_restore_fib_probe_action_request: "CreateWorkflowServiceAddRestoreFibProbeActionRequest",
    ) -> "CreateWorkflowServiceAddRestoreFibProbeActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_set_fib_probe_action(
        self,
        create_workflow_service_add_set_fib_probe_action_request: "CreateWorkflowServiceAddSetFibProbeActionRequest",
    ) -> "CreateWorkflowServiceAddSetFibProbeActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_set_fib_with_values_action(
        self,
        create_workflow_service_add_set_fib_with_values_action_request: "CreateWorkflowServiceAddSetFibWithValuesActionRequest",
    ) -> "CreateWorkflowServiceAddSetFibWithValuesActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_set_vacuum_parameter_action(
        self,
        create_workflow_service_add_set_vacuum_parameter_action_request: "CreateWorkflowServiceAddSetVacuumParameterActionRequest",
    ) -> "CreateWorkflowServiceAddSetVacuumParameterActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_spot_parameter_action(
        self,
        create_workflow_service_add_spot_parameter_action_request: "CreateWorkflowServiceAddSpotParameterActionRequest",
    ) -> "CreateWorkflowServiceAddSpotParameterActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_store_fib_probe_action(
        self,
        create_workflow_service_add_store_fib_probe_action_request: "CreateWorkflowServiceAddStoreFibProbeActionRequest",
    ) -> "CreateWorkflowServiceAddStoreFibProbeActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_touch_alarm_generator_action(
        self,
        create_workflow_service_add_touch_alarm_generator_action_request: "CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest",
    ) -> "CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_vacuum_command_action(
        self,
        create_workflow_service_add_vacuum_command_action_request: "CreateWorkflowServiceAddVacuumCommandActionRequest",
    ) -> "CreateWorkflowServiceAddVacuumCommandActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_absolute_tilting_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddAbsoluteTiltingActionRequest, CreateWorkflowServiceAddAbsoluteTiltingActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_absolute_tilting_action(request)
        await stream.send_message(response)

    async def __rpc_add_acquire_nav_cam_image_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddAcquireNavCamImageActionRequest, CreateWorkflowServiceAddAcquireNavCamImageActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_acquire_nav_cam_image_action(request)
        await stream.send_message(response)

    async def __rpc_add_acquire_store_image_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddAcquireStoreImageActionRequest, CreateWorkflowServiceAddAcquireStoreImageActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_acquire_store_image_action(request)
        await stream.send_message(response)

    async def __rpc_add_change_beam_state_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddChangeBeamStateActionRequest, CreateWorkflowServiceAddChangeBeamStateActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_change_beam_state_action(request)
        await stream.send_message(response)

    async def __rpc_add_change_current_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddChangeCurrentActionRequest, CreateWorkflowServiceAddChangeCurrentActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_change_current_action(request)
        await stream.send_message(response)

    async def __rpc_add_change_eht_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddChangeEhtActionRequest, CreateWorkflowServiceAddChangeEhtActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_change_eht_action(request)
        await stream.send_message(response)

    async def __rpc_add_eds_acquisition_settings_parameter_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest, CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_eds_acquisition_settings_parameter_action(request)
        await stream.send_message(response)

    async def __rpc_add_focus_and_fov_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddFocusAndFovActionRequest, CreateWorkflowServiceAddFocusAndFovActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_focus_and_fov_action(request)
        await stream.send_message(response)

    async def __rpc_add_go_to_stored_position_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddGoToStoredPositionActionRequest, CreateWorkflowServiceAddGoToStoredPositionActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_go_to_stored_position_action(request)
        await stream.send_message(response)

    async def __rpc_add_initialize_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddInitializeActionRequest, CreateWorkflowServiceAddInitializeActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_initialize_action(request)
        await stream.send_message(response)

    async def __rpc_add_move_stage_relative_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddMoveStageRelativeActionRequest, CreateWorkflowServiceAddMoveStageRelativeActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_move_stage_relative_action(request)
        await stream.send_message(response)

    async def __rpc_add_position_controlled_tilt_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddPositionControlledTiltActionRequest, CreateWorkflowServiceAddPositionControlledTiltActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_position_controlled_tilt_action(request)
        await stream.send_message(response)

    async def __rpc_add_restore_fib_probe_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddRestoreFibProbeActionRequest, CreateWorkflowServiceAddRestoreFibProbeActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_restore_fib_probe_action(request)
        await stream.send_message(response)

    async def __rpc_add_set_fib_probe_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddSetFibProbeActionRequest, CreateWorkflowServiceAddSetFibProbeActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_set_fib_probe_action(request)
        await stream.send_message(response)

    async def __rpc_add_set_fib_with_values_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddSetFibWithValuesActionRequest, CreateWorkflowServiceAddSetFibWithValuesActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_set_fib_with_values_action(request)
        await stream.send_message(response)

    async def __rpc_add_set_vacuum_parameter_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddSetVacuumParameterActionRequest, CreateWorkflowServiceAddSetVacuumParameterActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_set_vacuum_parameter_action(request)
        await stream.send_message(response)

    async def __rpc_add_spot_parameter_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddSpotParameterActionRequest, CreateWorkflowServiceAddSpotParameterActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_spot_parameter_action(request)
        await stream.send_message(response)

    async def __rpc_add_store_fib_probe_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddStoreFibProbeActionRequest, CreateWorkflowServiceAddStoreFibProbeActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_store_fib_probe_action(request)
        await stream.send_message(response)

    async def __rpc_add_touch_alarm_generator_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest, CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_touch_alarm_generator_action(request)
        await stream.send_message(response)

    async def __rpc_add_vacuum_command_action(
        self,
        stream: "grpclib.server.Stream[CreateWorkflowServiceAddVacuumCommandActionRequest, CreateWorkflowServiceAddVacuumCommandActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_vacuum_command_action(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAbsoluteTiltingAction": grpclib.const.Handler(
                self.__rpc_add_absolute_tilting_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddAbsoluteTiltingActionRequest,
                CreateWorkflowServiceAddAbsoluteTiltingActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAcquireNavCamImageAction": grpclib.const.Handler(
                self.__rpc_add_acquire_nav_cam_image_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddAcquireNavCamImageActionRequest,
                CreateWorkflowServiceAddAcquireNavCamImageActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddAcquireStoreImageAction": grpclib.const.Handler(
                self.__rpc_add_acquire_store_image_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddAcquireStoreImageActionRequest,
                CreateWorkflowServiceAddAcquireStoreImageActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeBeamStateAction": grpclib.const.Handler(
                self.__rpc_add_change_beam_state_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddChangeBeamStateActionRequest,
                CreateWorkflowServiceAddChangeBeamStateActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeCurrentAction": grpclib.const.Handler(
                self.__rpc_add_change_current_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddChangeCurrentActionRequest,
                CreateWorkflowServiceAddChangeCurrentActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddChangeEhtAction": grpclib.const.Handler(
                self.__rpc_add_change_eht_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddChangeEhtActionRequest,
                CreateWorkflowServiceAddChangeEhtActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddEdsAcquisitionSettingsParameterAction": grpclib.const.Handler(
                self.__rpc_add_eds_acquisition_settings_parameter_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionRequest,
                CreateWorkflowServiceAddEdsAcquisitionSettingsParameterActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddFocusAndFovAction": grpclib.const.Handler(
                self.__rpc_add_focus_and_fov_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddFocusAndFovActionRequest,
                CreateWorkflowServiceAddFocusAndFovActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddGoToStoredPositionAction": grpclib.const.Handler(
                self.__rpc_add_go_to_stored_position_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddGoToStoredPositionActionRequest,
                CreateWorkflowServiceAddGoToStoredPositionActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddInitializeAction": grpclib.const.Handler(
                self.__rpc_add_initialize_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddInitializeActionRequest,
                CreateWorkflowServiceAddInitializeActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddMoveStageRelativeAction": grpclib.const.Handler(
                self.__rpc_add_move_stage_relative_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddMoveStageRelativeActionRequest,
                CreateWorkflowServiceAddMoveStageRelativeActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddPositionControlledTiltAction": grpclib.const.Handler(
                self.__rpc_add_position_controlled_tilt_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddPositionControlledTiltActionRequest,
                CreateWorkflowServiceAddPositionControlledTiltActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddRestoreFibProbeAction": grpclib.const.Handler(
                self.__rpc_add_restore_fib_probe_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddRestoreFibProbeActionRequest,
                CreateWorkflowServiceAddRestoreFibProbeActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetFibProbeAction": grpclib.const.Handler(
                self.__rpc_add_set_fib_probe_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddSetFibProbeActionRequest,
                CreateWorkflowServiceAddSetFibProbeActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetFibWithValuesAction": grpclib.const.Handler(
                self.__rpc_add_set_fib_with_values_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddSetFibWithValuesActionRequest,
                CreateWorkflowServiceAddSetFibWithValuesActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSetVacuumParameterAction": grpclib.const.Handler(
                self.__rpc_add_set_vacuum_parameter_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddSetVacuumParameterActionRequest,
                CreateWorkflowServiceAddSetVacuumParameterActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddSpotParameterAction": grpclib.const.Handler(
                self.__rpc_add_spot_parameter_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddSpotParameterActionRequest,
                CreateWorkflowServiceAddSpotParameterActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddStoreFibProbeAction": grpclib.const.Handler(
                self.__rpc_add_store_fib_probe_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddStoreFibProbeActionRequest,
                CreateWorkflowServiceAddStoreFibProbeActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddTouchAlarmGeneratorAction": grpclib.const.Handler(
                self.__rpc_add_touch_alarm_generator_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddTouchAlarmGeneratorActionRequest,
                CreateWorkflowServiceAddTouchAlarmGeneratorActionResponse,
            ),
            "/zen_api.em.workflow.v1.CreateWorkflowService/AddVacuumCommandAction": grpclib.const.Handler(
                self.__rpc_add_vacuum_command_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateWorkflowServiceAddVacuumCommandActionRequest,
                CreateWorkflowServiceAddVacuumCommandActionResponse,
            ),
        }


class RunWorkflowServiceBase(ServiceBase):

    async def break_(
        self, run_workflow_service_break_request: "RunWorkflowServiceBreakRequest"
    ) -> "RunWorkflowServiceBreakResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def define_and_run_complete_workflow(
        self,
        run_workflow_service_define_and_run_complete_workflow_request: "RunWorkflowServiceDefineAndRunCompleteWorkflowRequest",
    ) -> "RunWorkflowServiceDefineAndRunCompleteWorkflowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_workflow_by_id(
        self,
        run_workflow_service_get_workflow_by_id_request: "RunWorkflowServiceGetWorkflowByIdRequest",
    ) -> "RunWorkflowServiceGetWorkflowByIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_workflow_state(
        self,
        run_workflow_service_get_workflow_state_request: "RunWorkflowServiceGetWorkflowStateRequest",
    ) -> "RunWorkflowServiceGetWorkflowStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def next(
        self, run_workflow_service_next_request: "RunWorkflowServiceNextRequest"
    ) -> "RunWorkflowServiceNextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pause(
        self, run_workflow_service_pause_request: "RunWorkflowServicePauseRequest"
    ) -> "RunWorkflowServicePauseResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_action_execution_id_changed(
        self,
        run_workflow_service_register_on_action_execution_id_changed_request: "RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest",
    ) -> AsyncIterator[RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse()

    async def register_on_workflow_state_changed(
        self,
        run_workflow_service_register_on_workflow_state_changed_request: "RunWorkflowServiceRegisterOnWorkflowStateChangedRequest",
    ) -> AsyncIterator[RunWorkflowServiceRegisterOnWorkflowStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield RunWorkflowServiceRegisterOnWorkflowStateChangedResponse()

    async def resume(
        self, run_workflow_service_resume_request: "RunWorkflowServiceResumeRequest"
    ) -> "RunWorkflowServiceResumeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def run_workflow(
        self,
        run_workflow_service_run_workflow_request: "RunWorkflowServiceRunWorkflowRequest",
    ) -> "RunWorkflowServiceRunWorkflowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_normal_mode(
        self,
        run_workflow_service_set_normal_mode_request: "RunWorkflowServiceSetNormalModeRequest",
    ) -> "RunWorkflowServiceSetNormalModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_step_mode(
        self,
        run_workflow_service_set_step_mode_request: "RunWorkflowServiceSetStepModeRequest",
    ) -> "RunWorkflowServiceSetStepModeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start(
        self, run_workflow_service_start_request: "RunWorkflowServiceStartRequest"
    ) -> "RunWorkflowServiceStartResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def step(
        self, run_workflow_service_step_request: "RunWorkflowServiceStepRequest"
    ) -> "RunWorkflowServiceStepResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(
        self, run_workflow_service_stop_request: "RunWorkflowServiceStopRequest"
    ) -> "RunWorkflowServiceStopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_emergency(
        self,
        run_workflow_service_stop_emergency_request: "RunWorkflowServiceStopEmergencyRequest",
    ) -> "RunWorkflowServiceStopEmergencyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_break_(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceBreakRequest, RunWorkflowServiceBreakResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.break_(request)
        await stream.send_message(response)

    async def __rpc_define_and_run_complete_workflow(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceDefineAndRunCompleteWorkflowRequest, RunWorkflowServiceDefineAndRunCompleteWorkflowResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.define_and_run_complete_workflow(request)
        await stream.send_message(response)

    async def __rpc_get_workflow_by_id(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceGetWorkflowByIdRequest, RunWorkflowServiceGetWorkflowByIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_workflow_by_id(request)
        await stream.send_message(response)

    async def __rpc_get_workflow_state(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceGetWorkflowStateRequest, RunWorkflowServiceGetWorkflowStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_workflow_state(request)
        await stream.send_message(response)

    async def __rpc_next(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceNextRequest, RunWorkflowServiceNextResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.next(request)
        await stream.send_message(response)

    async def __rpc_pause(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServicePauseRequest, RunWorkflowServicePauseResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pause(request)
        await stream.send_message(response)

    async def __rpc_register_on_action_execution_id_changed(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest, RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_action_execution_id_changed,
            stream,
            request,
        )

    async def __rpc_register_on_workflow_state_changed(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceRegisterOnWorkflowStateChangedRequest, RunWorkflowServiceRegisterOnWorkflowStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_workflow_state_changed,
            stream,
            request,
        )

    async def __rpc_resume(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceResumeRequest, RunWorkflowServiceResumeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.resume(request)
        await stream.send_message(response)

    async def __rpc_run_workflow(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceRunWorkflowRequest, RunWorkflowServiceRunWorkflowResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.run_workflow(request)
        await stream.send_message(response)

    async def __rpc_set_normal_mode(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceSetNormalModeRequest, RunWorkflowServiceSetNormalModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_normal_mode(request)
        await stream.send_message(response)

    async def __rpc_set_step_mode(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceSetStepModeRequest, RunWorkflowServiceSetStepModeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_step_mode(request)
        await stream.send_message(response)

    async def __rpc_start(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceStartRequest, RunWorkflowServiceStartResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start(request)
        await stream.send_message(response)

    async def __rpc_step(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceStepRequest, RunWorkflowServiceStepResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.step(request)
        await stream.send_message(response)

    async def __rpc_stop(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceStopRequest, RunWorkflowServiceStopResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    async def __rpc_stop_emergency(
        self,
        stream: "grpclib.server.Stream[RunWorkflowServiceStopEmergencyRequest, RunWorkflowServiceStopEmergencyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_emergency(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.workflow.v1.RunWorkflowService/Break": grpclib.const.Handler(
                self.__rpc_break_,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceBreakRequest,
                RunWorkflowServiceBreakResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/DefineAndRunCompleteWorkflow": grpclib.const.Handler(
                self.__rpc_define_and_run_complete_workflow,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceDefineAndRunCompleteWorkflowRequest,
                RunWorkflowServiceDefineAndRunCompleteWorkflowResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/GetWorkflowById": grpclib.const.Handler(
                self.__rpc_get_workflow_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceGetWorkflowByIdRequest,
                RunWorkflowServiceGetWorkflowByIdResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/GetWorkflowState": grpclib.const.Handler(
                self.__rpc_get_workflow_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceGetWorkflowStateRequest,
                RunWorkflowServiceGetWorkflowStateResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Next": grpclib.const.Handler(
                self.__rpc_next,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceNextRequest,
                RunWorkflowServiceNextResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Pause": grpclib.const.Handler(
                self.__rpc_pause,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServicePauseRequest,
                RunWorkflowServicePauseResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/RegisterOnActionExecutionIdChanged": grpclib.const.Handler(
                self.__rpc_register_on_action_execution_id_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                RunWorkflowServiceRegisterOnActionExecutionIdChangedRequest,
                RunWorkflowServiceRegisterOnActionExecutionIdChangedResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/RegisterOnWorkflowStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_workflow_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                RunWorkflowServiceRegisterOnWorkflowStateChangedRequest,
                RunWorkflowServiceRegisterOnWorkflowStateChangedResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Resume": grpclib.const.Handler(
                self.__rpc_resume,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceResumeRequest,
                RunWorkflowServiceResumeResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/RunWorkflow": grpclib.const.Handler(
                self.__rpc_run_workflow,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceRunWorkflowRequest,
                RunWorkflowServiceRunWorkflowResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/SetNormalMode": grpclib.const.Handler(
                self.__rpc_set_normal_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceSetNormalModeRequest,
                RunWorkflowServiceSetNormalModeResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/SetStepMode": grpclib.const.Handler(
                self.__rpc_set_step_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceSetStepModeRequest,
                RunWorkflowServiceSetStepModeResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Start": grpclib.const.Handler(
                self.__rpc_start,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceStartRequest,
                RunWorkflowServiceStartResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Step": grpclib.const.Handler(
                self.__rpc_step,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceStepRequest,
                RunWorkflowServiceStepResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceStopRequest,
                RunWorkflowServiceStopResponse,
            ),
            "/zen_api.em.workflow.v1.RunWorkflowService/StopEmergency": grpclib.const.Handler(
                self.__rpc_stop_emergency,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunWorkflowServiceStopEmergencyRequest,
                RunWorkflowServiceStopEmergencyResponse,
            ),
        }


class WorkflowAdminServiceBase(ServiceBase):

    async def delete_workflow_by_id(
        self,
        workflow_admin_service_delete_workflow_by_id_request: "WorkflowAdminServiceDeleteWorkflowByIdRequest",
    ) -> "WorkflowAdminServiceDeleteWorkflowByIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_workflow_ids(
        self,
        workflow_admin_service_get_available_workflow_ids_request: "WorkflowAdminServiceGetAvailableWorkflowIdsRequest",
    ) -> "WorkflowAdminServiceGetAvailableWorkflowIdsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_delete_workflow_by_id(
        self,
        stream: "grpclib.server.Stream[WorkflowAdminServiceDeleteWorkflowByIdRequest, WorkflowAdminServiceDeleteWorkflowByIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_workflow_by_id(request)
        await stream.send_message(response)

    async def __rpc_get_available_workflow_ids(
        self,
        stream: "grpclib.server.Stream[WorkflowAdminServiceGetAvailableWorkflowIdsRequest, WorkflowAdminServiceGetAvailableWorkflowIdsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_workflow_ids(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.em.workflow.v1.WorkflowAdminService/DeleteWorkflowById": grpclib.const.Handler(
                self.__rpc_delete_workflow_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowAdminServiceDeleteWorkflowByIdRequest,
                WorkflowAdminServiceDeleteWorkflowByIdResponse,
            ),
            "/zen_api.em.workflow.v1.WorkflowAdminService/GetAvailableWorkflowIds": grpclib.const.Handler(
                self.__rpc_get_available_workflow_ids,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowAdminServiceGetAvailableWorkflowIdsRequest,
                WorkflowAdminServiceGetAvailableWorkflowIdsResponse,
            ),
        }
