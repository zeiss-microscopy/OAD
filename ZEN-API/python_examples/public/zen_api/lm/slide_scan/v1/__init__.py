# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/lm/slide_scan/v1/channel_settings.proto, zen_api/lm/slide_scan/v1/information_base.proto, zen_api/lm/slide_scan/v1/profile_information.proto, zen_api/lm/slide_scan/v1/response_code.proto, zen_api/lm/slide_scan/v1/response_type.proto, zen_api/lm/slide_scan/v1/slide_information.proto, zen_api/lm/slide_scan/v1/slide_position_information.proto, zen_api/lm/slide_scan/v1/slide_scan_service.proto, zen_api/lm/slide_scan/v1/slide_state.proto, zen_api/lm/slide_scan/v1/tray_information.proto, zen_api/lm/slide_scan/v1/tray_slot_state.proto, zen_api/lm/slide_scan/v1/tray_type.proto, zen_api/lm/slide_scan/v1/tray_working_state.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class SlideState(betterproto.Enum):
    """This enumeration names all possible slide processing states."""

    UNSPECIFIED = 0
    """Default value if status is not specified."""

    STOPPED = 1
    """Processing was stopped."""

    NEW = 2
    """New (not processed)."""

    PREVIEW_IN_PROGRESS = 3
    """Preview currently in work."""

    INPUT_REQUIRED = 4
    """Preview processing finished, but input required."""

    PREVIEWED = 5
    """Preview processing finished."""

    SCAN_IN_PROGRESS = 6
    """Scan currently in work."""

    FINISHED = 7
    """Processing finished."""

    ERROR = 8
    """Processing error occurred."""

    SKIPPED = 9
    """Slide was skipped by user."""


class TraySlotState(betterproto.Enum):
    """Enum defining the states of slide scanner slot LEDs."""

    UNSPECIFIED = 0
    """Default value if status is not specified."""

    SLOT_OPEN_SYSTEM_PAUSED = 1
    """Slot swiveled out for assembling."""

    SLOT_OPEN_TRAY_LOADED = 2
    """Slot swiveled out for assembling but Tray is on stage."""

    SLOT_CLOSED_TRAY_NOT_PROCESSED = 3
    """Slot swiveled in with tray containing unprocessed slides."""

    SLOT_CLOSED_TRAY_PROCESSED = 4
    """Slot swiveled in with tray containing processed slides."""

    SLOT_CLOSED_PROCESS_ERROR = 5
    """Slot swiveled in with tray but an processing error was occurred."""

    SLOT_CLOSED_TRAY_PRESCANNED = 6
    """Slot swiveled in with tray containing pre-scanned slides."""

    SLOT_CLOSED_TRAY_LOADED = 7
    """Slot swiveled in and tray is on stage."""

    SLOT_CLOSED_NO_TRAY = 8
    """Slot swiveled in without tray."""

    SLOT_CLOSED_TRAY_IN_SYSTEM_AND_SLOT = 9
    """Slot swiveled in with tray  and a tray on the stage (Error case)."""

    SLOT_CLOSED_UNKNOWN_TRAY = 10
    """Slot swiveled in with an unknown tray type."""

    SLOT_CLOSED_NO_SLIDES = 11
    """Slot swiveled in with an empty tray."""

    SLOT_CLOSED_TRAY_PARTLY_PROCESSED_WITH_ERRORS = 12
    """Slot swiveled in with tray containing processed slides."""

    UNKNOWN = 255
    """Unknown type (tray is inserted but could not be determined)."""


class TrayType(betterproto.Enum):
    """Enum defining the types of slide scanner trays."""

    UNSPECIFIED = 0
    """Default value if status is not specified."""

    NONE = 1
    """No tray."""

    SCAN1X3 = 2
    """Scan tray for 4 slides of size 1'x3'."""

    SCAN2X3 = 3
    """Scan tray for 2 slides of size 2'x3'."""

    SCAN1X3_2X3 = 4
    """Scan tray for 2 slides, one of size 1'x3', one of size 2'x3'."""

    CALIBRATION_STAGE = 5
    """Stage calibration slide holder tray."""

    SCAN1X3_BASIC = 6
    """Scan tray for 4 slides of size 1'x3', basic design."""

    SCAN4X3 = 7
    """
    Scan tray for 1 slide of size 4'x3' or a combination of slides of unknown size.
    """

    PARKING = 152
    """
    Arbitrary tray type to indicate the parking position. Is only available at parking position of the magazine changer.
    """

    UNKNOWN = 153
    """Unknown type (tray is inserted but could not be determined)."""


class TrayWorkingState(betterproto.Enum):
    """Enum defining the types of slide scanner trays working state."""

    UNSPECIFIED = 0
    """Default value if status is not specified."""

    NOT_SCANNED = 1
    """The tray is not scanned."""

    PRESCANNED = 2
    """The tray was pre scanned."""

    SCANNED = 3
    """The tray was successfully scanned."""

    ERROR = 4
    """There occurred an error while scanning or pre scanning the tray."""

    NOT_AVAILABLE = 5
    """There is no tray available at this position."""


class ResponseCode(betterproto.Enum):
    """Numerical result code."""

    UNSPECIFIED = 0
    """Default value if the status is not specified."""

    INVALID_ARGUMENT = 1
    """The required parameter is missing."""

    NOT_FOUND = 2
    """The requested resource could not be found."""

    NOT_ALLOWED = 3
    """The operation is not allowed."""


class ResponseType(betterproto.Enum):
    """Kind of failure with implication to error recovery."""

    UNSPECIFIED = 0
    """Default value if the ResponseType is not specified."""

    SUCCESS = 1
    """
    The API call is accepted and will be processed.
     In this case the response code can be unspecified.
    """

    WARNING = 2
    """
    The API call is accepted and will be processed.
     In this case, the response contains an indication of possible problem settings.
    """

    FAILED = 3
    """Something went wrong. This is the usual error type."""

    EXCEPTION = 4
    """The call threw an exeption."""


@dataclass(eq=False, repr=False)
class ChannelSettings(betterproto.Message):
    """Settings for a channel."""

    channel_identifier: str = betterproto.string_field(1)
    """The identifier for the master channel."""

    channel_name: str = betterproto.string_field(2)
    """The name for the channel."""

    channel_description: str = betterproto.string_field(3)
    """The description for the channel."""

    dye_name: str = betterproto.string_field(4)
    """The fluorescence dye."""

    intensity: float = betterproto.double_field(5)
    """
    The lamp intensity that should be used for a channel.
     The intensity is set in percent. (Values ranging from 0 to 100).
    """

    exposure_time: float = betterproto.double_field(6)
    """
    The exposure time that should be used for a channel.
     The exposure time is set in milliseconds. (Values ranging from 0.1 to 2000ms).
    """


@dataclass(eq=False, repr=False)
class ProfileInformation(betterproto.Message):
    """
    ProfileInformation contains information about the scan profile associated with a specific slide.
    """

    profile_name: str = betterproto.string_field(1)
    """The profile name associated with the slides acquisition."""


@dataclass(eq=False, repr=False)
class SlideInformation(betterproto.Message):
    """SlideInformation holds information about an Axioscan slide."""

    slide_on_frame_position: int = betterproto.int32_field(1)
    """
    The slide position on the frame - range [1, 4]. The maximum value depending on frame type.
    """

    state: "SlideState" = betterproto.enum_field(2)
    """The ZenApi.LM.SlideScan.V1.SlideState of the slide."""

    profile_information: "ProfileInformation" = betterproto.message_field(3)
    """
    The corresponding ZenApi.LM.SlideScan.V1.SlideInformation.ProfileInformation of the slide.
    """

    is_selected_for_processing: bool = betterproto.bool_field(4)
    """A value indicating whether this slide is selected for processing."""

    barcode: str = betterproto.string_field(5)
    """The barcode of the slide."""

    label_image_path: str = betterproto.string_field(6)
    """The path to the label image."""

    preview_image_path: str = betterproto.string_field(7)
    """The path to the preview image."""

    scan_image_path: str = betterproto.string_field(8)
    """The path to the scan image."""


@dataclass(eq=False, repr=False)
class TrayInformation(betterproto.Message):
    """TrayInformation contains information about an Axioscan tray."""

    position: int = betterproto.int32_field(1)
    """
    The position of the tray inside the Axioscan magazine in the range of [1, 26].
    """

    type: "TrayType" = betterproto.enum_field(2)
    """
    The ZenApi.LM.SlideScan.V1.TrayType of the tray. The type determines the number of possible slides on the tray.
    """

    working_state: "TrayWorkingState" = betterproto.enum_field(3)
    """
    The ZenApi.LM.SlideScan.V1.TrayWorkingState of the tray. The working state of the entire tray.
    """

    slot_state: "TraySlotState" = betterproto.enum_field(4)
    """
    The ZenApi.LM.SlideScan.V1.TraySlotState of the tray. The status of the tray slot ( open/closed statuses).
    """

    slides: List["SlideInformation"] = betterproto.message_field(5)
    """ZenApi.LM.SlideScan.V1.SlideInformation of the slides."""


@dataclass(eq=False, repr=False)
class InformationBase(betterproto.Message):
    """Base class for all information types."""

    simple_information: "SimpleInformation" = betterproto.message_field(
        1, group="subtype"
    )
    slide_scan_system_information: "SlideScanSystemInformation" = (
        betterproto.message_field(2, group="subtype")
    )
    magazine_information: "MagazineInformation" = betterproto.message_field(
        3, group="subtype"
    )


@dataclass(eq=False, repr=False)
class MagazineInformation(betterproto.Message):
    """Data container for inforamtion about the magazine state."""

    is_door_closed: bool = betterproto.bool_field(1)
    """A value indicating whether the Axioscan tray door is closed."""

    trays: List["TrayInformation"] = betterproto.message_field(2)
    """The magazine state by providing the list of available trays."""


@dataclass(eq=False, repr=False)
class SimpleInformation(betterproto.Message):
    """Data container for a simple message inforamtion."""

    message: str = betterproto.string_field(1)
    """The simple string message."""


@dataclass(eq=False, repr=False)
class SlideScanSystemInformation(betterproto.Message):
    """Data container for information about the hardware state."""

    is_idle: bool = betterproto.bool_field(1)
    """A value indicating whether an Axioscan system is idle."""

    is_scan_running: bool = betterproto.bool_field(2)
    """A value indicating whether a scan is running."""

    is_preview_scan_running: bool = betterproto.bool_field(3)
    """A value indicating whether a preview scan is running."""

    is_tray_initializing: bool = betterproto.bool_field(4)
    """A value indicating whether a tray is being initialized."""


@dataclass(eq=False, repr=False)
class SlidePositionInformation(betterproto.Message):
    """
    SlidePositionInformation holds information about an AxioScan slide position.
    """

    slide_on_frame_position: int = betterproto.int32_field(1)
    """
    The slide position on the frame - range [1, 4]. The maximum value depending on frame type.
    """

    tray_position: int = betterproto.int32_field(2)
    """
    The position of the tray inside the Axioscan magazine in the range of [1, 26].
    """

    image_name: str = betterproto.string_field(3)
    """The image name for the slide."""


@dataclass(eq=False, repr=False)
class GeneralResponse(betterproto.Message):
    """
    A general response for all asynchronous requests that do not return any results or data.
    """

    type: "ResponseType" = betterproto.enum_field(1)
    """The type of resonse message."""

    code: "ResponseCode" = betterproto.enum_field(2)
    """The code of resonse message."""

    description: str = betterproto.string_field(3)
    """
    A description.
     Explanation text, for developers only.
    """

    user_message: str = betterproto.string_field(4)
    """
    A message suitable to be shown in user interfaces,
     will be translated by Api.
    """


@dataclass(eq=False, repr=False)
class SlideScanServiceGetChannelSettingsRequest(betterproto.Message):
    """
    Describes the input parameters for retrieving the configured channels.
    """

    scan_profile_path: str = betterproto.string_field(1)
    """The path of the specified scan profile."""


@dataclass(eq=False, repr=False)
class SlideScanServiceGetChannelSettingsResponse(betterproto.Message):
    """Lists the configured channel settings in the specified scan profile."""

    channel_setting_list: List["ChannelSettings"] = betterproto.message_field(1)
    """The configured channel settings."""


@dataclass(eq=False, repr=False)
class SlideScanServiceGetMagazineStateRequest(betterproto.Message):
    """
    Describes the input parameters for a call to retrieve the magazine state.
    """

    pass


@dataclass(eq=False, repr=False)
class SlideScanServiceGetMagazineStateResponse(betterproto.Message):
    """Lists the populated slides of each tray."""

    trays: List["TrayInformation"] = betterproto.message_field(1)
    """The loaded slides per tray."""


@dataclass(eq=False, repr=False)
class SlideScanServiceObserveRequest(betterproto.Message):
    """
    Describes the input parameters for a call to observe the events and progress
     that happen either during acquisition or while the microscope is idling.
    """

    pass


@dataclass(eq=False, repr=False)
class SlideScanServiceObserveResponse(betterproto.Message):
    """
    Describes the output parameters for a call to observe the events, progress
     and additional information like warnings and errors of a running scan profile acquisition.
     The response might be a stream of different information types (e.g. Progress, Error, Hardware State, ...).
    """

    information: "InformationBase" = betterproto.message_field(1)
    """The flexible, variable information."""


@dataclass(eq=False, repr=False)
class SlideScanServiceResetSlideStatesRequest(betterproto.Message):
    """
    Describes the input parameters for resetting the state of specified slides to new.
    """

    slide_position_list: List["SlidePositionInformation"] = betterproto.message_field(1)
    """The position of the slide list to be reset."""


@dataclass(eq=False, repr=False)
class SlideScanServiceResetSlideStatesResponse(betterproto.Message):
    """
    Describes the output parameters for resetting the state of specified slides.
    """

    response: "GeneralResponse" = betterproto.message_field(1)
    """A general response about the success/error state of the request."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStartScanPreviewRequest(betterproto.Message):
    """Describes the input parameters for the preview start."""

    scan_profile_name: str = betterproto.string_field(1)
    """The name of the scan profile that should be started."""

    slide_position_list: List["SlidePositionInformation"] = betterproto.message_field(2)
    """The list of tray/slides to be processed."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStartScanPreviewResponse(betterproto.Message):
    """Response of starting a preview in the slide scan service."""

    response: "GeneralResponse" = betterproto.message_field(1)
    """A general response to inform about the requests success/error state."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStartScanProfileRequest(betterproto.Message):
    """Describes the input parameters for the scan profile start."""

    scan_profile_name: str = betterproto.string_field(1)
    """The name of the scan profile that should be started."""

    slide_position_list: List["SlidePositionInformation"] = betterproto.message_field(2)
    """The list of tray/slides to be processed."""

    channel_settings: List["ChannelSettings"] = betterproto.message_field(3)
    """The list of changed channel settings."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStartScanProfileResponse(betterproto.Message):
    """
    Describes the output parameters for a call to start the scan profile.
    """

    response: "GeneralResponse" = betterproto.message_field(1)
    """A general response to inform about the requests success/error state."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStopScanPreviewRequest(betterproto.Message):
    """Represents a request to stop the preview in the SlideScan service."""

    pass


@dataclass(eq=False, repr=False)
class SlideScanServiceStopScanPreviewResponse(betterproto.Message):
    """
    Represents the response for stopping the preview in the slide scan service.
    """

    response: "GeneralResponse" = betterproto.message_field(1)
    """A general response to inform about the requests success/error state."""


@dataclass(eq=False, repr=False)
class SlideScanServiceStopScanProfileRequest(betterproto.Message):
    """Describes the input parameters for stopping the scan profile."""

    pass


@dataclass(eq=False, repr=False)
class SlideScanServiceStopScanProfileResponse(betterproto.Message):
    """Describes the output parameters for a call to stop the scan profile."""

    response: "GeneralResponse" = betterproto.message_field(1)
    """A general response to inform about the requests success/error state."""


class SlideScanServiceStub(betterproto.ServiceStub):
    async def get_channel_settings(
        self,
        slide_scan_service_get_channel_settings_request: "SlideScanServiceGetChannelSettingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceGetChannelSettingsResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/GetChannelSettings",
            slide_scan_service_get_channel_settings_request,
            SlideScanServiceGetChannelSettingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_magazine_state(
        self,
        slide_scan_service_get_magazine_state_request: "SlideScanServiceGetMagazineStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceGetMagazineStateResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/GetMagazineState",
            slide_scan_service_get_magazine_state_request,
            SlideScanServiceGetMagazineStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def observe(
        self,
        slide_scan_service_observe_request: "SlideScanServiceObserveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[SlideScanServiceObserveResponse]:
        async for response in self._unary_stream(
            "/zen_api.lm.slide_scan.v1.SlideScanService/Observe",
            slide_scan_service_observe_request,
            SlideScanServiceObserveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def reset_slide_states(
        self,
        slide_scan_service_reset_slide_states_request: "SlideScanServiceResetSlideStatesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceResetSlideStatesResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/ResetSlideStates",
            slide_scan_service_reset_slide_states_request,
            SlideScanServiceResetSlideStatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_scan_preview(
        self,
        slide_scan_service_start_scan_preview_request: "SlideScanServiceStartScanPreviewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceStartScanPreviewResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/StartScanPreview",
            slide_scan_service_start_scan_preview_request,
            SlideScanServiceStartScanPreviewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_scan_profile(
        self,
        slide_scan_service_start_scan_profile_request: "SlideScanServiceStartScanProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceStartScanProfileResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/StartScanProfile",
            slide_scan_service_start_scan_profile_request,
            SlideScanServiceStartScanProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_scan_preview(
        self,
        slide_scan_service_stop_scan_preview_request: "SlideScanServiceStopScanPreviewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceStopScanPreviewResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/StopScanPreview",
            slide_scan_service_stop_scan_preview_request,
            SlideScanServiceStopScanPreviewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_scan_profile(
        self,
        slide_scan_service_stop_scan_profile_request: "SlideScanServiceStopScanProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SlideScanServiceStopScanProfileResponse":
        return await self._unary_unary(
            "/zen_api.lm.slide_scan.v1.SlideScanService/StopScanProfile",
            slide_scan_service_stop_scan_profile_request,
            SlideScanServiceStopScanProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SlideScanServiceBase(ServiceBase):

    async def get_channel_settings(
        self,
        slide_scan_service_get_channel_settings_request: "SlideScanServiceGetChannelSettingsRequest",
    ) -> "SlideScanServiceGetChannelSettingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_magazine_state(
        self,
        slide_scan_service_get_magazine_state_request: "SlideScanServiceGetMagazineStateRequest",
    ) -> "SlideScanServiceGetMagazineStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def observe(
        self, slide_scan_service_observe_request: "SlideScanServiceObserveRequest"
    ) -> AsyncIterator[SlideScanServiceObserveResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SlideScanServiceObserveResponse()

    async def reset_slide_states(
        self,
        slide_scan_service_reset_slide_states_request: "SlideScanServiceResetSlideStatesRequest",
    ) -> "SlideScanServiceResetSlideStatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_scan_preview(
        self,
        slide_scan_service_start_scan_preview_request: "SlideScanServiceStartScanPreviewRequest",
    ) -> "SlideScanServiceStartScanPreviewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_scan_profile(
        self,
        slide_scan_service_start_scan_profile_request: "SlideScanServiceStartScanProfileRequest",
    ) -> "SlideScanServiceStartScanProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_scan_preview(
        self,
        slide_scan_service_stop_scan_preview_request: "SlideScanServiceStopScanPreviewRequest",
    ) -> "SlideScanServiceStopScanPreviewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_scan_profile(
        self,
        slide_scan_service_stop_scan_profile_request: "SlideScanServiceStopScanProfileRequest",
    ) -> "SlideScanServiceStopScanProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_channel_settings(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceGetChannelSettingsRequest, SlideScanServiceGetChannelSettingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_channel_settings(request)
        await stream.send_message(response)

    async def __rpc_get_magazine_state(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceGetMagazineStateRequest, SlideScanServiceGetMagazineStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_magazine_state(request)
        await stream.send_message(response)

    async def __rpc_observe(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceObserveRequest, SlideScanServiceObserveResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.observe,
            stream,
            request,
        )

    async def __rpc_reset_slide_states(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceResetSlideStatesRequest, SlideScanServiceResetSlideStatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reset_slide_states(request)
        await stream.send_message(response)

    async def __rpc_start_scan_preview(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceStartScanPreviewRequest, SlideScanServiceStartScanPreviewResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_scan_preview(request)
        await stream.send_message(response)

    async def __rpc_start_scan_profile(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceStartScanProfileRequest, SlideScanServiceStartScanProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_scan_profile(request)
        await stream.send_message(response)

    async def __rpc_stop_scan_preview(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceStopScanPreviewRequest, SlideScanServiceStopScanPreviewResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_scan_preview(request)
        await stream.send_message(response)

    async def __rpc_stop_scan_profile(
        self,
        stream: "grpclib.server.Stream[SlideScanServiceStopScanProfileRequest, SlideScanServiceStopScanProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_scan_profile(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.slide_scan.v1.SlideScanService/GetChannelSettings": grpclib.const.Handler(
                self.__rpc_get_channel_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceGetChannelSettingsRequest,
                SlideScanServiceGetChannelSettingsResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/GetMagazineState": grpclib.const.Handler(
                self.__rpc_get_magazine_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceGetMagazineStateRequest,
                SlideScanServiceGetMagazineStateResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/Observe": grpclib.const.Handler(
                self.__rpc_observe,
                grpclib.const.Cardinality.UNARY_STREAM,
                SlideScanServiceObserveRequest,
                SlideScanServiceObserveResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/ResetSlideStates": grpclib.const.Handler(
                self.__rpc_reset_slide_states,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceResetSlideStatesRequest,
                SlideScanServiceResetSlideStatesResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/StartScanPreview": grpclib.const.Handler(
                self.__rpc_start_scan_preview,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceStartScanPreviewRequest,
                SlideScanServiceStartScanPreviewResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/StartScanProfile": grpclib.const.Handler(
                self.__rpc_start_scan_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceStartScanProfileRequest,
                SlideScanServiceStartScanProfileResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/StopScanPreview": grpclib.const.Handler(
                self.__rpc_stop_scan_preview,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceStopScanPreviewRequest,
                SlideScanServiceStopScanPreviewResponse,
            ),
            "/zen_api.lm.slide_scan.v1.SlideScanService/StopScanProfile": grpclib.const.Handler(
                self.__rpc_stop_scan_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                SlideScanServiceStopScanProfileRequest,
                SlideScanServiceStopScanProfileResponse,
            ),
        }
