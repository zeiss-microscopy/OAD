# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/workflows/v3beta/job_status.proto, zen_api/workflows/v3beta/job_template_info.proto, zen_api/workflows/v3beta/workflow_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class JobStatus(betterproto.Enum):
    """Enumerates possible job statuses."""

    UNSPECIFIED = 0
    """Default enum value."""

    NOT_LOADED = 1
    """Job template is not loaded."""

    LOADED = 2
    """Job template is loaded."""

    RUNNING = 3
    """Job is running."""

    FINALIZING = 4
    """Finalizing job results after the job was completed successfully."""

    ARCHIVING = 5
    """Archiving job results after they were finalized."""

    COMPLETED = 6
    """Job was completed successfully."""

    ABORTED = 7
    """Job was aborted."""

    CANCELED = 8
    """Job was canceled."""


@dataclass(eq=False, repr=False)
class JobTemplateInfo(betterproto.Message):
    """Contains information about a job template."""

    name: str = betterproto.string_field(1)
    """The job template's name."""

    description: str = betterproto.string_field(2)
    """The job template's description."""

    category: str = betterproto.string_field(3)
    """The job template's category."""

    subcategory: str = betterproto.string_field(4)
    """The job template's subcategory."""


@dataclass(eq=False, repr=False)
class WorkflowServiceGetAvailableJobTemplatesRequest(betterproto.Message):
    """The WorkflowServiceGetAvailableJobTemplatesRequest class."""

    category: str = betterproto.string_field(1)
    """
    Optional filter for job templates. If category is provided then only job templates that are
     in the specified category will be listed.
    """

    subcategory: str = betterproto.string_field(2)
    """
    Optional filter for job templates. If subcategory is provided then only job templates that
     are in the specified subcategory will be listed.
    """


@dataclass(eq=False, repr=False)
class WorkflowServiceGetAvailableJobTemplatesResponse(betterproto.Message):
    """Represents a list of all available job templates."""

    job_templates: List["JobTemplateInfo"] = betterproto.message_field(1)
    """The available job templates."""


@dataclass(eq=False, repr=False)
class WorkflowServiceGetStatusRequest(betterproto.Message):
    """The WorkflowServiceGetStatusRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceGetStatusResponse(betterproto.Message):
    """Response containing the job status."""

    job_status: "JobStatus" = betterproto.enum_field(1)
    """The job status."""


@dataclass(eq=False, repr=False)
class WorkflowServiceIsJobRunningRequest(betterproto.Message):
    """The WorkflowServiceIsJobRunningRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceIsJobRunningResponse(betterproto.Message):
    """
    Response object representing the return value of IsJobRunning() method of the
     Workflow service.
    """

    is_job_running: bool = betterproto.bool_field(1)
    """A value indicating whether the loaded job is currently running."""


@dataclass(eq=False, repr=False)
class WorkflowServiceIsJobTemplateLoadedRequest(betterproto.Message):
    """The WorkflowServiceIsJobTemplateLoadedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceIsJobTemplateLoadedResponse(betterproto.Message):
    """
    Response object representing the return value of IsJobTemplateLoaded() method of the
     Workflow service.
    """

    is_job_template_loaded: bool = betterproto.bool_field(1)
    """A value indicating whether a job template is loaded."""


@dataclass(eq=False, repr=False)
class WorkflowServiceLoadJobTemplateRequest(betterproto.Message):
    """The WorkflowServiceLoadJobTemplateRequest class."""

    job_template_name: str = betterproto.string_field(1)
    """The name of the job template."""

    result_path: str = betterproto.string_field(2)
    """
    Optional parameter for storing the result outside of ZEN archive. If provided the job result
     will be stored in the selected location and will not be uploaded to the archive.
    """


@dataclass(eq=False, repr=False)
class WorkflowServiceLoadJobTemplateResponse(betterproto.Message):
    """The WorkflowServiceLoadJobTemplateResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceRegisterOnStatusChangedRequest(betterproto.Message):
    """The WorkflowServiceRegisterOnStatusChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceRegisterOnStatusChangedResponse(betterproto.Message):
    """Response containing the job status."""

    job_status: "JobStatus" = betterproto.enum_field(1)
    """The job status."""


@dataclass(eq=False, repr=False)
class WorkflowServiceRunJobRequest(betterproto.Message):
    """The WorkflowServiceRunJobRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceRunJobResponse(betterproto.Message):
    """
    Response object representing the return value of RunJob() method of the Workflow service.
    """

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceStartJobRequest(betterproto.Message):
    """The WorkflowServiceStartJobRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceStartJobResponse(betterproto.Message):
    """The WorkflowServiceStartJobResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceStopJobRequest(betterproto.Message):
    """The WorkflowServiceStopJobRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceStopJobResponse(betterproto.Message):
    """
    Response object representing the return value of StopJob() method of the Workflow service.
    """

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceUnloadJobTemplateRequest(betterproto.Message):
    """The WorkflowServiceUnloadJobTemplateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceUnloadJobTemplateResponse(betterproto.Message):
    """The WorkflowServiceUnloadJobTemplateResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceWaitJobRequest(betterproto.Message):
    """The WorkflowServiceWaitJobRequest class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceWaitJobResponse(betterproto.Message):
    """
    Response object representing the return value of WaitJob() method of the Workflow service.
    """

    pass


class WorkflowServiceStub(betterproto.ServiceStub):
    async def get_available_job_templates(
        self,
        workflow_service_get_available_job_templates_request: "WorkflowServiceGetAvailableJobTemplatesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceGetAvailableJobTemplatesResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/GetAvailableJobTemplates",
            workflow_service_get_available_job_templates_request,
            WorkflowServiceGetAvailableJobTemplatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_status(
        self,
        workflow_service_get_status_request: "WorkflowServiceGetStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceGetStatusResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/GetStatus",
            workflow_service_get_status_request,
            WorkflowServiceGetStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_job_running(
        self,
        workflow_service_is_job_running_request: "WorkflowServiceIsJobRunningRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceIsJobRunningResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/IsJobRunning",
            workflow_service_is_job_running_request,
            WorkflowServiceIsJobRunningResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_job_template_loaded(
        self,
        workflow_service_is_job_template_loaded_request: "WorkflowServiceIsJobTemplateLoadedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceIsJobTemplateLoadedResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/IsJobTemplateLoaded",
            workflow_service_is_job_template_loaded_request,
            WorkflowServiceIsJobTemplateLoadedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def load_job_template(
        self,
        workflow_service_load_job_template_request: "WorkflowServiceLoadJobTemplateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceLoadJobTemplateResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/LoadJobTemplate",
            workflow_service_load_job_template_request,
            WorkflowServiceLoadJobTemplateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_status_changed(
        self,
        workflow_service_register_on_status_changed_request: "WorkflowServiceRegisterOnStatusChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[WorkflowServiceRegisterOnStatusChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.workflows.v3beta.WorkflowService/RegisterOnStatusChanged",
            workflow_service_register_on_status_changed_request,
            WorkflowServiceRegisterOnStatusChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def run_job(
        self,
        workflow_service_run_job_request: "WorkflowServiceRunJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceRunJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/RunJob",
            workflow_service_run_job_request,
            WorkflowServiceRunJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_job(
        self,
        workflow_service_start_job_request: "WorkflowServiceStartJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceStartJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/StartJob",
            workflow_service_start_job_request,
            WorkflowServiceStartJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_job(
        self,
        workflow_service_stop_job_request: "WorkflowServiceStopJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceStopJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/StopJob",
            workflow_service_stop_job_request,
            WorkflowServiceStopJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unload_job_template(
        self,
        workflow_service_unload_job_template_request: "WorkflowServiceUnloadJobTemplateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceUnloadJobTemplateResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/UnloadJobTemplate",
            workflow_service_unload_job_template_request,
            WorkflowServiceUnloadJobTemplateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def wait_job(
        self,
        workflow_service_wait_job_request: "WorkflowServiceWaitJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceWaitJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v3beta.WorkflowService/WaitJob",
            workflow_service_wait_job_request,
            WorkflowServiceWaitJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WorkflowServiceBase(ServiceBase):

    async def get_available_job_templates(
        self,
        workflow_service_get_available_job_templates_request: "WorkflowServiceGetAvailableJobTemplatesRequest",
    ) -> "WorkflowServiceGetAvailableJobTemplatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_status(
        self, workflow_service_get_status_request: "WorkflowServiceGetStatusRequest"
    ) -> "WorkflowServiceGetStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_job_running(
        self,
        workflow_service_is_job_running_request: "WorkflowServiceIsJobRunningRequest",
    ) -> "WorkflowServiceIsJobRunningResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_job_template_loaded(
        self,
        workflow_service_is_job_template_loaded_request: "WorkflowServiceIsJobTemplateLoadedRequest",
    ) -> "WorkflowServiceIsJobTemplateLoadedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def load_job_template(
        self,
        workflow_service_load_job_template_request: "WorkflowServiceLoadJobTemplateRequest",
    ) -> "WorkflowServiceLoadJobTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_status_changed(
        self,
        workflow_service_register_on_status_changed_request: "WorkflowServiceRegisterOnStatusChangedRequest",
    ) -> AsyncIterator[WorkflowServiceRegisterOnStatusChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkflowServiceRegisterOnStatusChangedResponse()

    async def run_job(
        self, workflow_service_run_job_request: "WorkflowServiceRunJobRequest"
    ) -> "WorkflowServiceRunJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_job(
        self, workflow_service_start_job_request: "WorkflowServiceStartJobRequest"
    ) -> "WorkflowServiceStartJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_job(
        self, workflow_service_stop_job_request: "WorkflowServiceStopJobRequest"
    ) -> "WorkflowServiceStopJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unload_job_template(
        self,
        workflow_service_unload_job_template_request: "WorkflowServiceUnloadJobTemplateRequest",
    ) -> "WorkflowServiceUnloadJobTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def wait_job(
        self, workflow_service_wait_job_request: "WorkflowServiceWaitJobRequest"
    ) -> "WorkflowServiceWaitJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_available_job_templates(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceGetAvailableJobTemplatesRequest, WorkflowServiceGetAvailableJobTemplatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_job_templates(request)
        await stream.send_message(response)

    async def __rpc_get_status(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceGetStatusRequest, WorkflowServiceGetStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_status(request)
        await stream.send_message(response)

    async def __rpc_is_job_running(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceIsJobRunningRequest, WorkflowServiceIsJobRunningResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_job_running(request)
        await stream.send_message(response)

    async def __rpc_is_job_template_loaded(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceIsJobTemplateLoadedRequest, WorkflowServiceIsJobTemplateLoadedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_job_template_loaded(request)
        await stream.send_message(response)

    async def __rpc_load_job_template(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceLoadJobTemplateRequest, WorkflowServiceLoadJobTemplateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.load_job_template(request)
        await stream.send_message(response)

    async def __rpc_register_on_status_changed(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceRegisterOnStatusChangedRequest, WorkflowServiceRegisterOnStatusChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_status_changed,
            stream,
            request,
        )

    async def __rpc_run_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceRunJobRequest, WorkflowServiceRunJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.run_job(request)
        await stream.send_message(response)

    async def __rpc_start_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceStartJobRequest, WorkflowServiceStartJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_job(request)
        await stream.send_message(response)

    async def __rpc_stop_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceStopJobRequest, WorkflowServiceStopJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_job(request)
        await stream.send_message(response)

    async def __rpc_unload_job_template(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceUnloadJobTemplateRequest, WorkflowServiceUnloadJobTemplateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.unload_job_template(request)
        await stream.send_message(response)

    async def __rpc_wait_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceWaitJobRequest, WorkflowServiceWaitJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.wait_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.workflows.v3beta.WorkflowService/GetAvailableJobTemplates": grpclib.const.Handler(
                self.__rpc_get_available_job_templates,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceGetAvailableJobTemplatesRequest,
                WorkflowServiceGetAvailableJobTemplatesResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/GetStatus": grpclib.const.Handler(
                self.__rpc_get_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceGetStatusRequest,
                WorkflowServiceGetStatusResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/IsJobRunning": grpclib.const.Handler(
                self.__rpc_is_job_running,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceIsJobRunningRequest,
                WorkflowServiceIsJobRunningResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/IsJobTemplateLoaded": grpclib.const.Handler(
                self.__rpc_is_job_template_loaded,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceIsJobTemplateLoadedRequest,
                WorkflowServiceIsJobTemplateLoadedResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/LoadJobTemplate": grpclib.const.Handler(
                self.__rpc_load_job_template,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceLoadJobTemplateRequest,
                WorkflowServiceLoadJobTemplateResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/RegisterOnStatusChanged": grpclib.const.Handler(
                self.__rpc_register_on_status_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkflowServiceRegisterOnStatusChangedRequest,
                WorkflowServiceRegisterOnStatusChangedResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/RunJob": grpclib.const.Handler(
                self.__rpc_run_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceRunJobRequest,
                WorkflowServiceRunJobResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/StartJob": grpclib.const.Handler(
                self.__rpc_start_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceStartJobRequest,
                WorkflowServiceStartJobResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/StopJob": grpclib.const.Handler(
                self.__rpc_stop_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceStopJobRequest,
                WorkflowServiceStopJobResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/UnloadJobTemplate": grpclib.const.Handler(
                self.__rpc_unload_job_template,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceUnloadJobTemplateRequest,
                WorkflowServiceUnloadJobTemplateResponse,
            ),
            "/zen_api.workflows.v3beta.WorkflowService/WaitJob": grpclib.const.Handler(
                self.__rpc_wait_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceWaitJobRequest,
                WorkflowServiceWaitJobResponse,
            ),
        }
