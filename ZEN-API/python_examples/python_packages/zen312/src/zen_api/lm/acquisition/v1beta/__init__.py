# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/lm/acquisition/v1beta/autofocus_contrast_measure.proto, zen_api/lm/acquisition/v1beta/autofocus_mode.proto, zen_api/lm/acquisition/v1beta/autofocus_sampling.proto, zen_api/lm/acquisition/v1beta/channel_info.proto, zen_api/lm/acquisition/v1beta/experiment_sw_autofocus_service.proto, zen_api/lm/acquisition/v1beta/position3d.proto, zen_api/lm/acquisition/v1beta/tiles_service.proto, zen_api/lm/acquisition/v1beta/track_info.proto, zen_api/lm/acquisition/v1beta/track_service.proto, zen_api/lm/acquisition/v1beta/zstack_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....common import v1 as ___common_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AutofocusContrastMeasure(betterproto.Enum):
    """The contrast measures of the software autofocus contrast mode."""

    UNSPECIFIED = 0
    """Default enum value."""

    DEFAULT = 1
    """The default contrast measure."""

    LOW_SIGNAL = 2
    """
    The contrast measure to use in low-signal and calibration situations.
    """


class AutofocusMode(betterproto.Enum):
    """The autofocus modes."""

    UNSPECIFIED = 0
    """Default enum value."""

    CONTRAST = 1
    """Sharpness is measured on the basis of contrast values."""

    INTENSITY = 2
    """Sharpness is measured on the basis of intensity values."""

    AUTO = 3
    """
    Automatic determination of measure method (Contrast or Intensity) in dependency of used hardware.
    """

    REFLEX = 4
    """Sharpness is measured with the reflection mode autofocus."""


class AutofocusSampling(betterproto.Enum):
    """Scales the depth of focus by predefined values given here."""

    UNSPECIFIED = 0
    """Default enum value."""

    FINE = 1
    """Do oversampling."""

    DEFAULT = 2
    """Do sampling according to depth of focus."""

    MEDIUM = 3
    """Do under sampling."""

    COARSE = 4
    """Coarser than medium."""


@dataclass(eq=False, repr=False)
class ChannelInfo(betterproto.Message):
    """Information about a channel."""

    name: str = betterproto.string_field(1)
    """The channel name."""

    is_activated: bool = betterproto.bool_field(2)
    """A value indicating whether the channel is activated."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceExportRequest(betterproto.Message):
    """The ExperimentSwAutofocusServiceExportRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment id."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceExportResponse(betterproto.Message):
    """Response object representing the values of xml string."""

    xml_string: str = betterproto.string_field(1)
    """A value of the xml string."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceFindAutoFocusRequest(betterproto.Message):
    """The ExperimentSwAutofocusServiceFindAutoFocusRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment id."""

    timeout: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """The timeout in seconds."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceFindAutoFocusResponse(betterproto.Message):
    """Response object representing the focus position."""

    focus_position: float = betterproto.double_field(1)
    """The focus position (unit: m)."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceGetAutofocusParametersRequest(betterproto.Message):
    """The ExperimentSwAutofocusServiceGetAutofocusParametersRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment id."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceGetAutofocusParametersResponse(betterproto.Message):
    """
    Response object representing the values of software autofocus parameters for the experiment.
    """

    experiment_id: str = betterproto.string_field(1)
    """A value of the experiment id."""

    auto_focus_mode: "AutofocusMode" = betterproto.enum_field(2)
    """A value of autofocus mode."""

    contrast_measure: "AutofocusContrastMeasure" = betterproto.enum_field(3)
    """A value of sharpness measure for contrast mode."""

    search_strategy: str = betterproto.string_field(4)
    """
    A value of search strategy.
     Either "Smart", "Full", "FullNoChecks" or the name of an extension strategy.
    """

    autofocus_sampling: "AutofocusSampling" = betterproto.enum_field(5)
    """A value of the predefined step size."""

    offset: float = betterproto.double_field(6)
    """A value of the reflection mode offset (unit: m)."""

    use_acquisition_roi: bool = betterproto.bool_field(7)
    """
    A value indicating whether the acquisition ROI
     is used for the software autofocus.
    """

    reference_channel_name: str = betterproto.string_field(8)
    """A name of the focus reference channel."""

    relative_range_is_automatic: bool = betterproto.bool_field(9)
    """
    A value indicating whether the relative search range size is
     determined automatically.
    """

    relative_search_range: float = betterproto.double_field(10)
    """A value of the relative search range of the Z drive (unit: m)."""

    lower_limit: float = betterproto.double_field(11)
    """A value of the lower search range limit of the Z drive (unit: m)."""

    upper_limit: float = betterproto.double_field(12)
    """A value of the upper search range limit of the Z drive (unit: m)."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceImportRequest(betterproto.Message):
    """The ExperimentSwAutofocusServiceImportRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment id."""

    xml_string: str = betterproto.string_field(2)
    """Xml string to be imported."""


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceImportResponse(betterproto.Message):
    """The ExperimentSwAutofocusServiceImportResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceSetAutofocusParametersRequest(betterproto.Message):
    """The ExperimentSwAutofocusServiceSetAutofocusParametersRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment id."""

    autofocus_mode: "AutofocusMode" = betterproto.enum_field(2)
    """The autofocus mode."""

    contrast_measure: "AutofocusContrastMeasure" = betterproto.enum_field(3)
    """The sharpness measure for contrast mode."""

    search_strategy: str = betterproto.string_field(4)
    """
    The strategy, either "Smart", "Full", "FullNoChecks" or the name of an extension
     strategy, or null to leave unmodified. This parameter is case-insensitive.
    """

    autofocus_sampling: "AutofocusSampling" = betterproto.enum_field(5)
    """The predefined step size, or null to leave unmodified."""

    offset: Optional[float] = betterproto.message_field(
        6, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The reflection mode offset (unit: m), or null to
     leave unmodified.
    """

    use_acquisition_roi: Optional[bool] = betterproto.message_field(
        7, wraps=betterproto.TYPE_BOOL
    )
    """
    True if the acquisition ROI is used for the
     software autofocus; otherwise, false, or null to leave unmodified.
    """

    reference_channel_name: str = betterproto.string_field(8)
    """
    The case-insensitive name of the focus reference channel,
     or null to leave unmodified.
    """

    relative_range_is_automatic: Optional[bool] = betterproto.message_field(
        9, wraps=betterproto.TYPE_BOOL
    )
    """
    True if the relative search range size is
     determined automatically; otherwise, false, or null to leave unmodified.
    """

    relative_search_range: Optional[float] = betterproto.message_field(
        10, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The relative search range in units of the Z drive (unit: m),
     or null to leave unmodified.
    """

    lower_limit: Optional[float] = betterproto.message_field(
        11, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The lower search range limit in units of the Z drive (unit: m),
     or null to leave unmodified.
    """

    upper_limit: Optional[float] = betterproto.message_field(
        12, wraps=betterproto.TYPE_DOUBLE
    )
    """
    The upper limit in units of the Z drive (unit: m),
     or null to leave unmodified.
    """


@dataclass(eq=False, repr=False)
class ExperimentSwAutofocusServiceSetAutofocusParametersResponse(betterproto.Message):
    """
    The ExperimentSwAutofocusServiceSetAutofocusParametersResponse class.
    """

    pass


@dataclass(eq=False, repr=False)
class Position3D(betterproto.Message):
    """A position in three dimensions (XYZ)."""

    x: float = betterproto.double_field(1)
    """The X position (unit: m)."""

    y: float = betterproto.double_field(2)
    """The Y position (unit: m)."""

    z: float = betterproto.double_field(3)
    """The Z position (unit: m)."""


@dataclass(eq=False, repr=False)
class TilesServiceAddEllipseTileRegionRequest(betterproto.Message):
    """The TilesServiceAddEllipseTileRegionRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""

    center_x: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """The center x position of the tile region to be added (unit: m)."""

    center_y: Optional[float] = betterproto.message_field(
        3, wraps=betterproto.TYPE_DOUBLE
    )
    """The center y position of the tile region to be added (unit: m)."""

    width: Optional[float] = betterproto.message_field(4, wraps=betterproto.TYPE_DOUBLE)
    """The width of the tile region to be added (unit: m)."""

    height: Optional[float] = betterproto.message_field(
        5, wraps=betterproto.TYPE_DOUBLE
    )
    """The height of the tile region to be added (unit: m)."""

    z: Optional[float] = betterproto.message_field(6, wraps=betterproto.TYPE_DOUBLE)
    """The z position of the tile region to be added (unit: m)."""


@dataclass(eq=False, repr=False)
class TilesServiceAddEllipseTileRegionResponse(betterproto.Message):
    """The TilesServiceAddEllipseTileRegionResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TilesServiceAddPolygonTileRegionRequest(betterproto.Message):
    """The TilesServiceAddPolygonTileRegionRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""

    polygon_points: List["___common_v1__.DoublePoint"] = betterproto.message_field(2)
    """
    The list of points which define the polygon.
     This list has to contain at least one point (unit: m).
    """

    z: Optional[float] = betterproto.message_field(3, wraps=betterproto.TYPE_DOUBLE)
    """The z position of the tile region to be added (unit: m)."""


@dataclass(eq=False, repr=False)
class TilesServiceAddPolygonTileRegionResponse(betterproto.Message):
    """The TilesServiceAddPolygonTileRegionResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TilesServiceAddPositionsRequest(betterproto.Message):
    """The TilesServiceAddPositionsRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""

    positions: List["Position3D"] = betterproto.message_field(2)
    """The positions to be added."""


@dataclass(eq=False, repr=False)
class TilesServiceAddPositionsResponse(betterproto.Message):
    """The TilesServiceAddPositionsResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TilesServiceAddRectangleTileRegionRequest(betterproto.Message):
    """The TilesServiceAddRectangleTileRegionRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""

    center_x: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """The center x position of the tile region to be added (unit: m)."""

    center_y: Optional[float] = betterproto.message_field(
        3, wraps=betterproto.TYPE_DOUBLE
    )
    """The center y position of the tile region to be added (unit: m)."""

    width: Optional[float] = betterproto.message_field(4, wraps=betterproto.TYPE_DOUBLE)
    """The width of the tile region to be added (unit: m)."""

    height: Optional[float] = betterproto.message_field(
        5, wraps=betterproto.TYPE_DOUBLE
    )
    """The height of the tile region to be added (unit: m)."""

    z: Optional[float] = betterproto.message_field(6, wraps=betterproto.TYPE_DOUBLE)
    """The z position of the tile region to be added (unit: m)."""


@dataclass(eq=False, repr=False)
class TilesServiceAddRectangleTileRegionResponse(betterproto.Message):
    """The TilesServiceAddRectangleTileRegionResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TilesServiceClearRequest(betterproto.Message):
    """The TilesServiceClearRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""


@dataclass(eq=False, repr=False)
class TilesServiceClearResponse(betterproto.Message):
    """The TilesServiceClearResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TilesServiceIsTilesExperimentRequest(betterproto.Message):
    """The TilesServiceIsTilesExperimentRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""


@dataclass(eq=False, repr=False)
class TilesServiceIsTilesExperimentResponse(betterproto.Message):
    """
    Response object representing the value of IsTiles for the experiment.
    """

    is_tiles_experiment: bool = betterproto.bool_field(1)
    """A value indicating whether the experiment is a tiles experiment."""


@dataclass(eq=False, repr=False)
class TrackInfo(betterproto.Message):
    """Information about a track."""

    is_activated: bool = betterproto.bool_field(1)
    """A value indicating whether the track is activated."""

    channels: List["ChannelInfo"] = betterproto.message_field(2)
    """The info for all channels in the track."""


@dataclass(eq=False, repr=False)
class TrackServiceActivateChannelRequest(betterproto.Message):
    """The TrackServiceActivateChannelRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""

    track_index: int = betterproto.int32_field(2)
    """An index of a track."""

    channel_index: int = betterproto.int32_field(3)
    """An index of a channel in the track to be activated."""


@dataclass(eq=False, repr=False)
class TrackServiceActivateChannelResponse(betterproto.Message):
    """The TrackServiceActivateChannelResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TrackServiceActivateTrackRequest(betterproto.Message):
    """The TrackServiceActivateTrackRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""

    track_index: int = betterproto.int32_field(2)
    """An index of a track to be activated."""


@dataclass(eq=False, repr=False)
class TrackServiceActivateTrackResponse(betterproto.Message):
    """The TrackServiceActivateTrackResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TrackServiceDeactivateChannelRequest(betterproto.Message):
    """The TrackServiceDeactivateChannelRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""

    track_index: int = betterproto.int32_field(2)
    """An index of a track."""

    channel_index: int = betterproto.int32_field(3)
    """An index of a channel in the track to be deactivated."""


@dataclass(eq=False, repr=False)
class TrackServiceDeactivateChannelResponse(betterproto.Message):
    """The TrackServiceDeactivateChannelResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TrackServiceDeactivateTrackRequest(betterproto.Message):
    """The TrackServiceDeactivateTrackRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""

    track_index: int = betterproto.int32_field(2)
    """An index of a track to be deactivated."""


@dataclass(eq=False, repr=False)
class TrackServiceDeactivateTrackResponse(betterproto.Message):
    """The TrackServiceDeactivateTrackResponse class."""

    pass


@dataclass(eq=False, repr=False)
class TrackServiceGetTrackInfoRequest(betterproto.Message):
    """The TrackServiceGetTrackInfoRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """Experiment id."""


@dataclass(eq=False, repr=False)
class TrackServiceGetTrackInfoResponse(betterproto.Message):
    """Response object representing the value of track information."""

    track_info: List["TrackInfo"] = betterproto.message_field(1)
    """The track information."""


@dataclass(eq=False, repr=False)
class ZStackServiceGetZStackInfoRequest(betterproto.Message):
    """The ZStackServiceGetZStackInfoRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""


@dataclass(eq=False, repr=False)
class ZStackServiceGetZStackInfoResponse(betterproto.Message):
    """
    Response object representing the value of GetZStackInfo for the experiment.
    """

    interval: float = betterproto.double_field(1)
    """The value of the interval between 2 slices (unit: m)."""

    first_slice: float = betterproto.double_field(2)
    """The position of the first slice in Z-stack (unit: m)."""

    last_slice: float = betterproto.double_field(3)
    """The position of the last slice in Z-stack (unit: m)."""

    range: float = betterproto.double_field(5)
    """The distance between the first and last slice (unit: m)."""

    num_slices: int = betterproto.int32_field(6)
    """The number of slices."""

    is_center_mode: bool = betterproto.bool_field(7)
    """A value indicating whether the Z-stack is in center mode."""

    offset: float = betterproto.double_field(8)
    """The value of the offset which is applied to the whole Z-stack."""


@dataclass(eq=False, repr=False)
class ZStackServiceIsZStackExperimentRequest(betterproto.Message):
    """The ZStackServiceIsZStackExperimentRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""


@dataclass(eq=False, repr=False)
class ZStackServiceIsZStackExperimentResponse(betterproto.Message):
    """
    Response object representing the value of IsZStackExperiment for the experiment.
    """

    is_zstack_experiment: bool = betterproto.bool_field(1)
    """A value indicating whether the experiment is a Z-Stack experiment."""


@dataclass(eq=False, repr=False)
class ZStackServiceModifyZStackCenterRangeRequest(betterproto.Message):
    """The ZStackServiceModifyZStackCenterRangeRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""

    center: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """The center position between the first and last slice (unit: m)."""

    interval: Optional[float] = betterproto.message_field(
        3, wraps=betterproto.TYPE_DOUBLE
    )
    """The interval between 2 slices (unit: m)."""

    range: Optional[float] = betterproto.message_field(4, wraps=betterproto.TYPE_DOUBLE)
    """Distance between the first and last slice (unit: m)."""


@dataclass(eq=False, repr=False)
class ZStackServiceModifyZStackCenterRangeResponse(betterproto.Message):
    """The ZStackServiceModifyZStackCenterRangeResponse class."""

    pass


@dataclass(eq=False, repr=False)
class ZStackServiceModifyZStackFirstLastRequest(betterproto.Message):
    """The ZStackServiceModifyZStackFirstLastRequest class."""

    experiment_id: str = betterproto.string_field(1)
    """The experiment Id."""

    first: Optional[float] = betterproto.message_field(2, wraps=betterproto.TYPE_DOUBLE)
    """Position of the first slice in Z-stack (unit: m)."""

    last: Optional[float] = betterproto.message_field(3, wraps=betterproto.TYPE_DOUBLE)
    """Position of the last slice in Z-stack (unit: m)."""

    interval: Optional[float] = betterproto.message_field(
        4, wraps=betterproto.TYPE_DOUBLE
    )
    """The interval between 2 slices (unit: m)."""


@dataclass(eq=False, repr=False)
class ZStackServiceModifyZStackFirstLastResponse(betterproto.Message):
    """The ZStackServiceModifyZStackFirstLastResponse class."""

    pass


class ExperimentSwAutofocusServiceStub(betterproto.ServiceStub):
    async def export(
        self,
        experiment_sw_autofocus_service_export_request: "ExperimentSwAutofocusServiceExportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExperimentSwAutofocusServiceExportResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/Export",
            experiment_sw_autofocus_service_export_request,
            ExperimentSwAutofocusServiceExportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def find_auto_focus(
        self,
        experiment_sw_autofocus_service_find_auto_focus_request: "ExperimentSwAutofocusServiceFindAutoFocusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExperimentSwAutofocusServiceFindAutoFocusResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/FindAutoFocus",
            experiment_sw_autofocus_service_find_auto_focus_request,
            ExperimentSwAutofocusServiceFindAutoFocusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_autofocus_parameters(
        self,
        experiment_sw_autofocus_service_get_autofocus_parameters_request: "ExperimentSwAutofocusServiceGetAutofocusParametersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExperimentSwAutofocusServiceGetAutofocusParametersResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/GetAutofocusParameters",
            experiment_sw_autofocus_service_get_autofocus_parameters_request,
            ExperimentSwAutofocusServiceGetAutofocusParametersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def import_(
        self,
        experiment_sw_autofocus_service_import_request: "ExperimentSwAutofocusServiceImportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExperimentSwAutofocusServiceImportResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/Import",
            experiment_sw_autofocus_service_import_request,
            ExperimentSwAutofocusServiceImportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_autofocus_parameters(
        self,
        experiment_sw_autofocus_service_set_autofocus_parameters_request: "ExperimentSwAutofocusServiceSetAutofocusParametersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExperimentSwAutofocusServiceSetAutofocusParametersResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/SetAutofocusParameters",
            experiment_sw_autofocus_service_set_autofocus_parameters_request,
            ExperimentSwAutofocusServiceSetAutofocusParametersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TilesServiceStub(betterproto.ServiceStub):
    async def add_ellipse_tile_region(
        self,
        tiles_service_add_ellipse_tile_region_request: "TilesServiceAddEllipseTileRegionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceAddEllipseTileRegionResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/AddEllipseTileRegion",
            tiles_service_add_ellipse_tile_region_request,
            TilesServiceAddEllipseTileRegionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_polygon_tile_region(
        self,
        tiles_service_add_polygon_tile_region_request: "TilesServiceAddPolygonTileRegionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceAddPolygonTileRegionResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/AddPolygonTileRegion",
            tiles_service_add_polygon_tile_region_request,
            TilesServiceAddPolygonTileRegionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_positions(
        self,
        tiles_service_add_positions_request: "TilesServiceAddPositionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceAddPositionsResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/AddPositions",
            tiles_service_add_positions_request,
            TilesServiceAddPositionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_rectangle_tile_region(
        self,
        tiles_service_add_rectangle_tile_region_request: "TilesServiceAddRectangleTileRegionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceAddRectangleTileRegionResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/AddRectangleTileRegion",
            tiles_service_add_rectangle_tile_region_request,
            TilesServiceAddRectangleTileRegionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear(
        self,
        tiles_service_clear_request: "TilesServiceClearRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceClearResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/Clear",
            tiles_service_clear_request,
            TilesServiceClearResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_tiles_experiment(
        self,
        tiles_service_is_tiles_experiment_request: "TilesServiceIsTilesExperimentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TilesServiceIsTilesExperimentResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TilesService/IsTilesExperiment",
            tiles_service_is_tiles_experiment_request,
            TilesServiceIsTilesExperimentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TrackServiceStub(betterproto.ServiceStub):
    async def activate_channel(
        self,
        track_service_activate_channel_request: "TrackServiceActivateChannelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TrackServiceActivateChannelResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TrackService/ActivateChannel",
            track_service_activate_channel_request,
            TrackServiceActivateChannelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def activate_track(
        self,
        track_service_activate_track_request: "TrackServiceActivateTrackRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TrackServiceActivateTrackResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TrackService/ActivateTrack",
            track_service_activate_track_request,
            TrackServiceActivateTrackResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deactivate_channel(
        self,
        track_service_deactivate_channel_request: "TrackServiceDeactivateChannelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TrackServiceDeactivateChannelResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TrackService/DeactivateChannel",
            track_service_deactivate_channel_request,
            TrackServiceDeactivateChannelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deactivate_track(
        self,
        track_service_deactivate_track_request: "TrackServiceDeactivateTrackRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TrackServiceDeactivateTrackResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TrackService/DeactivateTrack",
            track_service_deactivate_track_request,
            TrackServiceDeactivateTrackResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_track_info(
        self,
        track_service_get_track_info_request: "TrackServiceGetTrackInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TrackServiceGetTrackInfoResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.TrackService/GetTrackInfo",
            track_service_get_track_info_request,
            TrackServiceGetTrackInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ZStackServiceStub(betterproto.ServiceStub):
    async def get_z_stack_info(
        self,
        z_stack_service_get_z_stack_info_request: "ZStackServiceGetZStackInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ZStackServiceGetZStackInfoResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ZStackService/GetZStackInfo",
            z_stack_service_get_z_stack_info_request,
            ZStackServiceGetZStackInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_z_stack_experiment(
        self,
        z_stack_service_is_z_stack_experiment_request: "ZStackServiceIsZStackExperimentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ZStackServiceIsZStackExperimentResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ZStackService/IsZStackExperiment",
            z_stack_service_is_z_stack_experiment_request,
            ZStackServiceIsZStackExperimentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_z_stack_center_range(
        self,
        z_stack_service_modify_z_stack_center_range_request: "ZStackServiceModifyZStackCenterRangeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ZStackServiceModifyZStackCenterRangeResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ZStackService/ModifyZStackCenterRange",
            z_stack_service_modify_z_stack_center_range_request,
            ZStackServiceModifyZStackCenterRangeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_z_stack_first_last(
        self,
        z_stack_service_modify_z_stack_first_last_request: "ZStackServiceModifyZStackFirstLastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ZStackServiceModifyZStackFirstLastResponse":
        return await self._unary_unary(
            "/zen_api.lm.acquisition.v1beta.ZStackService/ModifyZStackFirstLast",
            z_stack_service_modify_z_stack_first_last_request,
            ZStackServiceModifyZStackFirstLastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ExperimentSwAutofocusServiceBase(ServiceBase):

    async def export(
        self,
        experiment_sw_autofocus_service_export_request: "ExperimentSwAutofocusServiceExportRequest",
    ) -> "ExperimentSwAutofocusServiceExportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def find_auto_focus(
        self,
        experiment_sw_autofocus_service_find_auto_focus_request: "ExperimentSwAutofocusServiceFindAutoFocusRequest",
    ) -> "ExperimentSwAutofocusServiceFindAutoFocusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_autofocus_parameters(
        self,
        experiment_sw_autofocus_service_get_autofocus_parameters_request: "ExperimentSwAutofocusServiceGetAutofocusParametersRequest",
    ) -> "ExperimentSwAutofocusServiceGetAutofocusParametersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def import_(
        self,
        experiment_sw_autofocus_service_import_request: "ExperimentSwAutofocusServiceImportRequest",
    ) -> "ExperimentSwAutofocusServiceImportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_autofocus_parameters(
        self,
        experiment_sw_autofocus_service_set_autofocus_parameters_request: "ExperimentSwAutofocusServiceSetAutofocusParametersRequest",
    ) -> "ExperimentSwAutofocusServiceSetAutofocusParametersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_export(
        self,
        stream: "grpclib.server.Stream[ExperimentSwAutofocusServiceExportRequest, ExperimentSwAutofocusServiceExportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.export(request)
        await stream.send_message(response)

    async def __rpc_find_auto_focus(
        self,
        stream: "grpclib.server.Stream[ExperimentSwAutofocusServiceFindAutoFocusRequest, ExperimentSwAutofocusServiceFindAutoFocusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.find_auto_focus(request)
        await stream.send_message(response)

    async def __rpc_get_autofocus_parameters(
        self,
        stream: "grpclib.server.Stream[ExperimentSwAutofocusServiceGetAutofocusParametersRequest, ExperimentSwAutofocusServiceGetAutofocusParametersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_autofocus_parameters(request)
        await stream.send_message(response)

    async def __rpc_import_(
        self,
        stream: "grpclib.server.Stream[ExperimentSwAutofocusServiceImportRequest, ExperimentSwAutofocusServiceImportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.import_(request)
        await stream.send_message(response)

    async def __rpc_set_autofocus_parameters(
        self,
        stream: "grpclib.server.Stream[ExperimentSwAutofocusServiceSetAutofocusParametersRequest, ExperimentSwAutofocusServiceSetAutofocusParametersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_autofocus_parameters(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/Export": grpclib.const.Handler(
                self.__rpc_export,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExperimentSwAutofocusServiceExportRequest,
                ExperimentSwAutofocusServiceExportResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/FindAutoFocus": grpclib.const.Handler(
                self.__rpc_find_auto_focus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExperimentSwAutofocusServiceFindAutoFocusRequest,
                ExperimentSwAutofocusServiceFindAutoFocusResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/GetAutofocusParameters": grpclib.const.Handler(
                self.__rpc_get_autofocus_parameters,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExperimentSwAutofocusServiceGetAutofocusParametersRequest,
                ExperimentSwAutofocusServiceGetAutofocusParametersResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/Import": grpclib.const.Handler(
                self.__rpc_import_,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExperimentSwAutofocusServiceImportRequest,
                ExperimentSwAutofocusServiceImportResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ExperimentSwAutofocusService/SetAutofocusParameters": grpclib.const.Handler(
                self.__rpc_set_autofocus_parameters,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExperimentSwAutofocusServiceSetAutofocusParametersRequest,
                ExperimentSwAutofocusServiceSetAutofocusParametersResponse,
            ),
        }


class TilesServiceBase(ServiceBase):

    async def add_ellipse_tile_region(
        self,
        tiles_service_add_ellipse_tile_region_request: "TilesServiceAddEllipseTileRegionRequest",
    ) -> "TilesServiceAddEllipseTileRegionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_polygon_tile_region(
        self,
        tiles_service_add_polygon_tile_region_request: "TilesServiceAddPolygonTileRegionRequest",
    ) -> "TilesServiceAddPolygonTileRegionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_positions(
        self, tiles_service_add_positions_request: "TilesServiceAddPositionsRequest"
    ) -> "TilesServiceAddPositionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_rectangle_tile_region(
        self,
        tiles_service_add_rectangle_tile_region_request: "TilesServiceAddRectangleTileRegionRequest",
    ) -> "TilesServiceAddRectangleTileRegionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear(
        self, tiles_service_clear_request: "TilesServiceClearRequest"
    ) -> "TilesServiceClearResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_tiles_experiment(
        self,
        tiles_service_is_tiles_experiment_request: "TilesServiceIsTilesExperimentRequest",
    ) -> "TilesServiceIsTilesExperimentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_ellipse_tile_region(
        self,
        stream: "grpclib.server.Stream[TilesServiceAddEllipseTileRegionRequest, TilesServiceAddEllipseTileRegionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_ellipse_tile_region(request)
        await stream.send_message(response)

    async def __rpc_add_polygon_tile_region(
        self,
        stream: "grpclib.server.Stream[TilesServiceAddPolygonTileRegionRequest, TilesServiceAddPolygonTileRegionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_polygon_tile_region(request)
        await stream.send_message(response)

    async def __rpc_add_positions(
        self,
        stream: "grpclib.server.Stream[TilesServiceAddPositionsRequest, TilesServiceAddPositionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_positions(request)
        await stream.send_message(response)

    async def __rpc_add_rectangle_tile_region(
        self,
        stream: "grpclib.server.Stream[TilesServiceAddRectangleTileRegionRequest, TilesServiceAddRectangleTileRegionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_rectangle_tile_region(request)
        await stream.send_message(response)

    async def __rpc_clear(
        self,
        stream: "grpclib.server.Stream[TilesServiceClearRequest, TilesServiceClearResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear(request)
        await stream.send_message(response)

    async def __rpc_is_tiles_experiment(
        self,
        stream: "grpclib.server.Stream[TilesServiceIsTilesExperimentRequest, TilesServiceIsTilesExperimentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_tiles_experiment(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.acquisition.v1beta.TilesService/AddEllipseTileRegion": grpclib.const.Handler(
                self.__rpc_add_ellipse_tile_region,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceAddEllipseTileRegionRequest,
                TilesServiceAddEllipseTileRegionResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TilesService/AddPolygonTileRegion": grpclib.const.Handler(
                self.__rpc_add_polygon_tile_region,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceAddPolygonTileRegionRequest,
                TilesServiceAddPolygonTileRegionResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TilesService/AddPositions": grpclib.const.Handler(
                self.__rpc_add_positions,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceAddPositionsRequest,
                TilesServiceAddPositionsResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TilesService/AddRectangleTileRegion": grpclib.const.Handler(
                self.__rpc_add_rectangle_tile_region,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceAddRectangleTileRegionRequest,
                TilesServiceAddRectangleTileRegionResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TilesService/Clear": grpclib.const.Handler(
                self.__rpc_clear,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceClearRequest,
                TilesServiceClearResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TilesService/IsTilesExperiment": grpclib.const.Handler(
                self.__rpc_is_tiles_experiment,
                grpclib.const.Cardinality.UNARY_UNARY,
                TilesServiceIsTilesExperimentRequest,
                TilesServiceIsTilesExperimentResponse,
            ),
        }


class TrackServiceBase(ServiceBase):

    async def activate_channel(
        self,
        track_service_activate_channel_request: "TrackServiceActivateChannelRequest",
    ) -> "TrackServiceActivateChannelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def activate_track(
        self, track_service_activate_track_request: "TrackServiceActivateTrackRequest"
    ) -> "TrackServiceActivateTrackResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deactivate_channel(
        self,
        track_service_deactivate_channel_request: "TrackServiceDeactivateChannelRequest",
    ) -> "TrackServiceDeactivateChannelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deactivate_track(
        self,
        track_service_deactivate_track_request: "TrackServiceDeactivateTrackRequest",
    ) -> "TrackServiceDeactivateTrackResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_track_info(
        self, track_service_get_track_info_request: "TrackServiceGetTrackInfoRequest"
    ) -> "TrackServiceGetTrackInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_activate_channel(
        self,
        stream: "grpclib.server.Stream[TrackServiceActivateChannelRequest, TrackServiceActivateChannelResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.activate_channel(request)
        await stream.send_message(response)

    async def __rpc_activate_track(
        self,
        stream: "grpclib.server.Stream[TrackServiceActivateTrackRequest, TrackServiceActivateTrackResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.activate_track(request)
        await stream.send_message(response)

    async def __rpc_deactivate_channel(
        self,
        stream: "grpclib.server.Stream[TrackServiceDeactivateChannelRequest, TrackServiceDeactivateChannelResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deactivate_channel(request)
        await stream.send_message(response)

    async def __rpc_deactivate_track(
        self,
        stream: "grpclib.server.Stream[TrackServiceDeactivateTrackRequest, TrackServiceDeactivateTrackResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deactivate_track(request)
        await stream.send_message(response)

    async def __rpc_get_track_info(
        self,
        stream: "grpclib.server.Stream[TrackServiceGetTrackInfoRequest, TrackServiceGetTrackInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_track_info(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.acquisition.v1beta.TrackService/ActivateChannel": grpclib.const.Handler(
                self.__rpc_activate_channel,
                grpclib.const.Cardinality.UNARY_UNARY,
                TrackServiceActivateChannelRequest,
                TrackServiceActivateChannelResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TrackService/ActivateTrack": grpclib.const.Handler(
                self.__rpc_activate_track,
                grpclib.const.Cardinality.UNARY_UNARY,
                TrackServiceActivateTrackRequest,
                TrackServiceActivateTrackResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TrackService/DeactivateChannel": grpclib.const.Handler(
                self.__rpc_deactivate_channel,
                grpclib.const.Cardinality.UNARY_UNARY,
                TrackServiceDeactivateChannelRequest,
                TrackServiceDeactivateChannelResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TrackService/DeactivateTrack": grpclib.const.Handler(
                self.__rpc_deactivate_track,
                grpclib.const.Cardinality.UNARY_UNARY,
                TrackServiceDeactivateTrackRequest,
                TrackServiceDeactivateTrackResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.TrackService/GetTrackInfo": grpclib.const.Handler(
                self.__rpc_get_track_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                TrackServiceGetTrackInfoRequest,
                TrackServiceGetTrackInfoResponse,
            ),
        }


class ZStackServiceBase(ServiceBase):

    async def get_z_stack_info(
        self,
        z_stack_service_get_z_stack_info_request: "ZStackServiceGetZStackInfoRequest",
    ) -> "ZStackServiceGetZStackInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_z_stack_experiment(
        self,
        z_stack_service_is_z_stack_experiment_request: "ZStackServiceIsZStackExperimentRequest",
    ) -> "ZStackServiceIsZStackExperimentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_z_stack_center_range(
        self,
        z_stack_service_modify_z_stack_center_range_request: "ZStackServiceModifyZStackCenterRangeRequest",
    ) -> "ZStackServiceModifyZStackCenterRangeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_z_stack_first_last(
        self,
        z_stack_service_modify_z_stack_first_last_request: "ZStackServiceModifyZStackFirstLastRequest",
    ) -> "ZStackServiceModifyZStackFirstLastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_z_stack_info(
        self,
        stream: "grpclib.server.Stream[ZStackServiceGetZStackInfoRequest, ZStackServiceGetZStackInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_z_stack_info(request)
        await stream.send_message(response)

    async def __rpc_is_z_stack_experiment(
        self,
        stream: "grpclib.server.Stream[ZStackServiceIsZStackExperimentRequest, ZStackServiceIsZStackExperimentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_z_stack_experiment(request)
        await stream.send_message(response)

    async def __rpc_modify_z_stack_center_range(
        self,
        stream: "grpclib.server.Stream[ZStackServiceModifyZStackCenterRangeRequest, ZStackServiceModifyZStackCenterRangeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_z_stack_center_range(request)
        await stream.send_message(response)

    async def __rpc_modify_z_stack_first_last(
        self,
        stream: "grpclib.server.Stream[ZStackServiceModifyZStackFirstLastRequest, ZStackServiceModifyZStackFirstLastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_z_stack_first_last(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.acquisition.v1beta.ZStackService/GetZStackInfo": grpclib.const.Handler(
                self.__rpc_get_z_stack_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ZStackServiceGetZStackInfoRequest,
                ZStackServiceGetZStackInfoResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ZStackService/IsZStackExperiment": grpclib.const.Handler(
                self.__rpc_is_z_stack_experiment,
                grpclib.const.Cardinality.UNARY_UNARY,
                ZStackServiceIsZStackExperimentRequest,
                ZStackServiceIsZStackExperimentResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ZStackService/ModifyZStackCenterRange": grpclib.const.Handler(
                self.__rpc_modify_z_stack_center_range,
                grpclib.const.Cardinality.UNARY_UNARY,
                ZStackServiceModifyZStackCenterRangeRequest,
                ZStackServiceModifyZStackCenterRangeResponse,
            ),
            "/zen_api.lm.acquisition.v1beta.ZStackService/ModifyZStackFirstLast": grpclib.const.Handler(
                self.__rpc_modify_z_stack_first_last,
                grpclib.const.Cardinality.UNARY_UNARY,
                ZStackServiceModifyZStackFirstLastRequest,
                ZStackServiceModifyZStackFirstLastResponse,
            ),
        }
