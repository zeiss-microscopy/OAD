# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/workflows/v2/job_info.proto, zen_api/workflows/v2/job_status.proto, zen_api/workflows/v2/workflow_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import v1 as _v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class JobStatus(betterproto.Enum):
    """Runtime status of the Job."""

    UNSPECIFIED = 0
    """Default value if status is not specified."""

    RUNNING = 1
    """Job is currently executed by the workflow runner."""

    PAUSED = 2
    """
    Job execution is paused (not supported for now and reserved only for future purposes
     for saving numeration sequence).
    """

    COMPLETED = 3
    """Job execution is successfully completed."""

    FAILED = 4
    """Job execution was failed."""

    CANCELLED = 5
    """Job execution was interrupted (cancelled)."""

    PENDING = 6
    """
    Job is created but still not started and waiting for beginning of execution.
    """


@dataclass(eq=False, repr=False)
class JobInfo(betterproto.Message):
    """
    Information about Job executed by the workflow runner contains a real-time updates and Job's events with Job state.
    """

    job_id: str = betterproto.string_field(1)
    """A Job unique runtime ID."""

    create_date: datetime = betterproto.message_field(2)
    """A date and time when JobInfo was created."""

    status: "JobStatus" = betterproto.enum_field(3)
    """A Job execution state."""

    start_options: "_v1__.StartJobOptions" = betterproto.message_field(4)
    """A Job starting options."""


@dataclass(eq=False, repr=False)
class WorkflowServiceGetJobInfoRequest(betterproto.Message):
    """The WorkflowServiceGetJobInfoRequest class."""

    job_id: str = betterproto.string_field(1)
    """Target Job ID."""


@dataclass(eq=False, repr=False)
class WorkflowServiceGetJobInfoResponse(betterproto.Message):
    """Response object representing the job info."""

    job_info: "JobInfo" = betterproto.message_field(1)
    """The job info."""


@dataclass(eq=False, repr=False)
class WorkflowServiceStartJobRequest(betterproto.Message):
    """The WorkflowServiceStartJobRequest class."""

    job_name: str = betterproto.string_field(1)
    """Job display name."""

    options: "_v1__.StartJobOptions" = betterproto.message_field(2)
    """Job starting options."""


@dataclass(eq=False, repr=False)
class WorkflowServiceStartJobResponse(betterproto.Message):
    """Response object representing the starting of a job."""

    job_info: "JobInfo" = betterproto.message_field(1)
    """The job info."""


@dataclass(eq=False, repr=False)
class WorkflowServiceStopJobRequest(betterproto.Message):
    """The WorkflowServiceStopJobRequest class."""

    job_id: str = betterproto.string_field(1)
    """Target Job ID."""


@dataclass(eq=False, repr=False)
class WorkflowServiceStopJobResponse(betterproto.Message):
    """The WorkflowServiceStopJobResponse class."""

    pass


@dataclass(eq=False, repr=False)
class WorkflowServiceWaitJobRequest(betterproto.Message):
    """The WorkflowServiceWaitJobRequest class."""

    job_id: str = betterproto.string_field(1)
    """Target Job ID."""


@dataclass(eq=False, repr=False)
class WorkflowServiceWaitJobResponse(betterproto.Message):
    """The WorkflowServiceWaitJobResponse class."""

    pass


class WorkflowServiceStub(betterproto.ServiceStub):
    async def get_job_info(
        self,
        workflow_service_get_job_info_request: "WorkflowServiceGetJobInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceGetJobInfoResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v2.WorkflowService/GetJobInfo",
            workflow_service_get_job_info_request,
            WorkflowServiceGetJobInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_job(
        self,
        workflow_service_start_job_request: "WorkflowServiceStartJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceStartJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v2.WorkflowService/StartJob",
            workflow_service_start_job_request,
            WorkflowServiceStartJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_job(
        self,
        workflow_service_stop_job_request: "WorkflowServiceStopJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceStopJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v2.WorkflowService/StopJob",
            workflow_service_stop_job_request,
            WorkflowServiceStopJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def wait_job(
        self,
        workflow_service_wait_job_request: "WorkflowServiceWaitJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkflowServiceWaitJobResponse":
        return await self._unary_unary(
            "/zen_api.workflows.v2.WorkflowService/WaitJob",
            workflow_service_wait_job_request,
            WorkflowServiceWaitJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WorkflowServiceBase(ServiceBase):

    async def get_job_info(
        self, workflow_service_get_job_info_request: "WorkflowServiceGetJobInfoRequest"
    ) -> "WorkflowServiceGetJobInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_job(
        self, workflow_service_start_job_request: "WorkflowServiceStartJobRequest"
    ) -> "WorkflowServiceStartJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_job(
        self, workflow_service_stop_job_request: "WorkflowServiceStopJobRequest"
    ) -> "WorkflowServiceStopJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def wait_job(
        self, workflow_service_wait_job_request: "WorkflowServiceWaitJobRequest"
    ) -> "WorkflowServiceWaitJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_job_info(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceGetJobInfoRequest, WorkflowServiceGetJobInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_job_info(request)
        await stream.send_message(response)

    async def __rpc_start_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceStartJobRequest, WorkflowServiceStartJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_job(request)
        await stream.send_message(response)

    async def __rpc_stop_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceStopJobRequest, WorkflowServiceStopJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_job(request)
        await stream.send_message(response)

    async def __rpc_wait_job(
        self,
        stream: "grpclib.server.Stream[WorkflowServiceWaitJobRequest, WorkflowServiceWaitJobResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.wait_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.workflows.v2.WorkflowService/GetJobInfo": grpclib.const.Handler(
                self.__rpc_get_job_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceGetJobInfoRequest,
                WorkflowServiceGetJobInfoResponse,
            ),
            "/zen_api.workflows.v2.WorkflowService/StartJob": grpclib.const.Handler(
                self.__rpc_start_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceStartJobRequest,
                WorkflowServiceStartJobResponse,
            ),
            "/zen_api.workflows.v2.WorkflowService/StopJob": grpclib.const.Handler(
                self.__rpc_stop_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceStopJobRequest,
                WorkflowServiceStopJobResponse,
            ),
            "/zen_api.workflows.v2.WorkflowService/WaitJob": grpclib.const.Handler(
                self.__rpc_wait_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkflowServiceWaitJobRequest,
                WorkflowServiceWaitJobResponse,
            ),
        }
