# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/hardware/v1/axis_identifier.proto, zen_api/hardware/v1/stage_axis.proto, zen_api/hardware/v1/stage_motion_state.proto, zen_api/hardware/v1/stage_service.proto, zen_api/hardware/v1/stage_state.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AxisIdentifier(betterproto.Enum):
    """Unique identifier for axis."""

    UNSPECIFIED = 0
    """Default enum value."""

    X = 1
    """
    X axis (translation axis).
     Controlled by length, default unit is meters.
    """

    Y = 2
    """
    Y axis (translation axis).
     Controlled by length, default unit is meters.
    """

    Z = 3
    """
    Z axis (translation axis).
     Controlled by length, default unit is meters.
    """

    R = 4
    """
    R axis (rotation axis).
     Controlled by angle, default unit is radians.
    """

    T = 5
    """
    T axis (rotation axis).
     Controlled by angle, default unit is radians.
    """

    M = 6
    """
    M axis (translation axis).
     Controlled by length, default unit is meters.
    """


class StageMotionState(betterproto.Enum):
    """Stage motion state for ZenApi."""

    UNSPECIFIED = 0
    """Default enum value."""

    UNKNOWN = 1
    """Should not occur in a well configured system."""

    ERROR = 2
    """
    The stage cannot perform any task. Software restart and/or
     physical intervention is required.
    """

    IDLE = 3
    """The stage is not moving."""

    MOVING = 4
    """The stage is in motion."""


class StageState(betterproto.Enum):
    """Stage state for ZenApi."""

    UNSPECIFIED = 0
    """Default enum value."""

    UNKNOWN = 1
    """Should not occur in a well configured system."""

    ERROR = 2
    """
    The stage cannot perform any task. Software restart and/or
     physical intervention is required.
    """

    NORMAL = 3
    """The state is functioning normally and can be used."""

    INITIALIZING = 4
    """
    The stage is in the process of reinitializing one or more axes, should not be used, and will
     ignore value sets and commands other than stop.
    """

    INITIALIZATION_NEEDED = 5
    """
    The stage will respond to motion commands, but positions may be reported erroneously,
     and the stage should be initialized before further use.
    """


@dataclass(eq=False, repr=False)
class StageAxis(betterproto.Message):
    """Abstract representation of an arbitrary axis."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    position: float = betterproto.double_field(2)
    """The position of the axis in meters or radians."""


@dataclass(eq=False, repr=False)
class StageServiceAxisVelocityResponse(betterproto.Message):
    """Abstract representation of an arbitrary axis and it's velocity."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    velocity: float = betterproto.double_field(2)
    """The velocity of the axis in meters per second or radians per second."""


@dataclass(eq=False, repr=False)
class StageServiceGetAvailableStageAxisRequest(betterproto.Message):
    """The StageServiceGetAvailableStageAxisRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetAvailableStageAxisResponse(betterproto.Message):
    """Response object of available stage axis."""

    available_axis: List["AxisIdentifier"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class StageServiceGetAxisPositionRequest(betterproto.Message):
    """The StageServiceGetAxisPositionRequest class."""

    axis_id: "AxisIdentifier" = betterproto.enum_field(1)
    """The requested axe."""


@dataclass(eq=False, repr=False)
class StageServiceGetAxisPositionResponse(betterproto.Message):
    """Abstract representation of an arbitrary axis."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    position: float = betterproto.double_field(2)
    """The position of the axis in meters or radians."""


@dataclass(eq=False, repr=False)
class StageServiceGetAxisVelocityRequest(betterproto.Message):
    """The StageServiceGetAxisVelocityRequest class."""

    axis_id: "AxisIdentifier" = betterproto.enum_field(1)
    """The requested axis."""


@dataclass(eq=False, repr=False)
class StageServiceGetAxisVelocityResponse(betterproto.Message):
    """Abstract representation of an arbitrary axis and it's velocity."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    velocity: float = betterproto.double_field(2)
    """The velocity of the axis in meters per second or radians per second."""


@dataclass(eq=False, repr=False)
class StageServiceGetStageMotionStateRequest(betterproto.Message):
    """The StageServiceGetStageMotionStateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetStageMotionStateResponse(betterproto.Message):
    """StageMotionState enum response."""

    state: "StageMotionState" = betterproto.enum_field(1)
    """The stage motion state."""


@dataclass(eq=False, repr=False)
class StageServiceGetStagePositionRequest(betterproto.Message):
    """The StageServiceGetStagePositionRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetStagePositionResponse(betterproto.Message):
    """Response object of stage axis positions."""

    axis_positions: List["StageAxis"] = betterproto.message_field(1)
    """The available axis and their positions."""


@dataclass(eq=False, repr=False)
class StageServiceGetStageStateRequest(betterproto.Message):
    """The StageServiceGetStageStateRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetStageStateResponse(betterproto.Message):
    """StageState enum response."""

    state: "StageState" = betterproto.enum_field(1)
    """The stage state."""


@dataclass(eq=False, repr=False)
class StageServiceGetStageVelocityRequest(betterproto.Message):
    """The StageServiceGetStageVelocityRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetStageVelocityResponse(betterproto.Message):
    """Response object of stage axis velocities."""

    axis_velocities: List["StageServiceAxisVelocityResponse"] = (
        betterproto.message_field(1)
    )
    """The available axis and their velocities."""


@dataclass(eq=False, repr=False)
class StageServiceInitializeStageRequest(betterproto.Message):
    """The StageServiceInitializeStageRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceInitializeStageResponse(betterproto.Message):
    """Response object of the initialize stage method."""

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to initialize the stage succeeded or not.
    """


@dataclass(eq=False, repr=False)
class StageServiceMoveToRequest(betterproto.Message):
    """The StageServiceMoveToRequest class."""

    axis_to_move: List["StageAxis"] = betterproto.message_field(1)
    """
    The stage axis that should move.
     The position is in meters.
    """


@dataclass(eq=False, repr=False)
class StageServiceMoveToResponse(betterproto.Message):
    """Response object of the MoveStage method."""

    task_success: bool = betterproto.bool_field(1)
    """
    A value indicating whether the task to move the stage succeeded or not.
    """


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageMotionStateChangedRequest(betterproto.Message):
    """The StageServiceRegisterOnStageMotionStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageMotionStateChangedResponse(betterproto.Message):
    """StageMotionState enum response."""

    state: "StageMotionState" = betterproto.enum_field(1)
    """The stage motion state."""


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStagePositionChangedRequest(betterproto.Message):
    """The StageServiceRegisterOnStagePositionChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStagePositionChangedResponse(betterproto.Message):
    """Abstract representation of an arbitrary axis."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    position: float = betterproto.double_field(2)
    """The position of the axis in meters or radians."""


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageStateChangedRequest(betterproto.Message):
    """The StageServiceRegisterOnStageStateChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageStateChangedResponse(betterproto.Message):
    """StageState enum response."""

    state: "StageState" = betterproto.enum_field(1)
    """The stage state."""


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageVelocityChangedRequest(betterproto.Message):
    """The StageServiceRegisterOnStageVelocityChangedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceRegisterOnStageVelocityChangedResponse(betterproto.Message):
    """Abstract representation of an arbitrary axis and it's velocity."""

    axis: "AxisIdentifier" = betterproto.enum_field(1)
    """The axis identifier."""

    velocity: float = betterproto.double_field(2)
    """The velocity of the axis in meters per second or radians per second."""


@dataclass(eq=False, repr=False)
class StageServiceStopRequest(betterproto.Message):
    """The StageServiceStopRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceStopResponse(betterproto.Message):
    """The StageServiceStopResponse class."""

    pass


class StageServiceStub(betterproto.ServiceStub):
    async def get_available_stage_axis(
        self,
        stage_service_get_available_stage_axis_request: "StageServiceGetAvailableStageAxisRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetAvailableStageAxisResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetAvailableStageAxis",
            stage_service_get_available_stage_axis_request,
            StageServiceGetAvailableStageAxisResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_axis_position(
        self,
        stage_service_get_axis_position_request: "StageServiceGetAxisPositionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetAxisPositionResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetAxisPosition",
            stage_service_get_axis_position_request,
            StageServiceGetAxisPositionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_axis_velocity(
        self,
        stage_service_get_axis_velocity_request: "StageServiceGetAxisVelocityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetAxisVelocityResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetAxisVelocity",
            stage_service_get_axis_velocity_request,
            StageServiceGetAxisVelocityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stage_motion_state(
        self,
        stage_service_get_stage_motion_state_request: "StageServiceGetStageMotionStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetStageMotionStateResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetStageMotionState",
            stage_service_get_stage_motion_state_request,
            StageServiceGetStageMotionStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stage_position(
        self,
        stage_service_get_stage_position_request: "StageServiceGetStagePositionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetStagePositionResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetStagePosition",
            stage_service_get_stage_position_request,
            StageServiceGetStagePositionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stage_state(
        self,
        stage_service_get_stage_state_request: "StageServiceGetStageStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetStageStateResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetStageState",
            stage_service_get_stage_state_request,
            StageServiceGetStageStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stage_velocity(
        self,
        stage_service_get_stage_velocity_request: "StageServiceGetStageVelocityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetStageVelocityResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/GetStageVelocity",
            stage_service_get_stage_velocity_request,
            StageServiceGetStageVelocityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def initialize_stage(
        self,
        stage_service_initialize_stage_request: "StageServiceInitializeStageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceInitializeStageResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/InitializeStage",
            stage_service_initialize_stage_request,
            StageServiceInitializeStageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_to(
        self,
        stage_service_move_to_request: "StageServiceMoveToRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceMoveToResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/MoveTo",
            stage_service_move_to_request,
            StageServiceMoveToResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_on_stage_motion_state_changed(
        self,
        stage_service_register_on_stage_motion_state_changed_request: "StageServiceRegisterOnStageMotionStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[StageServiceRegisterOnStageMotionStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.hardware.v1.StageService/RegisterOnStageMotionStateChanged",
            stage_service_register_on_stage_motion_state_changed_request,
            StageServiceRegisterOnStageMotionStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_stage_position_changed(
        self,
        stage_service_register_on_stage_position_changed_request: "StageServiceRegisterOnStagePositionChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[StageServiceRegisterOnStagePositionChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.hardware.v1.StageService/RegisterOnStagePositionChanged",
            stage_service_register_on_stage_position_changed_request,
            StageServiceRegisterOnStagePositionChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_stage_state_changed(
        self,
        stage_service_register_on_stage_state_changed_request: "StageServiceRegisterOnStageStateChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[StageServiceRegisterOnStageStateChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.hardware.v1.StageService/RegisterOnStageStateChanged",
            stage_service_register_on_stage_state_changed_request,
            StageServiceRegisterOnStageStateChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def register_on_stage_velocity_changed(
        self,
        stage_service_register_on_stage_velocity_changed_request: "StageServiceRegisterOnStageVelocityChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[StageServiceRegisterOnStageVelocityChangedResponse]:
        async for response in self._unary_stream(
            "/zen_api.hardware.v1.StageService/RegisterOnStageVelocityChanged",
            stage_service_register_on_stage_velocity_changed_request,
            StageServiceRegisterOnStageVelocityChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def stop(
        self,
        stage_service_stop_request: "StageServiceStopRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceStopResponse":
        return await self._unary_unary(
            "/zen_api.hardware.v1.StageService/Stop",
            stage_service_stop_request,
            StageServiceStopResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class StageServiceBase(ServiceBase):

    async def get_available_stage_axis(
        self,
        stage_service_get_available_stage_axis_request: "StageServiceGetAvailableStageAxisRequest",
    ) -> "StageServiceGetAvailableStageAxisResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_axis_position(
        self,
        stage_service_get_axis_position_request: "StageServiceGetAxisPositionRequest",
    ) -> "StageServiceGetAxisPositionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_axis_velocity(
        self,
        stage_service_get_axis_velocity_request: "StageServiceGetAxisVelocityRequest",
    ) -> "StageServiceGetAxisVelocityResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stage_motion_state(
        self,
        stage_service_get_stage_motion_state_request: "StageServiceGetStageMotionStateRequest",
    ) -> "StageServiceGetStageMotionStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stage_position(
        self,
        stage_service_get_stage_position_request: "StageServiceGetStagePositionRequest",
    ) -> "StageServiceGetStagePositionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stage_state(
        self, stage_service_get_stage_state_request: "StageServiceGetStageStateRequest"
    ) -> "StageServiceGetStageStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stage_velocity(
        self,
        stage_service_get_stage_velocity_request: "StageServiceGetStageVelocityRequest",
    ) -> "StageServiceGetStageVelocityResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def initialize_stage(
        self,
        stage_service_initialize_stage_request: "StageServiceInitializeStageRequest",
    ) -> "StageServiceInitializeStageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_to(
        self, stage_service_move_to_request: "StageServiceMoveToRequest"
    ) -> "StageServiceMoveToResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_on_stage_motion_state_changed(
        self,
        stage_service_register_on_stage_motion_state_changed_request: "StageServiceRegisterOnStageMotionStateChangedRequest",
    ) -> AsyncIterator[StageServiceRegisterOnStageMotionStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield StageServiceRegisterOnStageMotionStateChangedResponse()

    async def register_on_stage_position_changed(
        self,
        stage_service_register_on_stage_position_changed_request: "StageServiceRegisterOnStagePositionChangedRequest",
    ) -> AsyncIterator[StageServiceRegisterOnStagePositionChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield StageServiceRegisterOnStagePositionChangedResponse()

    async def register_on_stage_state_changed(
        self,
        stage_service_register_on_stage_state_changed_request: "StageServiceRegisterOnStageStateChangedRequest",
    ) -> AsyncIterator[StageServiceRegisterOnStageStateChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield StageServiceRegisterOnStageStateChangedResponse()

    async def register_on_stage_velocity_changed(
        self,
        stage_service_register_on_stage_velocity_changed_request: "StageServiceRegisterOnStageVelocityChangedRequest",
    ) -> AsyncIterator[StageServiceRegisterOnStageVelocityChangedResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield StageServiceRegisterOnStageVelocityChangedResponse()

    async def stop(
        self, stage_service_stop_request: "StageServiceStopRequest"
    ) -> "StageServiceStopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_available_stage_axis(
        self,
        stream: "grpclib.server.Stream[StageServiceGetAvailableStageAxisRequest, StageServiceGetAvailableStageAxisResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_stage_axis(request)
        await stream.send_message(response)

    async def __rpc_get_axis_position(
        self,
        stream: "grpclib.server.Stream[StageServiceGetAxisPositionRequest, StageServiceGetAxisPositionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_axis_position(request)
        await stream.send_message(response)

    async def __rpc_get_axis_velocity(
        self,
        stream: "grpclib.server.Stream[StageServiceGetAxisVelocityRequest, StageServiceGetAxisVelocityResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_axis_velocity(request)
        await stream.send_message(response)

    async def __rpc_get_stage_motion_state(
        self,
        stream: "grpclib.server.Stream[StageServiceGetStageMotionStateRequest, StageServiceGetStageMotionStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stage_motion_state(request)
        await stream.send_message(response)

    async def __rpc_get_stage_position(
        self,
        stream: "grpclib.server.Stream[StageServiceGetStagePositionRequest, StageServiceGetStagePositionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stage_position(request)
        await stream.send_message(response)

    async def __rpc_get_stage_state(
        self,
        stream: "grpclib.server.Stream[StageServiceGetStageStateRequest, StageServiceGetStageStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stage_state(request)
        await stream.send_message(response)

    async def __rpc_get_stage_velocity(
        self,
        stream: "grpclib.server.Stream[StageServiceGetStageVelocityRequest, StageServiceGetStageVelocityResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stage_velocity(request)
        await stream.send_message(response)

    async def __rpc_initialize_stage(
        self,
        stream: "grpclib.server.Stream[StageServiceInitializeStageRequest, StageServiceInitializeStageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.initialize_stage(request)
        await stream.send_message(response)

    async def __rpc_move_to(
        self,
        stream: "grpclib.server.Stream[StageServiceMoveToRequest, StageServiceMoveToResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_to(request)
        await stream.send_message(response)

    async def __rpc_register_on_stage_motion_state_changed(
        self,
        stream: "grpclib.server.Stream[StageServiceRegisterOnStageMotionStateChangedRequest, StageServiceRegisterOnStageMotionStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_stage_motion_state_changed,
            stream,
            request,
        )

    async def __rpc_register_on_stage_position_changed(
        self,
        stream: "grpclib.server.Stream[StageServiceRegisterOnStagePositionChangedRequest, StageServiceRegisterOnStagePositionChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_stage_position_changed,
            stream,
            request,
        )

    async def __rpc_register_on_stage_state_changed(
        self,
        stream: "grpclib.server.Stream[StageServiceRegisterOnStageStateChangedRequest, StageServiceRegisterOnStageStateChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_stage_state_changed,
            stream,
            request,
        )

    async def __rpc_register_on_stage_velocity_changed(
        self,
        stream: "grpclib.server.Stream[StageServiceRegisterOnStageVelocityChangedRequest, StageServiceRegisterOnStageVelocityChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.register_on_stage_velocity_changed,
            stream,
            request,
        )

    async def __rpc_stop(
        self,
        stream: "grpclib.server.Stream[StageServiceStopRequest, StageServiceStopResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.hardware.v1.StageService/GetAvailableStageAxis": grpclib.const.Handler(
                self.__rpc_get_available_stage_axis,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetAvailableStageAxisRequest,
                StageServiceGetAvailableStageAxisResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetAxisPosition": grpclib.const.Handler(
                self.__rpc_get_axis_position,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetAxisPositionRequest,
                StageServiceGetAxisPositionResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetAxisVelocity": grpclib.const.Handler(
                self.__rpc_get_axis_velocity,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetAxisVelocityRequest,
                StageServiceGetAxisVelocityResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetStageMotionState": grpclib.const.Handler(
                self.__rpc_get_stage_motion_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetStageMotionStateRequest,
                StageServiceGetStageMotionStateResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetStagePosition": grpclib.const.Handler(
                self.__rpc_get_stage_position,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetStagePositionRequest,
                StageServiceGetStagePositionResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetStageState": grpclib.const.Handler(
                self.__rpc_get_stage_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetStageStateRequest,
                StageServiceGetStageStateResponse,
            ),
            "/zen_api.hardware.v1.StageService/GetStageVelocity": grpclib.const.Handler(
                self.__rpc_get_stage_velocity,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetStageVelocityRequest,
                StageServiceGetStageVelocityResponse,
            ),
            "/zen_api.hardware.v1.StageService/InitializeStage": grpclib.const.Handler(
                self.__rpc_initialize_stage,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceInitializeStageRequest,
                StageServiceInitializeStageResponse,
            ),
            "/zen_api.hardware.v1.StageService/MoveTo": grpclib.const.Handler(
                self.__rpc_move_to,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceMoveToRequest,
                StageServiceMoveToResponse,
            ),
            "/zen_api.hardware.v1.StageService/RegisterOnStageMotionStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_stage_motion_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                StageServiceRegisterOnStageMotionStateChangedRequest,
                StageServiceRegisterOnStageMotionStateChangedResponse,
            ),
            "/zen_api.hardware.v1.StageService/RegisterOnStagePositionChanged": grpclib.const.Handler(
                self.__rpc_register_on_stage_position_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                StageServiceRegisterOnStagePositionChangedRequest,
                StageServiceRegisterOnStagePositionChangedResponse,
            ),
            "/zen_api.hardware.v1.StageService/RegisterOnStageStateChanged": grpclib.const.Handler(
                self.__rpc_register_on_stage_state_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                StageServiceRegisterOnStageStateChangedRequest,
                StageServiceRegisterOnStageStateChangedResponse,
            ),
            "/zen_api.hardware.v1.StageService/RegisterOnStageVelocityChanged": grpclib.const.Handler(
                self.__rpc_register_on_stage_velocity_changed,
                grpclib.const.Cardinality.UNARY_STREAM,
                StageServiceRegisterOnStageVelocityChangedRequest,
                StageServiceRegisterOnStageVelocityChangedResponse,
            ),
            "/zen_api.hardware.v1.StageService/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceStopRequest,
                StageServiceStopResponse,
            ),
        }
