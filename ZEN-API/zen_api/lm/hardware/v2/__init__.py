# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: zen_api/lm/hardware/v2/focus_service.proto, zen_api/lm/hardware/v2/stage_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FocusServiceGetAccelerationRequest(betterproto.Message):
    """The FocusServiceGetAccelerationRequest class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceGetAccelerationResponse(betterproto.Message):
    """Acceleration of the focus in %."""

    value: float = betterproto.double_field(1)
    """The acceleration in %."""


@dataclass(eq=False, repr=False)
class FocusServiceGetPositionRequest(betterproto.Message):
    """The FocusServiceGetPositionRequest class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceGetPositionResponse(betterproto.Message):
    """Position of the focus in meters."""

    value: float = betterproto.double_field(1)
    """The position in meters."""


@dataclass(eq=False, repr=False)
class FocusServiceGetSpeedRequest(betterproto.Message):
    """The FocusServiceGetSpeedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceGetSpeedResponse(betterproto.Message):
    """Speed of the focus in %."""

    value: float = betterproto.double_field(1)
    """The speed in %."""


@dataclass(eq=False, repr=False)
class FocusServiceMoveToRequest(betterproto.Message):
    """The FocusServiceMoveToRequest class."""

    value: float = betterproto.double_field(1)
    """New position in meters."""


@dataclass(eq=False, repr=False)
class FocusServiceMoveToResponse(betterproto.Message):
    """Describes the result of a Focus.MoveTo request."""

    position_changed: bool = betterproto.bool_field(1)
    """A value indicating whether the position was changed."""


@dataclass(eq=False, repr=False)
class FocusServiceSetAccelerationRequest(betterproto.Message):
    """The FocusServiceSetAccelerationRequest class."""

    acceleration: float = betterproto.double_field(1)
    """Acceleration in percent, i.e. values from range [0;100]."""


@dataclass(eq=False, repr=False)
class FocusServiceSetAccelerationResponse(betterproto.Message):
    """The FocusServiceSetAccelerationResponse class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceSetSpeedRequest(betterproto.Message):
    """The FocusServiceSetSpeedRequest class."""

    speed: float = betterproto.double_field(1)
    """Speed in percent, i.e. values from range [0;100]."""


@dataclass(eq=False, repr=False)
class FocusServiceSetSpeedResponse(betterproto.Message):
    """The FocusServiceSetSpeedResponse class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceStopRequest(betterproto.Message):
    """The FocusServiceStopRequest class."""

    pass


@dataclass(eq=False, repr=False)
class FocusServiceStopResponse(betterproto.Message):
    """The FocusServiceStopResponse class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetAccelerationRequest(betterproto.Message):
    """The StageServiceGetAccelerationRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetAccelerationResponse(betterproto.Message):
    """Acceleration of the stage."""

    x: float = betterproto.double_field(1)
    """The X component of the acceleration in %."""

    y: float = betterproto.double_field(2)
    """The Y component of the acceleration in %."""


@dataclass(eq=False, repr=False)
class StageServiceGetPositionRequest(betterproto.Message):
    """The StageServiceGetPositionRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetPositionResponse(betterproto.Message):
    """Position of the stage."""

    x: float = betterproto.double_field(1)
    """The X component of the position in meters."""

    y: float = betterproto.double_field(2)
    """The Y component of the position in meters."""


@dataclass(eq=False, repr=False)
class StageServiceGetSpeedRequest(betterproto.Message):
    """The StageServiceGetSpeedRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceGetSpeedResponse(betterproto.Message):
    """Speed of the stage."""

    x: float = betterproto.double_field(1)
    """The X component of the speed in %."""

    y: float = betterproto.double_field(2)
    """The Y component of the speed in %."""


@dataclass(eq=False, repr=False)
class StageServiceMoveToRequest(betterproto.Message):
    """The StageServiceMoveToRequest class."""

    x: Optional[float] = betterproto.message_field(1, wraps=betterproto.TYPE_DOUBLE)
    """
    Target position x in meters. Leave out if x position should not be changed.
    """

    y: Optional[float] = betterproto.message_field(2, wraps=betterproto.TYPE_DOUBLE)
    """
    Target position y in meters. Leave out if y position should not be changed.
    """


@dataclass(eq=False, repr=False)
class StageServiceMoveToResponse(betterproto.Message):
    """Describes the result of a Stage.MoveTo request."""

    position_changed: bool = betterproto.bool_field(1)
    """A value indicating whether the position was changed."""


@dataclass(eq=False, repr=False)
class StageServiceSetAccelerationRequest(betterproto.Message):
    """The StageServiceSetAccelerationRequest class."""

    acceleration_x: Optional[float] = betterproto.message_field(
        1, wraps=betterproto.TYPE_DOUBLE
    )
    """
    Acceleration in x direction in percent, i.e. values from range [0;100].
    """

    acceleration_y: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """
    Acceleration in y direction in percent, i.e. values from range [0;100].
    """


@dataclass(eq=False, repr=False)
class StageServiceSetAccelerationResponse(betterproto.Message):
    """The StageServiceSetAccelerationResponse class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceSetSpeedRequest(betterproto.Message):
    """The StageServiceSetSpeedRequest class."""

    speed_x: Optional[float] = betterproto.message_field(
        1, wraps=betterproto.TYPE_DOUBLE
    )
    """Speed in x direction in percent, i.e. values from range [0;100]."""

    speed_y: Optional[float] = betterproto.message_field(
        2, wraps=betterproto.TYPE_DOUBLE
    )
    """Speed in y direction in percent, i.e. values from range [0;100]."""


@dataclass(eq=False, repr=False)
class StageServiceSetSpeedResponse(betterproto.Message):
    """The StageServiceSetSpeedResponse class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceStopRequest(betterproto.Message):
    """The StageServiceStopRequest class."""

    pass


@dataclass(eq=False, repr=False)
class StageServiceStopResponse(betterproto.Message):
    """The StageServiceStopResponse class."""

    pass


class FocusServiceStub(betterproto.ServiceStub):
    async def get_acceleration(
        self,
        focus_service_get_acceleration_request: "FocusServiceGetAccelerationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceGetAccelerationResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/GetAcceleration",
            focus_service_get_acceleration_request,
            FocusServiceGetAccelerationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_position(
        self,
        focus_service_get_position_request: "FocusServiceGetPositionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceGetPositionResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/GetPosition",
            focus_service_get_position_request,
            FocusServiceGetPositionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_speed(
        self,
        focus_service_get_speed_request: "FocusServiceGetSpeedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceGetSpeedResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/GetSpeed",
            focus_service_get_speed_request,
            FocusServiceGetSpeedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_to(
        self,
        focus_service_move_to_request: "FocusServiceMoveToRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceMoveToResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/MoveTo",
            focus_service_move_to_request,
            FocusServiceMoveToResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_acceleration(
        self,
        focus_service_set_acceleration_request: "FocusServiceSetAccelerationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceSetAccelerationResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/SetAcceleration",
            focus_service_set_acceleration_request,
            FocusServiceSetAccelerationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_speed(
        self,
        focus_service_set_speed_request: "FocusServiceSetSpeedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceSetSpeedResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/SetSpeed",
            focus_service_set_speed_request,
            FocusServiceSetSpeedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop(
        self,
        focus_service_stop_request: "FocusServiceStopRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FocusServiceStopResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.FocusService/Stop",
            focus_service_stop_request,
            FocusServiceStopResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class StageServiceStub(betterproto.ServiceStub):
    async def get_acceleration(
        self,
        stage_service_get_acceleration_request: "StageServiceGetAccelerationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetAccelerationResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/GetAcceleration",
            stage_service_get_acceleration_request,
            StageServiceGetAccelerationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_position(
        self,
        stage_service_get_position_request: "StageServiceGetPositionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetPositionResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/GetPosition",
            stage_service_get_position_request,
            StageServiceGetPositionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_speed(
        self,
        stage_service_get_speed_request: "StageServiceGetSpeedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceGetSpeedResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/GetSpeed",
            stage_service_get_speed_request,
            StageServiceGetSpeedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_to(
        self,
        stage_service_move_to_request: "StageServiceMoveToRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceMoveToResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/MoveTo",
            stage_service_move_to_request,
            StageServiceMoveToResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_acceleration(
        self,
        stage_service_set_acceleration_request: "StageServiceSetAccelerationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceSetAccelerationResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/SetAcceleration",
            stage_service_set_acceleration_request,
            StageServiceSetAccelerationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_speed(
        self,
        stage_service_set_speed_request: "StageServiceSetSpeedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceSetSpeedResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/SetSpeed",
            stage_service_set_speed_request,
            StageServiceSetSpeedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop(
        self,
        stage_service_stop_request: "StageServiceStopRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StageServiceStopResponse":
        return await self._unary_unary(
            "/zen_api.lm.hardware.v2.StageService/Stop",
            stage_service_stop_request,
            StageServiceStopResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FocusServiceBase(ServiceBase):

    async def get_acceleration(
        self,
        focus_service_get_acceleration_request: "FocusServiceGetAccelerationRequest",
    ) -> "FocusServiceGetAccelerationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_position(
        self, focus_service_get_position_request: "FocusServiceGetPositionRequest"
    ) -> "FocusServiceGetPositionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_speed(
        self, focus_service_get_speed_request: "FocusServiceGetSpeedRequest"
    ) -> "FocusServiceGetSpeedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_to(
        self, focus_service_move_to_request: "FocusServiceMoveToRequest"
    ) -> "FocusServiceMoveToResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_acceleration(
        self,
        focus_service_set_acceleration_request: "FocusServiceSetAccelerationRequest",
    ) -> "FocusServiceSetAccelerationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_speed(
        self, focus_service_set_speed_request: "FocusServiceSetSpeedRequest"
    ) -> "FocusServiceSetSpeedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(
        self, focus_service_stop_request: "FocusServiceStopRequest"
    ) -> "FocusServiceStopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_acceleration(
        self,
        stream: "grpclib.server.Stream[FocusServiceGetAccelerationRequest, FocusServiceGetAccelerationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_acceleration(request)
        await stream.send_message(response)

    async def __rpc_get_position(
        self,
        stream: "grpclib.server.Stream[FocusServiceGetPositionRequest, FocusServiceGetPositionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_position(request)
        await stream.send_message(response)

    async def __rpc_get_speed(
        self,
        stream: "grpclib.server.Stream[FocusServiceGetSpeedRequest, FocusServiceGetSpeedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_speed(request)
        await stream.send_message(response)

    async def __rpc_move_to(
        self,
        stream: "grpclib.server.Stream[FocusServiceMoveToRequest, FocusServiceMoveToResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_to(request)
        await stream.send_message(response)

    async def __rpc_set_acceleration(
        self,
        stream: "grpclib.server.Stream[FocusServiceSetAccelerationRequest, FocusServiceSetAccelerationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_acceleration(request)
        await stream.send_message(response)

    async def __rpc_set_speed(
        self,
        stream: "grpclib.server.Stream[FocusServiceSetSpeedRequest, FocusServiceSetSpeedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_speed(request)
        await stream.send_message(response)

    async def __rpc_stop(
        self,
        stream: "grpclib.server.Stream[FocusServiceStopRequest, FocusServiceStopResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.hardware.v2.FocusService/GetAcceleration": grpclib.const.Handler(
                self.__rpc_get_acceleration,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceGetAccelerationRequest,
                FocusServiceGetAccelerationResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/GetPosition": grpclib.const.Handler(
                self.__rpc_get_position,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceGetPositionRequest,
                FocusServiceGetPositionResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/GetSpeed": grpclib.const.Handler(
                self.__rpc_get_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceGetSpeedRequest,
                FocusServiceGetSpeedResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/MoveTo": grpclib.const.Handler(
                self.__rpc_move_to,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceMoveToRequest,
                FocusServiceMoveToResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/SetAcceleration": grpclib.const.Handler(
                self.__rpc_set_acceleration,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceSetAccelerationRequest,
                FocusServiceSetAccelerationResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/SetSpeed": grpclib.const.Handler(
                self.__rpc_set_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceSetSpeedRequest,
                FocusServiceSetSpeedResponse,
            ),
            "/zen_api.lm.hardware.v2.FocusService/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                FocusServiceStopRequest,
                FocusServiceStopResponse,
            ),
        }


class StageServiceBase(ServiceBase):

    async def get_acceleration(
        self,
        stage_service_get_acceleration_request: "StageServiceGetAccelerationRequest",
    ) -> "StageServiceGetAccelerationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_position(
        self, stage_service_get_position_request: "StageServiceGetPositionRequest"
    ) -> "StageServiceGetPositionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_speed(
        self, stage_service_get_speed_request: "StageServiceGetSpeedRequest"
    ) -> "StageServiceGetSpeedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_to(
        self, stage_service_move_to_request: "StageServiceMoveToRequest"
    ) -> "StageServiceMoveToResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_acceleration(
        self,
        stage_service_set_acceleration_request: "StageServiceSetAccelerationRequest",
    ) -> "StageServiceSetAccelerationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_speed(
        self, stage_service_set_speed_request: "StageServiceSetSpeedRequest"
    ) -> "StageServiceSetSpeedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(
        self, stage_service_stop_request: "StageServiceStopRequest"
    ) -> "StageServiceStopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_acceleration(
        self,
        stream: "grpclib.server.Stream[StageServiceGetAccelerationRequest, StageServiceGetAccelerationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_acceleration(request)
        await stream.send_message(response)

    async def __rpc_get_position(
        self,
        stream: "grpclib.server.Stream[StageServiceGetPositionRequest, StageServiceGetPositionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_position(request)
        await stream.send_message(response)

    async def __rpc_get_speed(
        self,
        stream: "grpclib.server.Stream[StageServiceGetSpeedRequest, StageServiceGetSpeedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_speed(request)
        await stream.send_message(response)

    async def __rpc_move_to(
        self,
        stream: "grpclib.server.Stream[StageServiceMoveToRequest, StageServiceMoveToResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_to(request)
        await stream.send_message(response)

    async def __rpc_set_acceleration(
        self,
        stream: "grpclib.server.Stream[StageServiceSetAccelerationRequest, StageServiceSetAccelerationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_acceleration(request)
        await stream.send_message(response)

    async def __rpc_set_speed(
        self,
        stream: "grpclib.server.Stream[StageServiceSetSpeedRequest, StageServiceSetSpeedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_speed(request)
        await stream.send_message(response)

    async def __rpc_stop(
        self,
        stream: "grpclib.server.Stream[StageServiceStopRequest, StageServiceStopResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/zen_api.lm.hardware.v2.StageService/GetAcceleration": grpclib.const.Handler(
                self.__rpc_get_acceleration,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetAccelerationRequest,
                StageServiceGetAccelerationResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/GetPosition": grpclib.const.Handler(
                self.__rpc_get_position,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetPositionRequest,
                StageServiceGetPositionResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/GetSpeed": grpclib.const.Handler(
                self.__rpc_get_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceGetSpeedRequest,
                StageServiceGetSpeedResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/MoveTo": grpclib.const.Handler(
                self.__rpc_move_to,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceMoveToRequest,
                StageServiceMoveToResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/SetAcceleration": grpclib.const.Handler(
                self.__rpc_set_acceleration,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceSetAccelerationRequest,
                StageServiceSetAccelerationResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/SetSpeed": grpclib.const.Handler(
                self.__rpc_set_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceSetSpeedRequest,
                StageServiceSetSpeedResponse,
            ),
            "/zen_api.lm.hardware.v2.StageService/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                StageServiceStopRequest,
                StageServiceStopResponse,
            ),
        }
